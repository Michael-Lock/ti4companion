{"version":3,"sources":["PlayerSelect.js","StrategySelect.js","TimerBlock.js","StatusBoard.js","ObjectiveSelectModal.js","ObjectivePanel.js","GameManager.js","serviceWorker.js","index.js"],"names":["COLOURS","description","colour","PlayerSelect","props","playerDetails","Array","i","createPlayer","state","selectedNumberOfPlayers","playerNumber","playerName","faction","victoryPoints","isSpeaker","isActivePlayer","isPassed","deselected","this","setState","playerNumberSelections","fill","e","slice","target","value","JSON","parse","onStartGame","finalPlayerDetails","determineSelection","onClick","playerNumberButtonHandleClick","numberOfPlayers","onPlayerNameChange","handlePlayerNameChange","onPlayerFactionChange","handlePlayerFactionChange","onPlayerColourChange","handlePlayerColourChange","Button","type","handleStartGame","React","Component","PlayerNumberSelect","isSelected","PlayerNumberButton","selected","renderPlayerNumberButton","className","id","PlayerDetailForm","playerDetailEntries","key","playerDetail","onFactionChange","onColourChange","renderPlayerDetailEntries","PlayerDetailEntry","factionElements","hidden","concat","faction_store","map","shortName","stringify","fullName","required","defaultValue","onChange","colourElements","playerColour","getFactionList","getColourList","STRATEGIES","name","number","StrategySelect","onStartRound","Row","onPlayerStrategyChange","Col","variant","onToggleTimers","isGameActive","handleStartRound","PlayerStrategyForm","players","speakerIndex","length","playerStrategyEntries","destinationIndex","onStrategyChange","renderPlayerStrategyEntries","PlayerStrategyEntry","strategyElements","strategy","playerStrategy","disabled","getStrategyList","Timer","time","TimerBlock","totalSeconds","hours","Math","floor","minutes","seconds","parseTime","currentSeconds","interactive","label","PlayerCard","player","playerStrategyButton","style","backgroundColor","isUsed","onStrategyCardClick","Card","onEndTurn","noGutters","xs","onPassButtonClick","playerTimer","onVictoryPointsClick","onContextMenu","StatusBoard","playerCards","playerTimers","span","offset","onEndRound","ObjectiveSelectModal","showModal","selectedObjectives","objectives","objective","isRevealed","filter","availableObjectives","objective_store","stage","some","selectedObjective","objectiveElements","objectiveSelect","onObjectiveChange","Modal","show","onHide","onCloseModal","centered","Header","Title","Body","selectedObjectiveSelection","longDescription","Footer","onConfirmModal","ObjectivePanel","objectiveBlocks","ObjectiveCard","order","shortDescription","onObjectiveCardClick","cardDisplay","GameHeader","turnTimer","showTurnTimer","currentTurnTimer","onTurnTimerClick","roundNumber","totalGameTimer","onGameTimerClick","GameManager","gameMode","showObjectiveSelectModal","baseSeconds","countStartTime","Date","now","isCounting","publicObjectives","fillPublicObjectives","heartbeat","setInterval","recalculateTimers","clearInterval","startGameTimer","newStrategy","playerString","newPlayer","newPlayerDetails","startTurnTimers","stopTurnTimers","stopGameTimer","newVictoryPoints","nativeEvent","which","maxVictoryPoints","restartTurnTimers","index","nextUnrevealedObjective","newObjective","isConfirmed","newPublicObjectives","NUMBER_OBJECTIVES_STAGE_ONE","recalculateGameTime","recalculateTurnTime","timer","getActivePlayer","resetCurrentTurn","currentPlayer","currentPlayerTimer","nextPlayer","getNextPlayer","nextPlayerTimer","activePlayer","highestInitiativeNumber","playerInitiativeNumber","renderPlayerSelect","renderStrategy","renderStatusBoard","Container","fluid","renderGameHeader","renderObjectivePanel","handleToggleTimers","handlePlayerStrategyChange","handleEndTurn","handleVictoryPointClick","handleStrategyCardClicked","handlePassButtonClicked","handleEndRound","handleTurnTimerClicked","handleGameTimerClicked","handleObjectiveCardClicked","renderGameComponent","handleCloseObjectiveSelectModal","handleObjectiveChange","Boolean","window","location","hostname","match","document","oncontextmenu","preventDefault","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cec4f38.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './PlayerSelect.css';\r\n\r\nimport faction_store from './data/factions.json';\r\n\r\nconst PLAYER_NUMBER_INDEX_OFFSET = 3; //player 3 is array index 0\r\nconst MAX_PLAYER_NUMBER = 6;\r\n\r\n// const FACTIONS = [\r\n//     {fullName: \"Arborec\", shortName: \"Arborec\"},\r\n//     {fullName: \"Barony of Letnev\", shortName: \"Letnev\"},\r\n//     {fullName: \"Clan of Saar\", shortName: \"Saar\"},\r\n//     {fullName: \"Embers of Muaat\", shortName: \"Muaat\"},\r\n//     {fullName: \"Emirates of Hacan\", shortName: \"Hacan\"},\r\n//     {fullName: \"Federation of Sol\", shortName: \"Sol\"},\r\n//     {fullName: \"Ghosts of Creuss\", shortName: \"Creuss\"},\r\n//     {fullName: \"L1Z1X Mindnet\", shortName: \"L1Z1X\"},\r\n//     {fullName: \"Mentak Coalition\", shortName: \"Mentak\"},\r\n//     {fullName: \"Naalu Collective\", shortName: \"Naalu\"},\r\n//     {fullName: \"Nekro Virus\", shortName: \"Nekro\"},\r\n//     {fullName: \"Sardakk N’orr\", shortName: \"N'orr\"},\r\n//     {fullName: \"Universities of Jol-Nar\", shortName: \"Jol-Nar\"},\r\n//     {fullName: \"Winnu\", shortName: \"Winnu\"},\r\n//     {fullName: \"Xxcha Kingdom\", shortName: \"Xxcha\"},\r\n//     {fullName: \"Yin Brotherhood\", shortName: \"Yin\"},\r\n//     {fullName: \"Yssaril Tribes\", shortName: \"Yssaril\"},    \r\n// ]\r\n\r\nconst COLOURS = [\r\n    {description: null, colour: null},\r\n    {description: \"Red\", colour: \"red\"},\r\n    {description: \"Blue\", colour: \"blue\"},\r\n    {description: \"Green\", colour: \"green\"},\r\n    {description: \"Yellow\", colour: \"yellow\"},\r\n    {description: \"Purple\", colour: \"purple\"},\r\n    {description: \"Black\", colour: \"black\"},\r\n]\r\n\r\nclass PlayerSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let playerDetails = Array(MAX_PLAYER_NUMBER);\r\n        for (let i = 0; i < MAX_PLAYER_NUMBER; i++) {\r\n            playerDetails[i] = this.createPlayer(i);\r\n        }\r\n\r\n        this.state = {\r\n            selectedNumberOfPlayers: null,\r\n            playerDetails: playerDetails,\r\n        };\r\n    }\r\n\r\n    createPlayer(playerNumber) {\r\n        var playerDetail = {\r\n            playerName: \"Player \" + (playerNumber + 1),\r\n            playerNumber: playerNumber,\r\n            faction: null,\r\n            colour: null,\r\n            victoryPoints: 0,\r\n            isSpeaker: playerNumber === 0 ? true : false,\r\n            isActivePlayer: playerNumber === 0 ? true : false,\r\n            isPassed: false,\r\n        }\r\n        return playerDetail;\r\n    }\r\n\r\n    playerNumberButtonHandleClick(playerNumber) {\r\n        //if the existing option is selected, deselect it\r\n        let deselected = this.state.selectedNumberOfPlayers === playerNumber\r\n\r\n        this.setState({\r\n            selectedNumberOfPlayers: deselected ? null : playerNumber,\r\n        });\r\n    }\r\n\r\n    determineSelection() {\r\n        let playerNumberSelections = Array(MAX_PLAYER_NUMBER).fill(false);\r\n        if (this.state.selectedNumberOfPlayers !== null) {\r\n            playerNumberSelections[this.state.selectedNumberOfPlayers - PLAYER_NUMBER_INDEX_OFFSET] = true;\r\n        }\r\n\r\n        return playerNumberSelections;\r\n    }\r\n\r\n    handlePlayerNameChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].playerName = e.target.value;\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handlePlayerFactionChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].faction = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n    \r\n    handlePlayerColourChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].colour = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartGame() {\r\n        if (this.props.onStartGame) {\r\n            let finalPlayerDetails = this.state.playerDetails.slice(0, this.state.selectedNumberOfPlayers)\r\n\r\n            return () => this.props.onStartGame(finalPlayerDetails)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const playerNumberSelections = this.determineSelection();\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h1>Number of Players</h1>\r\n                    <PlayerNumberSelect \r\n                        playerNumberSelections={playerNumberSelections}\r\n                        onClick={playerNumber => this.playerNumberButtonHandleClick(playerNumber)}\r\n                    />\r\n                </div>\r\n                <form>\r\n                    <PlayerDetailForm \r\n                        numberOfPlayers={this.state.selectedNumberOfPlayers} \r\n                        playerDetails={this.state.playerDetails}\r\n                        onPlayerNameChange={(e, playerNumber) => this.handlePlayerNameChange(e, playerNumber)}\r\n                        onPlayerFactionChange={(e, playerNumber) => this.handlePlayerFactionChange(e, playerNumber)}\r\n                        onPlayerColourChange={(e, playerNumber) => this.handlePlayerColourChange(e, playerNumber)}\r\n                    />\r\n                    <Button type=\"button\" onClick={this.handleStartGame()}>\r\n                        Start Game\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerNumberSelect extends React.Component {\r\n    renderPlayerNumberButton(playerNumber) {\r\n        const isSelected = this.props.playerNumberSelections[playerNumber - PLAYER_NUMBER_INDEX_OFFSET];\r\n\r\n        return (<PlayerNumberButton\r\n            value={playerNumber}\r\n            selected={isSelected}\r\n            onClick={() => this.props.onClick(playerNumber)}\r\n        />);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.renderPlayerNumberButton(3) }\r\n                { this.renderPlayerNumberButton(4) }\r\n                { this.renderPlayerNumberButton(5) }\r\n                { this.renderPlayerNumberButton(6) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerNumberButton(props) {\r\n    return (\r\n        <button \r\n            className={`playerNumButton ${props.selected ? \"selectedPlayerNumButton\" : \"\"}`} \r\n            id={`${props.value}Player`} \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nclass PlayerDetailForm extends React.Component {\r\n    renderPlayerDetailEntries() {\r\n        let playerDetailEntries = Array(this.props.numberOfPlayers);\r\n        for (let i = 0; i < this.props.numberOfPlayers; i++) {\r\n            playerDetailEntries[i] = <PlayerDetailEntry \r\n                key={i}\r\n                playerDetail={this.props.playerDetails[i]}\r\n                onPlayerNameChange={e => this.props.onPlayerNameChange(e, i)}\r\n                onFactionChange={e => this.props.onPlayerFactionChange(e, i)}\r\n                onColourChange={e => this.props.onPlayerColourChange(e, i)}\r\n            />;\r\n        }\r\n\r\n        return (<div>\r\n            {playerDetailEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerDetailEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerDetailEntry extends React.Component {\r\n    //TODO: could have a list of unselected factions passed down to prevent duplicates\r\n    //TODO: work out a better way of recording all the faction details (enum equivalent?)\r\n    getFactionList() {\r\n        let factionElements = Array(1);\r\n        factionElements[0] = <option key=\"unselected\" value={null} hidden/>\r\n        \r\n        factionElements = factionElements.concat(faction_store.map((faction) => \r\n            <option key={faction.shortName} value={JSON.stringify(faction)}>\r\n                {faction.fullName}\r\n            </option>));\r\n\r\n        //TODO: consider a datalist instead. Allows type-ahead but clearing is clunky\r\n        return <select \r\n            id=\"factions\" \r\n            required \r\n            defaultValue={this.props.playerDetail.faction}\r\n            onChange={this.props.onFactionChange}\r\n        >\r\n            {factionElements}\r\n        </select>;\r\n    }\r\n\r\n    getColourList() {\r\n        let colourElements = COLOURS.map((colour) => \r\n        <option key={colour.description} value={JSON.stringify(colour)}>\r\n            {colour.description}\r\n        </option>);\r\n\r\n        let playerColour = this.props.playerDetail.colour ? this.props.playerDetail.colour.colour : null;\r\n\r\n        return <select \r\n            id=\"colours\" \r\n            required \r\n            defaultValue={playerColour} \r\n            onChange={this.props.onColourChange}\r\n        >\r\n            {colourElements}\r\n        </select>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input \r\n                    type=\"text\"\r\n                    defaultValue={this.props.playerDetail.playerName} \r\n                    onChange={this.props.onPlayerNameChange}\r\n                />\r\n                {this.getFactionList()}\r\n                {this.getColourList()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerSelect;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nconst STRATEGIES = [\r\n    {name: \"\", number: null, colour: null},\r\n    {name: \"Leadership\", number: 1, colour: \"red\"},\r\n    {name: \"Diplomacy\", number: 2, colour: \"orange\"},\r\n    {name: \"Politics\", number: 3, colour: \"yellow\"},\r\n    {name: \"Construction\", number: 4, colour: \"#307843\"},\r\n    {name: \"Trade\", number: 5, colour: \"#58e87e\"},\r\n    {name: \"Warfare\", number: 6, colour: \"cyan\"},\r\n    {name: \"Technology\", number: 7, colour: \"#084bc9\"},\r\n    {name: \"Imperial\", number: 8, colour: \"purple\"},\r\n];\r\n\r\nclass StrategySelect extends React.Component {\r\n    handleStartRound() {\r\n        if (this.props.onStartRound) {\r\n            return () => this.props.onStartRound()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {/*TODO: add strategy cards */}\r\n                </Row>\r\n                <Row>\r\n                    <PlayerStrategyForm\r\n                        playerDetails={this.props.playerDetails}\r\n                        onPlayerStrategyChange={(e, playerNumber) => this.props.onPlayerStrategyChange(e, playerNumber)}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button variant=\"light\" type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                            {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handleStartRound()}>\r\n                            Start Round\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyForm extends React.Component {\r\n    renderPlayerStrategyEntries() {\r\n        const players = this.props.playerDetails.slice();\r\n        var speakerIndex = 0;\r\n        for (let i = 0; i < players.length; i++) {\r\n            speakerIndex = players[i].isSpeaker ? i : speakerIndex;\r\n        }\r\n\r\n        let playerStrategyEntries = Array(players.length).fill(null);\r\n        for (let i = 0; i < players.length; i++) {\r\n            let destinationIndex = (((i - speakerIndex) % players.length) + players.length) % players.length;\r\n            playerStrategyEntries[destinationIndex] =\r\n                <PlayerStrategyEntry\r\n                    key={players[i].playerNumber}\r\n                    playerDetail={players[i]}\r\n                    onStrategyChange={e => this.props.onPlayerStrategyChange(e, players[i].playerNumber)}\r\n                />\r\n        }\r\n            \r\n        return (<div>\r\n            {playerStrategyEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerStrategyEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyEntry extends React.Component {\r\n    getStrategyList() {\r\n        let strategyElements = STRATEGIES.map((strategy) => \r\n            <option key={strategy.name} value={JSON.stringify(strategy)}>\r\n                {strategy.name}\r\n            </option>);\r\n\r\n        let playerStrategy = this.props.playerDetail.strategy ? this.props.playerDetail.strategy.description : null;\r\n\r\n        return <select \r\n            id=\"strategies\" \r\n            required \r\n            defaultValue={playerStrategy} \r\n            onChange={this.props.onStrategyChange}\r\n        >\r\n            {strategyElements}\r\n        </select>;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input \r\n                    key=\"playerName\"\r\n                    type=\"text\"\r\n                    defaultValue={this.props.playerDetail.playerName} \r\n                    disabled\r\n                />\r\n                <input \r\n                    key=\"playerFaction\"\r\n                    type=\"text\"\r\n                    defaultValue={this.props.playerDetail.faction && this.props.playerDetail.faction.fullName} \r\n                    disabled\r\n                />\r\n                {this.getStrategyList()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default StrategySelect;","import React from 'react';\r\nimport './TimerBlock.css';\r\n\r\nconst secondsInMinute = 60;\r\nconst secondsInHour = 60 * 60;\r\n\r\nfunction Timer(props) {\r\n    return (\r\n        <button className=\"timer\" onClick={props.onClick} disabled={props.disabled}>\r\n            {props.time}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass TimerBlock extends React.Component {\r\n    render() {\r\n        const time = parseTime(this.props.currentSeconds);\r\n\r\n        let interactive = this.props.onClick;\r\n\r\n        return (\r\n            <span className=\"Timer\">\r\n                <label className=\"timerLabel\">{this.props.label}</label>\r\n                <Timer time={time} disabled={this.props.disabled} onClick={interactive ? () => this.props.onClick(this.props.currentSeconds) : null} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n//-------------------------------------------\r\n\r\nfunction parseTime(totalSeconds) {\r\n    if (!totalSeconds) {\r\n        return \"00:00\";\r\n    }\r\n\r\n    const hours = Math.floor(totalSeconds / secondsInHour);\r\n    const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\r\n    const seconds = totalSeconds % secondsInMinute;\r\n\r\n    var time = hours > 0 ? hours + \":\" : \"\";\r\n    time += (minutes < 10 ? \"0\" + minutes : minutes) + \":\";\r\n    time += seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return time;\r\n}\r\n\r\nexport default TimerBlock;","import React from 'react';\r\nimport TimerBlock from './TimerBlock';\r\nimport Button from 'react-bootstrap/Button'\r\nimport {Row, Col} from 'react-bootstrap'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nimport './StatusBoard.css';\r\n\r\nclass StatusBoard extends React.Component {\r\n    render() {\r\n        let playerCards = this.props.players.map(\r\n            (player) => \r\n            <Col key={player.playerNumber}>\r\n                <PlayerCard \r\n                    key={player.playerNumber} \r\n                    player={player}\r\n                    playerTimer={this.props.playerTimers[player.playerNumber]}\r\n                    onEndTurn={() => this.props.onEndTurn()}\r\n                    onVictoryPointsClick={e => this.props.onVictoryPointsClick(e, JSON.stringify(player))}\r\n                    onStrategyCardClick={() => this.props.onStrategyCardClick(JSON.stringify(player))}\r\n                    onPassButtonClick={() => this.props.onPassButtonClick(JSON.stringify(player))}\r\n                />\r\n            </Col>\r\n        );\r\n\r\n        return (\r\n            <Row className=\"d-flex flex-column\">\r\n                <Row>\r\n                    {playerCards}\r\n                </Row>\r\n                <Row className=\"d-flex align-items-end\">\r\n                    <Col xs={{ span: 3, offset: 1}}>\r\n                        <Button variant=\"success\" type=\"button\" onClick={() => this.props.onEndTurn()}>\r\n                            End Turn\r\n                        </Button>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1}}>\r\n                        <Button variant=\"light\" type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                            {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1}}>\r\n                        <Button type=\"button\" onClick={() => this.props.onEndRound()}>\r\n                            End Round\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerCard(props) {\r\n    const player = props.player;\r\n    let playerColour = player.colour ? player.colour.colour : null;\r\n    let playerStrategy = player.strategy;\r\n    let playerStrategyButton = playerStrategy ? \r\n        <button \r\n            className=\"strategyCardButton\" \r\n            type=\"button\"\r\n            style={{backgroundColor: playerStrategy.isUsed ? \"grey\" : playerStrategy.colour,}}\r\n            onClick={props.onStrategyCardClick}\r\n        >\r\n            {playerStrategy.number}\r\n        </button> : \r\n        null;\r\n\r\n    return (\r\n        <Card className=\"border-0\">\r\n            <h6 \r\n                className={`rounded currentPlayerBlock ${player.isActivePlayer ? \"activePlayerBlock\" : player.isPassed ? \"passedPlayerBlock\" : \"\"}`}\r\n                onClick={props.onEndTurn}\r\n            >\r\n                {player.isActivePlayer ? \"Current Player\" : player.isPassed ? \"Passed\" : \"\"}\r\n            </h6>\r\n            <Card className=\"playerCard\">\r\n                <Row noGutters style={{ backgroundColor: playerColour, }}>\r\n                    <Col xs={2}>\r\n                        {/* TODO: Add faction icon */}\r\n                    </Col>\r\n                    <Col>\r\n                        <div>{player.playerName}</div>\r\n                        <div>{player.faction && player.faction.shortName}</div>\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                        <button \r\n                            className={\r\n                                `rounded passButton \r\n                                ${!player.strategy.isUsed ? \"invisible\" : \r\n                                player.isPassed ? \"passButtonPassed\" : \"\"}`\r\n                            }\r\n                            onClick={props.onPassButtonClick}\r\n                            disabled={!player.strategy.isUsed}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <TimerBlock currentSeconds={props.playerTimer.currentSeconds} disabled={true} />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        <button\r\n                            className=\"victoryPointButton\"\r\n                            type=\"button\"\r\n                            onClick={props.onVictoryPointsClick}\r\n                            onContextMenu={props.onVictoryPointsClick}\r\n                        >\r\n                            {player.victoryPoints}\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        {playerStrategyButton}\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n            </Card>\r\n        </Card>\r\n    )\r\n}\r\n\r\n\r\nexport default StatusBoard;","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport objective_store from './data/objectives.json';\r\n\r\nexport default function ObjectiveSelectModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let selectedObjectives = props.objectives.map((objective) => objective.isRevealed ? objective : null);\r\n    selectedObjectives = selectedObjectives.filter((objective) => objective !== null);\r\n\r\n    let availableObjectives = objective_store.filter((objective) => objective.stage === props.stage);\r\n    availableObjectives = availableObjectives.filter(\r\n        (objective) => !selectedObjectives.some(\r\n            function (selectedObjective) {\r\n                return objective.id === selectedObjective.id;\r\n            }\r\n       )\r\n    );\r\n\r\n    let objectiveElements = Array(1);\r\n    objectiveElements[0] = <option key=\"unselected\" className=\"nullOption\" value={null} hidden/>\r\n    objectiveElements = objectiveElements.concat(availableObjectives.map(\r\n        (objective) => <option key={objective.id} value={JSON.stringify(objective)}>\r\n            {objective.name}\r\n        </option>));\r\n    \r\n    let objectiveSelect = <select id=\"objectives\" required onChange={props.onObjectiveChange}>\r\n        {objectiveElements}\r\n    </select>;\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>Select Public Objective</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {objectiveSelect}\r\n                </div>\r\n                <div className=\"d-flex flex-column\">\r\n                    <br/>\r\n                    <p className=\"objectiveLongDescription\">\r\n                        {props.selectedObjectiveSelection ? props.selectedObjectiveSelection.longDescription : \"\"}\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedObjectiveSelection}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function ObjectivePanel(props) {\r\n    let objectiveBlocks = Array(props.objectives.length);\r\n\r\n    for (let i = 0; i < props.objectives.length; i++) {\r\n        const objective = props.objectives[i];\r\n        objectiveBlocks[i] = <ObjectiveCard \r\n            key={objective.order} \r\n            name={objective.name} \r\n            stage={objective.stage} \r\n            shortDescription={objective.shortDescription} \r\n            isRevealed={objective.isRevealed} \r\n            onObjectiveCardClick={() => props.onObjectiveCardClick(i)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {objectiveBlocks}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction ObjectiveCard(props) {\r\n    let cardDisplay = props.isRevealed ? props.shortDescription : props.stage;\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                type=\"button\" \r\n                className={`objectiveCard stage${props.stage} ${props.isRevealed ? \"revealed\" : \"\"}`} \r\n                onClick={props.onObjectiveCardClick}\r\n            >\r\n                {cardDisplay}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PlayerSelect from './PlayerSelect';\r\nimport StrategySelect from './StrategySelect';\r\nimport StatusBoard from './StatusBoard';\r\nimport TimerBlock from './TimerBlock';\r\nimport ObjectiveSelectModal from './ObjectiveSelectModal';\r\nimport ObjectivePanel from './ObjectivePanel';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nimport './GameManager.css';\r\n\r\nconst MODE_PLAYER_SELECT = 1;\r\nconst MODE_STRATEGY = 2;\r\nconst MODE_STATUS_BOARD = 3;\r\n\r\nconst NUMBER_STRATEGIES = 8;\r\nconst NUMBER_OBJECTIVES_STAGE_ONE = 5;\r\nconst NUMBER_OBJECTIVES_STAGE_TWO = 5;\r\n\r\nconst LEFT_CLICK = 1; //native event constant for a left click\r\nconst RIGHT_CLICK = 3; //native event constant for the opening of the context menu (i.e. right click)\r\n\r\n\r\nclass GameManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //View controls\r\n            gameMode: MODE_PLAYER_SELECT,\r\n            showObjectiveSelectModal: false,\r\n\r\n            //Temporary State\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null, //used for the objective select modal to record the current selection\r\n\r\n            //Game Details\r\n            playerDetails: null,\r\n            playerTimers: null,\r\n            roundNumber: 1,\r\n            totalGameTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            currentTurnTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            publicObjectives: this.fillPublicObjectives(),\r\n        };\r\n    }\r\n\r\n    //#region Lifecycle\r\n    componentDidMount() {\r\n        this.heartbeat = setInterval(() => this.recalculateTimers(), 500);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.heartbeat);\r\n    }\r\n    //#endregion\r\n\r\n    //#region Event Handlers\r\n    handleStartGame(playerDetails) {\r\n        let playerTimers = Array(playerDetails.length);\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            playerTimers[i] = {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n            gameMode: MODE_STRATEGY,\r\n        });\r\n\r\n        this.startGameTimer();\r\n    }\r\n\r\n    handlePlayerStrategyChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let newStrategy = JSON.parse(e.target.value);\r\n        newStrategy.isUsed = false;\r\n        playerDetails[playerNumber].strategy = newStrategy\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    //TODO Review the function name as it's likely to become confusing once strategy cards area added to the strategy select view\r\n    handleStrategyCardClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (player.isPassed) {\r\n            return; //can't toggle strategy card if already passed\r\n        }\r\n\r\n        let newStrategy = {...player.strategy};\r\n        newStrategy.isUsed = !newStrategy.isUsed;\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.strategy = newStrategy;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handlePassButtonClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (!player.isPassed && !player.strategy.isUsed) {\r\n            return; //can't pass if strategy card is not yet played\r\n        }\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.isPassed = !newPlayer.isPassed;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartRound() {\r\n        let newPlayerDetails = this.state.playerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            newPlayer.isActivePlayer = newPlayer.isSpeaker;\r\n            return newPlayer;\r\n        });\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n            gameMode: MODE_STATUS_BOARD,\r\n        });\r\n\r\n        this.startGameTimer();\r\n        this.startTurnTimers();\r\n    }\r\n\r\n    handleTurnTimerClicked() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startTurnTimers();\r\n            this.startGameTimer(); //if turn timers are running, the game timer should be as well\r\n        }\r\n    }\r\n\r\n    handleGameTimerClicked() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers(); //if the game timer is stopped, all timers should be stopped\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n        }\r\n    }\r\n\r\n    handleEndRound() {\r\n        let playerDetails = this.state.playerDetails.slice().map(\r\n            player => ({\r\n                ...player,\r\n                strategy: null,\r\n                isPassed: false,\r\n            })\r\n        );\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            roundNumber: this.state.roundNumber + 1,\r\n            playerDetails: playerDetails,\r\n        });\r\n\r\n        this.stopTurnTimers(true); //turns aren't occurring between rounds\r\n        this.startGameTimer(); //activity means the game timer should almost certainly be on\r\n    }\r\n\r\n    handleToggleTimers() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n            this.state.gameMode === MODE_STATUS_BOARD && this.startTurnTimers();\r\n        }\r\n    }\r\n\r\n    handleVictoryPointClick(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVictoryPoints = player.victoryPoints;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints + 1;\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints - 1;\r\n        }\r\n        \r\n        if (newVictoryPoints >= 0 && newVictoryPoints <= (this.state.maxVictoryPoints ? this.state.maxVictoryPoints : 10)) {\r\n            let newPlayer = {...player};\r\n            newPlayer.victoryPoints = newVictoryPoints;\r\n            newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleEndTurn() {\r\n        this.startGameTimer();\r\n        this.restartTurnTimers();\r\n    }\r\n\r\n    handleObjectiveCardClicked(index) {\r\n        let objective = this.state.publicObjectives[index];\r\n        if (!objective.isRevealed && objective.order === this.nextUnrevealedObjective()) {\r\n            this.setState({ \r\n                showObjectiveSelectModal: true,\r\n                selectedObjective: objective,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleObjectiveChange(e) {\r\n        let newObjective = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedObjectiveSelection: newObjective,\r\n        });\r\n    }\r\n\r\n    handleCloseObjectiveSelectModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedObjectiveSelection && this.state.selectedObjective) {\r\n            let newObjective = {...this.state.selectedObjectiveSelection};\r\n            newObjective.isRevealed = true;\r\n            newObjective.order = this.state.selectedObjective.order;\r\n\r\n            let newPublicObjectives = this.state.publicObjectives.slice();\r\n            newPublicObjectives[this.state.selectedObjective.order] = newObjective;\r\n            \r\n            this.setState({\r\n                publicObjectives: newPublicObjectives,\r\n                showObjectiveSelectModal: false,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            showObjectiveSelectModal: false,\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null,\r\n        });\r\n    }\r\n    //#endregion\r\n\r\n    //#region Commands\r\n    fillPublicObjectives() {\r\n        let numberObjectives = NUMBER_OBJECTIVES_STAGE_ONE + NUMBER_OBJECTIVES_STAGE_TWO;\r\n        let objectives = Array(numberObjectives);\r\n        for (let i = 0; i < numberObjectives; i++) {\r\n            objectives[i] = {\r\n                id: null,\r\n                order: i,\r\n                stage: i < NUMBER_OBJECTIVES_STAGE_ONE ? 1 : 2,\r\n                name: null,\r\n                longDescription: null,\r\n                shortDescription: null,\r\n                isRevealed: false,\r\n            }\r\n        }\r\n        return objectives;\r\n    }\r\n\r\n    nextUnrevealedObjective() {\r\n        for (let i = 0; i < this.state.publicObjectives.length; i++) {\r\n            if (!this.state.publicObjectives[i].isRevealed) {\r\n                return this.state.publicObjectives[i].order;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    recalculateTimers() {\r\n        if (this.state.totalGameTimer && this.state.totalGameTimer.isCounting) {\r\n            this.recalculateGameTime();\r\n        }\r\n        if (this.state.currentTurnTimer && this.state.currentTurnTimer.isCounting) {\r\n            this.recalculateTurnTime();\r\n        }\r\n    }\r\n\r\n    recalculateGameTime() {\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        this.setState({\r\n            totalGameTimer: timer,\r\n        });\r\n    }\r\n\r\n    recalculateTurnTime() {\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.currentSeconds = playerTimer.baseSeconds + Math.floor((Date.now() - playerTimer.countStartTime) / 1000);\r\n        playerTimers[playerNumber] = playerTimer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        });\r\n    }\r\n\r\n    startTurnTimers() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.isCounting = true;\r\n        playerTimer.countStartTime = Date.now();\r\n        playerTimers[playerNumber] = playerTimer;\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    stopTurnTimers(resetCurrentTurn) {\r\n        if (!this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = false;\r\n        if (resetCurrentTurn) {\r\n            timer.baseSeconds = 0;\r\n            timer.currentSeconds = 0;\r\n        }\r\n        else {\r\n            timer.baseSeconds = timer.currentSeconds;\r\n        }\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.isCounting = false;\r\n        playerTimer.baseSeconds = playerTimer.currentSeconds;\r\n        playerTimers[playerNumber] = playerTimer;\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    restartTurnTimers() {\r\n        let timer = {\r\n            baseSeconds: 0,\r\n            currentSeconds: 0,\r\n            countStartTime: Date.now(),\r\n            isCounting: true,\r\n        };\r\n\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let playerTimers = this.state.playerTimers.slice();\r\n\r\n        let currentPlayer = {...this.getActivePlayer()};\r\n        let currentPlayerTimer = {...playerTimers[currentPlayer.playerNumber]};\r\n        currentPlayerTimer.isCounting = false;\r\n        currentPlayerTimer.baseSeconds = currentPlayerTimer.currentSeconds;\r\n        currentPlayer.isActivePlayer = false;\r\n        playerTimers[currentPlayer.playerNumber] = currentPlayerTimer;\r\n        playerDetails[currentPlayer.playerNumber] = currentPlayer;\r\n\r\n        let nextPlayer = this.getNextPlayer(currentPlayer)\r\n        let nextPlayerTimer = {...playerTimers[nextPlayer.playerNumber]};\r\n        nextPlayerTimer.isCounting = true;\r\n        nextPlayerTimer.countStartTime = Date.now();\r\n        nextPlayer.isActivePlayer = true;\r\n        playerTimers[nextPlayer.playerNumber] = nextPlayerTimer;\r\n        playerDetails[nextPlayer.playerNumber] = nextPlayer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    startGameTimer() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    stopGameTimer() {\r\n        if (!this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.baseSeconds = timer.currentSeconds;\r\n        timer.isCounting = false;\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    getActivePlayer() {\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isActivePlayer) {\r\n                return this.state.playerDetails[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getNextPlayer(activePlayer) {\r\n        //TODO Factor in Naalu initiative (race or promissory)\r\n        let nextPlayer = activePlayer;\r\n        // determine the highest initiative number that could possibly be next. Offset by the number of strategies to allow it to loop back;\r\n        let highestInitiativeNumber = activePlayer.strategy.number + NUMBER_STRATEGIES - 1;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.isActivePlayer && !player.isPassed) {\r\n                // determine the player initiative number, offset by the number of strategies to allow it to loop back\r\n                let playerInitiativeNumber =\r\n                    player.strategy.number < activePlayer.strategy.number ?\r\n                        player.strategy.number + NUMBER_STRATEGIES :\r\n                        player.strategy.number;\r\n                if (playerInitiativeNumber < highestInitiativeNumber) {\r\n                    highestInitiativeNumber = playerInitiativeNumber;\r\n                    nextPlayer = player;\r\n                }\r\n            }\r\n        }\r\n        return nextPlayer;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Rendering methods\r\n    renderGameComponent() {\r\n        switch (this.state.gameMode) {\r\n            case MODE_PLAYER_SELECT:\r\n                return this.renderPlayerSelect();\r\n            case MODE_STRATEGY:\r\n                return this.renderStrategy();\r\n            case MODE_STATUS_BOARD:\r\n                return this.renderStatusBoard();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    renderPlayerSelect() {\r\n        return (\r\n            <div>\r\n                <PlayerSelect onStartGame={playerDetails => this.handleStartGame(playerDetails)} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderStrategy() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    {this.renderObjectivePanel()}\r\n                    <Col>\r\n                        <StrategySelect\r\n                            playerDetails={this.state.playerDetails}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onStartRound={() => this.handleStartRound()}\r\n                            onPlayerStrategyChange={(e, playerNumber) => this.handlePlayerStrategyChange(e, playerNumber)}\r\n                            />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStatusBoard() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(true)}</Row>\r\n                <Row>\r\n                    {this.renderObjectivePanel()}\r\n                    <Col>\r\n                        <StatusBoard\r\n                            roundNumber={this.state.roundNumber}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            players={this.state.playerDetails}\r\n                            playerTimers={this.state.playerTimers}\r\n                            onEndTurn={() => this.handleEndTurn()}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onVictoryPointsClick={(e, playerString) => this.handleVictoryPointClick(e, playerString)}\r\n                            onStrategyCardClick={(playerString) => this.handleStrategyCardClicked(playerString)}\r\n                            onPassButtonClick={(playerString) => this.handlePassButtonClicked(playerString)}\r\n                            onEndRound={() => this.handleEndRound()}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderGameHeader(showTurnTimer) {\r\n        return <GameHeader\r\n            roundNumber={this.state.roundNumber}\r\n            totalGameTimer={this.state.totalGameTimer}\r\n            showTurnTimer={showTurnTimer}\r\n            currentTurnTimer={this.state.currentTurnTimer}\r\n            onTurnTimerClick={() => this.handleTurnTimerClicked()}\r\n            onGameTimerClick={() => this.handleGameTimerClicked()}\r\n        />\r\n    }\r\n\r\n\r\n    renderObjectivePanel() {\r\n        return <ObjectivePanel\r\n            className=\"objectivePanel\"\r\n            objectives={this.state.publicObjectives}\r\n            onObjectiveCardClick={(index) => this.handleObjectiveCardClicked(index)}\r\n        />\r\n    }\r\n    //#endregion\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderGameComponent()}\r\n                <ObjectiveSelectModal\r\n                    showModal={this.state.showObjectiveSelectModal}\r\n                    objectives={this.state.publicObjectives}\r\n                    stage={this.state.selectedObjective ? this.state.selectedObjective.stage : null}\r\n                    selectedObjectiveSelection={this.state.selectedObjectiveSelection}\r\n                    onConfirmModal={() => this.handleCloseObjectiveSelectModal(true)}\r\n                    onCloseModal={() => this.handleCloseObjectiveSelectModal()}\r\n                    onObjectiveChange={e => this.handleObjectiveChange(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction GameHeader(props) {\r\n    let turnTimer = props.showTurnTimer ?\r\n        <TimerBlock\r\n            id=\"turnTimer\"\r\n            label=\"Turn Time\"\r\n            currentSeconds={props.currentTurnTimer.currentSeconds}\r\n            onClick={() => props.onTurnTimerClick()}\r\n        /> :\r\n        null;\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"timerLabel\">{\"Round: \" + props.roundNumber}</label>\r\n            {turnTimer}\r\n            <TimerBlock\r\n                id=\"turnTimer\"\r\n                label=\"Total Game Time\"\r\n                currentSeconds={props.totalGameTimer.currentSeconds}\r\n                onClick={() => props.onGameTimerClick()}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameManager;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GameManager from './GameManager';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './custom.scss';\r\n\r\ndocument.oncontextmenu = (e) => e.preventDefault();\r\n\r\nReactDOM.render(\r\n    <GameManager/>,\r\n    document.getElementById(\"root\")\r\n  );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}