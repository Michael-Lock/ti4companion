{"version":3,"sources":["DataHelper.js","PlayerSelect.js","StrategySelect.js","TimerBlock.js","Utils.js","TechPanel.js","StatusBoard.js","PlayAgenda.js","ObjectiveSelectModal.js","ObjectivePanel.js","TokenAssignModal.js","GameManager.js","serviceWorker.js","index.js"],"names":["colour_store","filterData","colour_file","faction_store","factions_file","planet_store","planets_file","tech_store","technologies_file","file","filter","item","setAdded","properties","expansions","includes","setRemoved","MAX_PLAYER_NUMBER","PlayerSelect","props","playerDetails","Array","i","createPlayer","state","selectedNumberOfPlayers","playerNumber","playerName","faction","testMode","colour","strategies","victoryPoints","isSpeaker","isActivePlayer","isPassed","isNaaluTelepathic","availableVotes","spentVotes","this","setState","playerNumberSelections","fill","e","slice","target","value","JSON","parse","finalPlayerDetails","initialiseTechnologies","onStartGame","map","player","newPlayer","techSets","push","createPlayerTechnologies","Biotic","Warfare","Propulsion","Cybernetic","shortName","Ship","Unit","Warsun","techs","techSet","techDefinition","isResearched","selectedFactions","selectedColours","selectedNames","description","determineSelection","Row","Col","xs","xl","span","offset","onClick","playerNumberButtonHandleClick","numberOfPlayers","onPlayerNameChange","handlePlayerNameChange","onPlayerFactionChange","handlePlayerFactionChange","onPlayerColourChange","handlePlayerColourChange","Button","type","disabled","isGameReady","handleStartGame","React","Component","PlayerNumberSelect","isSelected","PlayerNumberButton","key","selected","playerNumberButtons","length","renderPlayerNumberButton","generatePlayerNumberButtons","className","id","PlayerDetailForm","playerDetailEntries","playerDetail","onFactionChange","onColourChange","renderPlayerDetailEntries","PlayerDetailEntry","factionElements","hidden","concat","stringify","fullName","playerFaction","undefined","required","onChange","colourElements","playerColour","defaultValue","getFactionList","getColourList","StrategySelect","onStartRound","onPlayAgenda","strategiesPerPlayer","selectedStrategyCards","strategyIndex","strategyCard","number","onPlayerStrategyChange","strategyNumber","onSpeakerButtonClick","variant","onToggleTimers","isGameActive","handlePlayAgenda","isRoundReady","handleStartRound","PlayerStrategyForm","players","speakerIndex","playerStrategyEntries","destinationIndex","onStrategyChange","renderPlayerStrategyEntries","PlayerStrategyEntry","strategyLists","strategyElements","strategy_cards_file","strategy","name","getStrategyLists","Timer","time","TimerBlock","totalSeconds","hours","Math","floor","minutes","seconds","parseTime","currentSeconds","interactive","label","hasUnplayedStrategies","isUsed","TechPanel","techSetGroups","TechSetGroup","onTechClick","techButtons","TechButton","tech","text","PlayerCard","playerBackgroundColour","playerTextColour","textColour","playerButtons","style","backgroundColor","onStrategyCardClick","onNaaluInitiativeButtonClick","Card","onEndTurn","noGutters","color","onPassButtonClick","playerTimer","onVictoryPointsClick","onContextMenu","EndRoundConfirmModal","Modal","show","showModal","onHide","onCloseModal","centered","Body","Footer","onConfirmModal","StatusBoard","useState","showEndRoundModal","setShowEndRoundModal","sort","a","b","playerCards","playerTimers","strategyCardNumber","isAllPassed","isAllPlayersPassed","ButtonGroup","onEndRound","standardVoteOptions","PlayAgenda","onNextAgenda","onEndAgenda","AgendaForm","selectedAgenda","onAgendaChange","onAvailableVotesClick","playerString","delta","onSpentVotesClick","onVoteTargetChange","handleNextAgenda","handleEndAgenda","votePanel","VotePanel","resultsPanel","ResultsPanel","AgendaSelector","agendaElements","agenda_file","agenda","getAgendaList","AgendaCard","firstVoterIndex","argentZealIndex","isArgentZeal","playerVotePanels","PlayerVotePanel","VoteTargetSelector","voteTarget","agendaCardDisplay","electionTarget","forEffect","againstEffect","voteOptions","electionTargetType","getPlanetVoteOptions","voteOption","planet","trait","resolutions","existingResolution","j","resolution","votes","votedResolutions","ObjectiveSelectModal","selectedObjectives","objectives","objective","isRevealed","availableObjectives","objectives_file","stage","some","selectedObjective","objectiveElements","objectiveSelect","onObjectiveChange","Header","Title","selectedObjectiveSelection","longDescription","ObjectivePanel","objectiveBlocks","ObjectiveCard","order","shortDescription","onObjectiveCardClick","cardDisplay","TokenAssignModal","playerList","currentTokenOwnerNumber","playerSelect","onTokenOwnerChange","title","selectedTokenOwnerNumber","GameHeader","turnTimer","showTurnTimer","currentTurnTimer","onTurnTimerClick","roundNumber","totalGameTimer","onGameTimerClick","GameManager","gameMode","showObjectiveSelectModal","tokenAssignModalMode","tokenAssignModalTitle","isNaaluTelepathicActive","baseSeconds","countStartTime","Date","now","isCounting","publicObjectives","fillPublicObjectives","window","addEventListener","preventDefault","returnValue","heartbeat","setInterval","recalculateTimers","clearInterval","startGameTimer","newStrategy","isPlayingPolitics","newStrategies","newPlayerDetails","handleSpeakerButtonClicked","lowestInitiative","playerStrategies","playerInitiative","startTurnTimers","stopTurnTimers","stopGameTimer","newVictoryPoints","nativeEvent","which","maxVictoryPoints","newAvailableVotes","min","max","newSpentVotes","newVoteTarget","restartTurnTimers","index","nextUnrevealedObjective","newObjective","isConfirmed","newPublicObjectives","newAgenda","speakerNumber","naaluTelepathicPlayerNumber","newTokenOwnerNumber","oldOwner","newOwner","newTechSets","newTechs","newTech","NUMBER_OBJECTIVES_STAGE_ONE","recalculateGameTime","recalculateTurnTime","timer","getActivePlayer","resetCurrentTurn","currentPlayer","currentPlayerTimer","nextPlayer","getNextPlayer","nextPlayerTimer","activePlayer","activePlayerInitiative","initiativeRange","highestInitiativeNumber","playerInitiativeNumber","renderPlayerSelect","renderStrategy","renderStatusBoard","renderAgenda","Container","fluid","renderGameHeader","md","renderObjectivePanel","handleToggleTimers","handlePlayerStrategyChange","handleEndTurn","handleVictoryPointClick","handleStrategyCardClicked","handlePassButtonClicked","handleEndRound","handleTechClicked","handleNaaluInitiativeButtonClicked","handleAgendaChange","handleAvailableVotesClick","handleSpentVotesClick","handleVoteTargetChange","handleTurnTimerClicked","handleGameTimerClicked","handleObjectiveCardClicked","renderGameComponent","handleCloseObjectiveSelectModal","handleObjectiveChange","handleCloseTokenAssignModal","handleTokenOwnerChange","Boolean","location","hostname","match","document","oncontextmenu","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22cc8055.chunk.js","sourcesContent":["import properties from './data/properties.json';\r\n\r\nimport agenda_file from './data/agendas.json';\r\nimport colour_file from './data/colours.json';\r\nimport factions_file from './data/factions.json';\r\nimport objectives_file from './data/objectives.json';\r\nimport planets_file from './data/planets.json';\r\nimport systems_file from './data/systems.json';\r\nimport technologies_file from './data/technologies.json';\r\nimport strategy_cards_file from './data/strategy-cards.json';\r\n\r\nexport const agenda_store = () => {\r\n    return filterData(agenda_file);\r\n}\r\n\r\nexport const colour_store = () => {\r\n    return filterData(colour_file);\r\n}\r\n\r\nexport const faction_store = () => {\r\n    return filterData(factions_file);\r\n}\r\n\r\nexport const objective_store = () => {\r\n    return filterData(objectives_file);\r\n}\r\n\r\nexport const planet_store = () => {\r\n    return filterData(planets_file);\r\n}\r\n\r\nexport const system_store = () => {\r\n    return filterData(systems_file);\r\n}\r\n\r\nexport const tech_store = () => {\r\n    return technologies_file;\r\n}\r\n\r\nexport const strategy_card_store = () => {\r\n    return strategy_cards_file;\r\n}\r\n\r\n\r\nfunction filterData(file) {\r\n    return file.filter((item) => \r\n        (!item.setAdded || properties.expansions.includes(item.setAdded)) && (!item.setRemoved || !properties.expansions.includes(item.setRemoved)));\r\n}\r\n\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport './PlayerSelect.css';\r\n\r\nimport properties from './data/properties.json';\r\nimport {colour_store, faction_store, tech_store} from './DataHelper.js';\r\n\r\nconst PLAYER_NUMBER_INDEX_OFFSET = 3; //player 3 is array index 0\r\n//TODO: this should instead come from a user controlled setting, not a properties file\r\nconst MAX_PLAYER_NUMBER = properties.expansions.includes(\"PoK\") ? 8 : 6;\r\n\r\nclass PlayerSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let playerDetails = Array(MAX_PLAYER_NUMBER);\r\n        for (let i = 0; i < MAX_PLAYER_NUMBER; i++) {\r\n            playerDetails[i] = this.createPlayer(i);\r\n        }\r\n\r\n        this.state = {\r\n            selectedNumberOfPlayers: MAX_PLAYER_NUMBER,\r\n            playerDetails: playerDetails,\r\n        };\r\n    }\r\n\r\n    createPlayer(playerNumber) {\r\n        let playerDetail = {\r\n            playerName: \"Player \" + (playerNumber + 1),\r\n            playerNumber: playerNumber,\r\n            faction: properties.testMode ? faction_store()[playerNumber] : null,\r\n            colour: properties.testMode ? colour_store()[playerNumber] : null,\r\n            strategies: [],\r\n            victoryPoints: 0,\r\n            isSpeaker: playerNumber === 0 ? true : false,\r\n            isActivePlayer: playerNumber === 0 ? true : false,\r\n            isPassed: false,\r\n            isNaaluTelepathic: false,\r\n            availableVotes: 0,\r\n            spentVotes: 0,\r\n        }\r\n        return playerDetail;\r\n    }\r\n\r\n    playerNumberButtonHandleClick(playerNumber) {\r\n        this.setState({\r\n            selectedNumberOfPlayers: playerNumber,\r\n        });\r\n    }\r\n\r\n    determineSelection() {\r\n        let playerNumberSelections = Array(MAX_PLAYER_NUMBER).fill(false);\r\n        if (this.state.selectedNumberOfPlayers !== null) {\r\n            playerNumberSelections[this.state.selectedNumberOfPlayers - PLAYER_NUMBER_INDEX_OFFSET] = true;\r\n        }\r\n\r\n        return playerNumberSelections;\r\n    }\r\n\r\n    handlePlayerNameChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].playerName = e.target.value;\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handlePlayerFactionChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].faction = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n    \r\n    handlePlayerColourChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].colour = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartGame() {\r\n        let finalPlayerDetails = this.state.playerDetails.slice(0, this.state.selectedNumberOfPlayers)\r\n        finalPlayerDetails = this.initialiseTechnologies(finalPlayerDetails);\r\n\r\n        return this.props.onStartGame(finalPlayerDetails);\r\n    }\r\n\r\n    initialiseTechnologies(finalPlayerDetails) {\r\n        let playerDetails = finalPlayerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            let techSets = [];\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Biotic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Warfare));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Propulsion));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Cybernetic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store()[newPlayer.faction.shortName]));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Ship));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Unit));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Warsun));\r\n            newPlayer.techs = techSets;\r\n            return newPlayer;\r\n        });\r\n\r\n        return playerDetails;\r\n    }\r\n\r\n    createPlayerTechnologies(techSet) {\r\n        let playerTechs = techSet.map((techDefinition) => {\r\n            return {\r\n                techDefinition: techDefinition,\r\n                isResearched: false,\r\n            };\r\n        });\r\n\r\n        return playerTechs;\r\n    }\r\n\r\n    isGameReady() {\r\n        if (!this.state.selectedNumberOfPlayers) {\r\n            return true;\r\n        }\r\n        \r\n        let selectedFactions = [];\r\n        let selectedColours = [];\r\n        let selectedNames = [];\r\n        for (let i = 0; i < this.state.selectedNumberOfPlayers; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.faction || !player.colour || !player.playerName ||\r\n                    selectedColours.includes(player.colour.description) ||\r\n                    selectedFactions.includes(player.faction.shortName) || \r\n                    selectedNames.includes(player.playerName)) {\r\n                return true;\r\n            }\r\n            selectedFactions[i] = player.faction.shortName;\r\n            selectedColours[i] = player.colour.description;\r\n            selectedNames[i] = player.playerName;\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const playerNumberSelections = this.determineSelection();\r\n\r\n        return (\r\n            <Row>\r\n                <Col xs={12} xl={{span: 8, offset: 2}}> \r\n                    <div>\r\n                        <h1>Number of Players</h1>\r\n                        <PlayerNumberSelect \r\n                            playerNumberSelections={playerNumberSelections}\r\n                            onClick={playerNumber => this.playerNumberButtonHandleClick(playerNumber)}\r\n                        />\r\n                    </div>\r\n                    <form>\r\n                        <PlayerDetailForm \r\n                            numberOfPlayers={this.state.selectedNumberOfPlayers} \r\n                            playerDetails={this.state.playerDetails}\r\n                            onPlayerNameChange={(e, playerNumber) => this.handlePlayerNameChange(e, playerNumber)}\r\n                            onPlayerFactionChange={(e, playerNumber) => this.handlePlayerFactionChange(e, playerNumber)}\r\n                            onPlayerColourChange={(e, playerNumber) => this.handlePlayerColourChange(e, playerNumber)}\r\n                        />\r\n                        <Button type=\"button\" disabled= {this.isGameReady()} onClick={() => this.handleStartGame()}>\r\n                            Start Game\r\n                        </Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerNumberSelect extends React.Component {\r\n    renderPlayerNumberButton(playerNumber) {\r\n        const isSelected = this.props.playerNumberSelections[playerNumber - PLAYER_NUMBER_INDEX_OFFSET];\r\n\r\n        return (\r\n            <PlayerNumberButton\r\n                key={playerNumber} \r\n                value={playerNumber}\r\n                selected={isSelected}\r\n                onClick={() => this.props.onClick(playerNumber)}\r\n            />\r\n        );\r\n    }\r\n\r\n    generatePlayerNumberButtons() {\r\n        let playerNumberButtons = Array(MAX_PLAYER_NUMBER - PLAYER_NUMBER_INDEX_OFFSET + 1);\r\n        for (let i = 0; i < playerNumberButtons.length; i++) {\r\n            playerNumberButtons[i] = this.renderPlayerNumberButton(i + PLAYER_NUMBER_INDEX_OFFSET);\r\n        }\r\n        return playerNumberButtons;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {this.generatePlayerNumberButtons()}\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerNumberButton(props) {\r\n    return (\r\n        <button \r\n            className={`playerNumButton ${props.selected ? \"selectedPlayerNumButton\" : \"\"}`} \r\n            id={`${props.value}Player`} \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nclass PlayerDetailForm extends React.Component {\r\n    renderPlayerDetailEntries() {\r\n        let playerDetailEntries = Array(this.props.numberOfPlayers);\r\n        for (let i = 0; i < this.props.numberOfPlayers; i++) {\r\n            playerDetailEntries[i] = <PlayerDetailEntry \r\n                key={i}\r\n                playerDetail={this.props.playerDetails[i]}\r\n                onPlayerNameChange={e => this.props.onPlayerNameChange(e, i)}\r\n                onFactionChange={e => this.props.onPlayerFactionChange(e, i)}\r\n                onColourChange={e => this.props.onPlayerColourChange(e, i)}\r\n            />;\r\n        }\r\n\r\n        return (<div>\r\n            {playerDetailEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerDetailEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerDetailEntry extends React.Component {\r\n    getFactionList() {\r\n        let factionElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        factionElements = factionElements.concat(faction_store().map((faction) => \r\n            <option key={faction.shortName} value={JSON.stringify(faction)}>\r\n                {faction.fullName}\r\n            </option>));\r\n\r\n        let playerFaction = this.props.playerDetail.faction ? JSON.stringify(this.props.playerDetail.faction) : undefined;\r\n\r\n        return <select \r\n            id=\"factions\" \r\n            required \r\n            value={playerFaction}\r\n            onChange={this.props.onFactionChange}\r\n        >\r\n            {factionElements}\r\n        </select>;\r\n    }\r\n\r\n    getColourList() {\r\n        let colourElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        colourElements = colourElements.concat(colour_store().map((colour) => {\r\n            return (\r\n                <option key={colour.description} value={JSON.stringify(colour)}>\r\n                    {colour.description}\r\n                </option>\r\n            )\r\n        }));\r\n\r\n        let playerColour = this.props.playerDetail.colour ? JSON.stringify(this.props.playerDetail.colour) : undefined;\r\n\r\n        return <select \r\n            id=\"colours\" \r\n            required \r\n            defaultValue={playerColour} \r\n            onChange={this.props.onColourChange}\r\n        >\r\n            {colourElements}\r\n        </select>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={{span: 2, offset: 0}} xl={{span: 1, offset: 1}}>\r\n                    <button className={`speakerToken ${this.props.playerDetail.isSpeaker ? \"\" : \"invisible\"} disabled`}/>\r\n                </Col>\r\n                <Col xs={4}>\r\n                    <input \r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.playerName} \r\n                        onChange={this.props.onPlayerNameChange}\r\n                    />\r\n                </Col>\r\n                <Col xs={4}>\r\n                    {this.getFactionList()}\r\n                </Col>\r\n                <Col xs={2}>\r\n                    {this.getColourList()}\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerSelect;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport {strategy_card_store} from './DataHelper.js';\r\n\r\nconst SECOND_STRATEGY_THRESHOLD = 4; //the maximum number of players (inclusive) before only a single strategy is picked per player \r\n\r\nclass StrategySelect extends React.Component {\r\n    handleStartRound() {\r\n        if (this.props.onStartRound) {\r\n            return () => this.props.onStartRound()\r\n        }\r\n    }\r\n\r\n    handlePlayAgenda() {\r\n        if (this.props.onPlayAgenda) {\r\n            return () => this.props.onPlayAgenda()\r\n        }\r\n    }\r\n\r\n    isRoundReady() {\r\n        let strategiesPerPlayer = this.props.playerDetails.length <= SECOND_STRATEGY_THRESHOLD ? 2 : 1;\r\n        let selectedStrategyCards = [];\r\n\r\n        for (let i = 0; i < this.props.playerDetails.length; i++) {\r\n            let player = this.props.playerDetails[i];\r\n            if (player.strategies.length < strategiesPerPlayer) {\r\n                return false;\r\n            }\r\n            for (let strategyIndex = 0; strategyIndex < player.strategies.length; strategyIndex++) {\r\n                if (selectedStrategyCards.includes(player.strategies[strategyIndex].strategyCard.number)) {\r\n                    return false;\r\n                }\r\n                selectedStrategyCards.push(player.strategies[strategyIndex].strategyCard.number);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {/*TODO: add strategy cards */}\r\n                </Row>\r\n                <Row>\r\n                    <PlayerStrategyForm\r\n                        playerDetails={this.props.playerDetails}\r\n                        onPlayerStrategyChange={(e, playerNumber, strategyNumber) => this.props.onPlayerStrategyChange(e, playerNumber, strategyNumber)}\r\n                        onSpeakerButtonClick={this.props.onSpeakerButtonClick}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button variant=\"light\" type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                            {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handlePlayAgenda()}>\r\n                            Play Agenda\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" disabled={!this.isRoundReady()} onClick={this.handleStartRound()}>\r\n                            Start Round\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyForm extends React.Component {\r\n    renderPlayerStrategyEntries() {\r\n        const players = this.props.playerDetails.slice();\r\n        var speakerIndex = 0;\r\n        for (let i = 0; i < players.length; i++) {\r\n            speakerIndex = players[i].isSpeaker ? i : speakerIndex;\r\n        }\r\n\r\n        let strategiesPerPlayer = this.props.playerDetails.length <= SECOND_STRATEGY_THRESHOLD ? 2 : 1;\r\n\r\n        let playerStrategyEntries = Array(players.length).fill(null);\r\n        for (let i = 0; i < players.length; i++) {\r\n            let destinationIndex = (((i - speakerIndex) % players.length) + players.length) % players.length;\r\n            playerStrategyEntries[destinationIndex] =\r\n                <PlayerStrategyEntry\r\n                    key={players[i].playerNumber}\r\n                    playerDetail={players[i]}\r\n                    strategiesPerPlayer={strategiesPerPlayer}\r\n                    onStrategyChange={(e, strategyNumber) => this.props.onPlayerStrategyChange(e, players[i].playerNumber, strategyNumber)}\r\n                    onSpeakerButtonClick={this.props.onSpeakerButtonClick}\r\n                />\r\n        }\r\n            \r\n        return (<Col>\r\n            {playerStrategyEntries}\r\n        </Col>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.renderPlayerStrategyEntries()\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyEntry extends React.Component {\r\n    getStrategyLists() {\r\n        let strategyLists = [];\r\n        for (let i = 0; i < this.props.strategiesPerPlayer; i++) {\r\n            let strategyElements = [<option key=\"unselected\" value={null} hidden/>]\r\n            strategyElements = strategyElements.concat(strategy_card_store().map((strategy) => \r\n                <option key={strategy.name} value={JSON.stringify(strategy)}>\r\n                    {strategy.name}\r\n                </option>));\r\n\r\n            strategyLists[i] = <select \r\n                key={i}\r\n                required \r\n                onChange={(e) => this.props.onStrategyChange(e, i)}\r\n            >\r\n                {strategyElements}\r\n            </select>;   \r\n        }\r\n        return strategyLists;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={2} xl={1}>\r\n                    <button \r\n                        className={`speakerToken ${this.props.playerDetail.isSpeaker ? \"\" : \"invisible\"}`}\r\n                        onClick={this.props.onSpeakerButtonClick} \r\n                    />\r\n                </Col>\r\n                <Col xs={10} xl={11}>\r\n                    <input\r\n                        key=\"playerName\"\r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.playerName}\r\n                        disabled\r\n                    />\r\n                {/* </Col> */}\r\n                {/* <Col xs={3}> */}\r\n                    <input\r\n                        key=\"playerFaction\"\r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.faction && this.props.playerDetail.faction.fullName}\r\n                        disabled\r\n                    />\r\n                {/* </Col> */}\r\n                {/* <Col xs={4}> */}\r\n                    {this.getStrategyLists()}\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default StrategySelect;","import React from 'react';\r\nimport './TimerBlock.css';\r\n\r\nconst secondsInMinute = 60;\r\nconst secondsInHour = 60 * 60;\r\n\r\nfunction Timer(props) {\r\n    return (\r\n        <button className=\"timer\" onClick={props.onClick} disabled={props.disabled}>\r\n            {props.time}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass TimerBlock extends React.Component {\r\n    render() {\r\n        const time = parseTime(this.props.currentSeconds);\r\n\r\n        let interactive = this.props.onClick;\r\n\r\n        return (\r\n            <span className=\"Timer\">\r\n                <label className=\"timerLabel\">{this.props.label}</label>\r\n                <Timer time={time} disabled={this.props.disabled} onClick={interactive ? () => this.props.onClick(this.props.currentSeconds) : null} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n//-------------------------------------------\r\n\r\nfunction parseTime(totalSeconds) {\r\n    if (!totalSeconds) {\r\n        return \"00:00\";\r\n    }\r\n\r\n    const hours = Math.floor(totalSeconds / secondsInHour);\r\n    const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\r\n    const seconds = totalSeconds % secondsInMinute;\r\n\r\n    var time = hours > 0 ? hours + \":\" : \"\";\r\n    time += (minutes < 10 ? \"0\" + minutes : minutes) + \":\";\r\n    time += seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return time;\r\n}\r\n\r\nexport default TimerBlock;","\r\n\r\nexport const hasUnplayedStrategies = (player) => {\r\n    for (let i = 0; i < player.strategies.length; i++) {\r\n        if (!player.strategies[i].isUsed) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n };","import React from 'react';\r\nimport {Row, Col} from 'react-bootstrap'\r\n\r\nimport './TechPanel.css';\r\n\r\n\r\nexport default function TechPanel(props) {\r\n    let techSetGroups = [];\r\n    for (let i = 0; i < props.techs.length; i++) {\r\n        techSetGroups[i] = <TechSetGroup \r\n            key={i} \r\n            techSet={props.techs[i]} \r\n            className=\"techSetGroup\" \r\n            onTechClick={(techDefinition) => props.onTechClick(techDefinition)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        techSetGroups\r\n    );\r\n}\r\n\r\n\r\nfunction TechSetGroup(props) {\r\n    let techButtons = [];\r\n    for (let i = 0; i < props.techSet.length; i++) {\r\n        let span = 12 / props.techSet.length;\r\n        techButtons[i] = \r\n            <Col key={i} xs={span}>\r\n                <TechButton \r\n                    key={props.techSet[i].techDefinition.name} \r\n                    tech={props.techSet[i]} \r\n                    onTechClick={() => props.onTechClick(props.techSet[i].techDefinition)} \r\n                />\r\n            </Col>\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {techButtons}\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction TechButton(props) {\r\n    return (\r\n        <button \r\n            className={`rounded techButton ${props.tech.techDefinition.type} ${props.tech.isResearched ? \"researched\" : \"\"} `}\r\n            onClick={props.onTechClick}\r\n        >\r\n            {props.tech.techDefinition.text}\r\n        </button> \r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport TimerBlock from './TimerBlock';\r\nimport Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport {Row, Col} from 'react-bootstrap'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nimport {hasUnplayedStrategies} from './Utils';\r\n\r\nimport './StatusBoard.css';\r\nimport TechPanel from './TechPanel';\r\n\r\nconst USED_STRATEGY_COLOUR = \"grey\";\r\n\r\nfunction StatusBoard(props) {\r\n    const [showEndRoundModal, setShowEndRoundModal] = useState(false);\r\n\r\n    let players = props.players.slice();\r\n    players.sort((a, b) => \r\n        (a.isNaaluTelepathic ? 0 : a.strategies[0].strategyCard.number) - (b.isNaaluTelepathic ? 0 : b.strategies[0].strategyCard.number));\r\n\r\n    let playerCards = players.map(\r\n        (player) => \r\n        <Col key={player.playerNumber}>\r\n            <PlayerCard \r\n                key={player.playerNumber} \r\n                player={player}\r\n                playerTimer={props.playerTimers[player.playerNumber]}\r\n                onEndTurn={() => props.onEndTurn()}\r\n                onVictoryPointsClick={e => props.onVictoryPointsClick(e, JSON.stringify(player))}\r\n                onStrategyCardClick={(strategyCardNumber) => props.onStrategyCardClick(strategyCardNumber, JSON.stringify(player))}\r\n                onPassButtonClick={() => props.onPassButtonClick(JSON.stringify(player))}\r\n                onTechClick={(techDefinition) => props.onTechClick(techDefinition, player)}\r\n                onSpeakerButtonClick={props.onSpeakerButtonClick}\r\n                onNaaluInitiativeButtonClick={props.onNaaluInitiativeButtonClick}\r\n            />\r\n        </Col>\r\n    );\r\n\r\n    const isAllPassed = isAllPlayersPassed(players);\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n            <Row>\r\n                {playerCards}\r\n            </Row>\r\n            <Row>\r\n                <Col xs={{span:2, offset:1}}>\r\n                    <Button variant=\"light\" type=\"button\" onClick={() => props.onToggleTimers()}>\r\n                        {props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                    </Button>\r\n                </Col>\r\n                <Col xs={{span:3, offset:6}}>\r\n                    <ButtonGroup>\r\n                        <Button type=\"button\" disabled={isAllPassed} onClick={() => props.onEndTurn()}>\r\n                            End Turn\r\n                        </Button>\r\n                        <Button type=\"button\" disabled={!isAllPassed} onClick={() => setShowEndRoundModal(true)}>\r\n                            End Round\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n            <EndRoundConfirmModal \r\n                showModal={showEndRoundModal}\r\n                onConfirmModal={() => props.onEndRound()}\r\n                onCloseModal={() => setShowEndRoundModal(false)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction PlayerCard(props) {\r\n    const player = props.player;\r\n    let playerBackgroundColour = player.colour ? player.colour.colour : null;\r\n    let playerTextColour = player.colour ? player.colour.textColour : null;\r\n\r\n    let playerButtons = player.strategies.map((strategy) =>\r\n        <Col key={\"strategy\" + strategy.strategyCard.number + \"Col\"}>\r\n            <button\r\n            key={strategy.strategyCard.number} \r\n            className=\"strategyCardButton\" \r\n            type=\"button\"\r\n            style={{backgroundColor: strategy.isUsed ? USED_STRATEGY_COLOUR : strategy.strategyCard.colour,}}\r\n            onClick={() => props.onStrategyCardClick(strategy.strategyCard.number)}\r\n            >\r\n                {strategy.strategyCard.number}\r\n            </button>\r\n        </Col>\r\n    );\r\n\r\n    if (player.isSpeaker) {\r\n        playerButtons.push(\r\n            <Col key=\"speakerTokenCol\">\r\n                <button\r\n                    className=\"speakerToken\"\r\n                    onClick={props.onSpeakerButtonClick}\r\n                />\r\n            </Col>\r\n        )\r\n    }\r\n\r\n    if (player.isNaaluTelepathic) { \r\n        playerButtons.push(\r\n            <Col key=\"naaluInitiativeTokenCol\">\r\n                <button\r\n                    className=\"naaluInitiative\"\r\n                    onClick={props.onNaaluInitiativeButtonClick}\r\n                />\r\n            </Col>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className=\"border-0\">\r\n            <h6 \r\n                className={`rounded currentPlayerBlock ${player.isActivePlayer ? \"activePlayerBlock\" : player.isPassed ? \"passedPlayerBlock\" : \"\"}`}\r\n                onClick={props.onEndTurn}\r\n            >\r\n                {player.isActivePlayer ? \"Current Player\" : player.isPassed ? \"Passed\" : \"\"}\r\n            </h6>\r\n            <Card className=\"playerCard\">\r\n                <Row noGutters style={{ \r\n                    backgroundColor: playerBackgroundColour, \r\n                    color: playerTextColour,\r\n                }}>\r\n                    <Col xs={2}>\r\n                        {/* TODO: Add faction icon */}\r\n                    </Col>\r\n                    <Col>\r\n                        <div>{player.playerName}</div>\r\n                        <div>{player.faction && player.faction.shortName}</div>\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                        <button \r\n                            className={\r\n                                `rounded passButton \r\n                                ${hasUnplayedStrategies(player) ? \"invisible\" : \r\n                                player.isPassed ? \"passButtonPassed\" : \"\"}`\r\n                            }\r\n                            onClick={props.onPassButtonClick}\r\n                            disabled={hasUnplayedStrategies(player)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <TimerBlock currentSeconds={props.playerTimer.currentSeconds} disabled={true} />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        <button\r\n                            className=\"victoryPointButton\"\r\n                            type=\"button\"\r\n                            onClick={props.onVictoryPointsClick}\r\n                            onContextMenu={props.onVictoryPointsClick}\r\n                        >\r\n                            {player.victoryPoints}\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n                <Row noGutters>\r\n                    {playerButtons}\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n            <TechPanel techs={player.techs} onTechClick={(techDefinition) => props.onTechClick(techDefinition)}/>\r\n            </Card>\r\n        </Card>\r\n    )\r\n}\r\n\r\nfunction EndRoundConfirmModal(props) {\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Body>\r\n                <h3>End the round?</h3>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default StatusBoard;\r\n\r\n//#region functions\r\n\r\nfunction isAllPlayersPassed(players) {\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (!players[i].isPassed) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n//#endregion\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col, ButtonGroup} from 'react-bootstrap';\r\n\r\nimport './PlayAgenda.css';\r\n\r\nimport {agenda_store, planet_store} from './DataHelper.js';\r\n\r\nconst ELECTION_TARGET_PLAYER = \"Player\";\r\nconst ELECTION_TARGET_PLANET = \"Planet\";\r\nconst ELECTION_TARGET_HAZARDOUS = \"Hazardous\";\r\nconst ELECTION_TARGET_CULTURAL = \"Cultural\";\r\nconst ELECTION_TARGET_INDUSTRIAL = \"Industrial\";\r\n\r\nconst standardVoteOptions = [\r\n    \"For\",\r\n    \"Against\"\r\n]\r\n\r\nclass PlayAgenda extends React.Component {\r\n    handleNextAgenda() {\r\n        if (this.props.onNextAgenda) {\r\n            return () => this.props.onNextAgenda()\r\n        }\r\n    }\r\n\r\n    handleEndAgenda() {\r\n        if (this.props.onEndAgenda) {\r\n            return () => this.props.onEndAgenda()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <AgendaForm\r\n                        selectedAgenda={this.props.selectedAgenda}\r\n                        onAgendaChange={this.props.onAgendaChange}\r\n                        playerDetails={this.props.playerDetails}\r\n                        onAvailableVotesClick={(e, playerString, delta) => this.props.onAvailableVotesClick(e, playerString, delta)}\r\n                        onSpentVotesClick={(e, playerString, delta) => this.props.onSpentVotesClick(e, playerString, delta)}\r\n                        onVoteTargetChange={(e, playerString) => this.props.onVoteTargetChange(e, playerString)}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handleNextAgenda()}>\r\n                            Next Agenda\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handleEndAgenda()}>\r\n                            End Agenda Phase\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction AgendaForm(props) {\r\n    let votePanel = props.selectedAgenda ? \r\n    <VotePanel\r\n        playerDetails={props.playerDetails}\r\n        selectedAgenda={props.selectedAgenda}\r\n        onAvailableVotesClick={(e, playerString, delta) => props.onAvailableVotesClick(e, playerString, delta)}\r\n        onSpentVotesClick={(e, playerString, delta) => props.onSpentVotesClick(e, playerString, delta)}\r\n        onVoteTargetChange={(e, playerString) => props.onVoteTargetChange(e, playerString)}\r\n    />\r\n    : null\r\n\r\n    let resultsPanel = props.selectedAgenda ? \r\n    <ResultsPanel\r\n        playerDetails={props.playerDetails}\r\n    />\r\n    : null\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <AgendaSelector\r\n                    selectedAgenda={props.selectedAgenda}\r\n                    onAgendaChange={props.onAgendaChange}\r\n                />\r\n            </Row>\r\n            <Row>\r\n                {votePanel}\r\n            </Row>\r\n            <Row>\r\n                {resultsPanel}\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass AgendaSelector extends React.Component {\r\n    getAgendaList() {\r\n        let agendaElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        agendaElements = agendaElements.concat(agenda_store().map((agenda) => \r\n            <option key={agenda.name} value={JSON.stringify(agenda)}>\r\n                {agenda.name}\r\n            </option>));\r\n\r\n        let selectedAgenda = this.props.selectedAgenda ? JSON.stringify(this.props.selectedAgenda) : undefined;\r\n\r\n        return <select \r\n            className=\"agendaName\"\r\n            id=\"agendas\" \r\n            required \r\n            defaultValue={selectedAgenda} \r\n            onChange={this.props.onAgendaChange}\r\n        >\r\n            {agendaElements}\r\n        </select>;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"agendaCard\">\r\n                <Row>\r\n                    {this.getAgendaList()}\r\n                </Row>\r\n                <Row>\r\n                    <AgendaCard\r\n                        agenda={this.props.selectedAgenda}\r\n                    />\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction VotePanel(props) {\r\n    const players = props.playerDetails.slice();\r\n\r\n    //First voter should be the player immediately after the speaker\r\n    var firstVoterIndex = 0;\r\n    var argentZealIndex = -1;\r\n    for (let i = 0; i < players.length; i++) {\r\n        firstVoterIndex = players[i].isSpeaker ? (i + 1 % players.length) : firstVoterIndex;\r\n        argentZealIndex = players[i].faction.isArgentZeal ? i : argentZealIndex;\r\n    }\r\n\r\n    let playerVotePanels = Array(players.length).fill(null);\r\n    for (let i = 0; i < players.length; i++) {\r\n        var destinationIndex = (((i - firstVoterIndex) % players.length) + players.length) % players.length;\r\n        if (i === argentZealIndex) {\r\n            destinationIndex = 0;\r\n        }\r\n        else {\r\n            destinationIndex++;\r\n        }\r\n\r\n        playerVotePanels[destinationIndex] =\r\n        <PlayerVotePanel\r\n            key={i}\r\n            player={players[i]}\r\n            players={players}\r\n            selectedAgenda={props.selectedAgenda}\r\n            onAvailableVotesClick={(e, playerString, delta) => props.onAvailableVotesClick(e, playerString, delta)}\r\n            onSpentVotesClick={(e, playerString, delta) => props.onSpentVotesClick(e, playerString, delta)}\r\n            onVoteTargetChange={(e, playerString) => props.onVoteTargetChange(e, playerString)}\r\n        />\r\n    }\r\n        \r\n    return (\r\n        <Col>\r\n            <Row>\r\n                <Col xs={2} xl={1}/>\r\n                <Col xs={4} xl={3}/>\r\n                <Col xs={2} xl={2}>\r\n                    <p className=\"columnHeader\">\r\n                        Available\r\n                    </p>\r\n                </Col>\r\n                <Col xs={2} xl={2}>\r\n                    <p className=\"columnHeader\">\r\n                        Assigned\r\n                    </p>\r\n                </Col>\r\n            </Row>\r\n            {playerVotePanels}\r\n        </Col>\r\n    );\r\n}\r\n\r\nfunction PlayerVotePanel(props) {\r\n        \r\n    \r\n    return (\r\n        <Row>\r\n            <Col xs={2} xl={1}>\r\n                <button \r\n                    className={`speakerToken ${props.player.isSpeaker ? \"\" : \"invisible\"}`}\r\n                />\r\n            </Col>\r\n            <Col xs={4} xl={3}>\r\n                <input\r\n                    key=\"playerName\"\r\n                    type=\"text\"\r\n                    defaultValue={props.player.playerName}\r\n                    disabled\r\n                />\r\n            </Col>\r\n            <Col xs={2} xl={2}>\r\n                <ButtonGroup>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"tens\" \r\n                        className=\"digitButton tens\"\r\n                        onClick={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 10)}\r\n                        onContextMenu={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 10)}\r\n                    >\r\n                        {props.player.availableVotes >= 10 ? Math.floor(props.player.availableVotes / 10) : \"\"}\r\n                    </Button>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"ones\" \r\n                        className=\"digitButton ones\"\r\n                        onClick={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 1)}\r\n                        onContextMenu={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 1)}\r\n                    >\r\n                        {props.player.availableVotes % 10}\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n            <Col xs={2} xl={2}>\r\n                <ButtonGroup>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"tens\" \r\n                        className=\"digitButton tens\"\r\n                        onClick={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 10)}\r\n                        onContextMenu={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 10)}\r\n                    >\r\n                        {props.player.spentVotes >= 10 ? Math.floor(props.player.spentVotes / 10) : \"\"}\r\n                    </Button>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"ones\" \r\n                        className=\"digitButton ones\"\r\n                        onClick={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 1)}\r\n                        onContextMenu={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 1)}\r\n                    >\r\n                        {props.player.spentVotes % 10}\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n            <Col>\r\n                <VoteTargetSelector\r\n                    voteTarget={props.player.voteTarget}\r\n                    selectedAgenda={props.selectedAgenda}\r\n                    onVoteTargetChange={e => props.onVoteTargetChange(e, JSON.stringify(props.player))}\r\n                    players={props.players}\r\n                />\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction AgendaCard(props) {\r\n    let agenda = props.agenda;\r\n    let agendaCardDisplay = <div/>\r\n    if (agenda) {\r\n        agendaCardDisplay = <div className=\"agendaCardDisplay\">\r\n            <p className=\"agendaType\">\r\n                {agenda.type}\r\n            </p>\r\n            <p className=\"agendaElectionTarget\">\r\n                {agenda.electionTarget ? \"Elect \" + agenda.electionTarget : null}\r\n            </p>\r\n            <p className=\"agendaEffect\">\r\n                <b>\r\n                    {!agenda.electionTarget && \"For: \"}\r\n                </b>\r\n                {agenda.forEffect}\r\n            </p>\r\n            <p className=\"agendaEffect\">\r\n                <b>\r\n                    {!agenda.electionTarget && \"Against: \"}\r\n                </b>\r\n                {agenda.electionTarget ? \"\" : agenda.againstEffect ? agenda.againstEffect : \"No effect\"}\r\n            </p>\r\n        </div>\r\n    }\r\n    \r\n    return (\r\n        agendaCardDisplay\r\n    );\r\n}\r\n\r\nfunction VoteTargetSelector(props) {\r\n    let voteOptions = [\r\n        <option key=\"unselected\" value={null}/>,\r\n        <option key=\"Abstain\" value={\"Abstain\"}>\r\n            --Abstain\r\n        </option>\r\n    ]\r\n\r\n    if (props.selectedAgenda) {\r\n        switch (props.selectedAgenda.electionTargetType) {\r\n            case ELECTION_TARGET_PLAYER:\r\n                voteOptions = voteOptions.concat(getPlayerVoteOptions(props.players));\r\n                break;\r\n            case ELECTION_TARGET_PLANET:\r\n                voteOptions = voteOptions.concat(getPlanetVoteOptions());\r\n                break;\r\n            case ELECTION_TARGET_HAZARDOUS:\r\n            case ELECTION_TARGET_CULTURAL:\r\n            case ELECTION_TARGET_INDUSTRIAL:\r\n                voteOptions = voteOptions.concat(getPlanetVoteOptions(props.selectedAgenda.electionTargetType));\r\n                break;\r\n            default:\r\n                voteOptions = voteOptions.concat(getStandardVoteOptions());\r\n                break;\r\n        }\r\n    }\r\n\r\n    return <select \r\n        className=\"voteTargetSelector\"\r\n        required \r\n        defaultValue={props.voteTarget} \r\n        onChange={props.onVoteTargetChange}\r\n    >\r\n        {voteOptions}\r\n    </select>;\r\n}\r\n\r\nfunction getStandardVoteOptions() {\r\n    return standardVoteOptions.map((voteOption) => \r\n        <option key={voteOption} value={voteOption}>\r\n            {voteOption}\r\n        </option>);\r\n}\r\n\r\nfunction getPlayerVoteOptions(players) {\r\n    return players.map((player) => \r\n        <option key={player.playerName} value={player.playerName}>\r\n            {player.playerName}\r\n        </option>);\r\n}\r\n\r\nfunction getPlanetVoteOptions(electionTargetType) {\r\n    let planets = electionTargetType ? planet_store().filter((planet) => planet.trait === electionTargetType) : planet_store();\r\n\r\n    return planets.map((planet) => \r\n    <option key={planet.name} value={planet.name}>\r\n        {planet.name}\r\n    </option>);\r\n}\r\n\r\nfunction ResultsPanel(props) {\r\n    let players = props.playerDetails;\r\n    let resolutions = [];\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (players[i].voteTarget && players[i].spentVotes > 0) {\r\n            let existingResolution = null;\r\n            for (let j = 0; j < resolutions.length; j++) {\r\n                if (resolutions[j].resolution === players[i].voteTarget) {\r\n                    existingResolution = j;\r\n                }\r\n            }\r\n            if (existingResolution >= 0 && resolutions[existingResolution]) {\r\n                resolutions[existingResolution] = {\r\n                    resolution: resolutions[existingResolution].resolution,\r\n                    votes: resolutions[existingResolution].votes + players[i].spentVotes,\r\n                }\r\n            }\r\n            else {\r\n                resolutions.push({\r\n                    resolution: players[i].voteTarget, \r\n                    votes: players[i].spentVotes,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let votedResolutions = null;\r\n    if (resolutions.length > 0) {\r\n        resolutions.sort((a,b) => b.votes - a.votes);\r\n        votedResolutions = [];\r\n        for (let i = 0; i < resolutions.length; i++) {\r\n            votedResolutions.push(\r\n                <p className=\"votedResolution\" key={i}>\r\n                    {resolutions[i].resolution} - {resolutions[i].votes} votes\r\n                </p>\r\n            ); \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {votedResolutions}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayAgenda;","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport {objective_store} from './DataHelper.js';\r\n\r\n\r\nexport default function ObjectiveSelectModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let selectedObjectives = props.objectives.map((objective) => objective.isRevealed ? objective : null);\r\n    selectedObjectives = selectedObjectives.filter((objective) => objective !== null);\r\n\r\n    let availableObjectives = objective_store().filter((objective) => objective.stage === props.stage);\r\n    availableObjectives = availableObjectives.filter(\r\n        (objective) => !selectedObjectives.some(\r\n            function (selectedObjective) {\r\n                return objective.id === selectedObjective.id;\r\n            }\r\n       )\r\n    );\r\n\r\n    let objectiveElements = Array(1);\r\n    objectiveElements[0] = <option key=\"unselected\" className=\"nullOption\" value={null} hidden/>\r\n    objectiveElements = objectiveElements.concat(availableObjectives.map(\r\n        (objective) => <option key={objective.id} value={JSON.stringify(objective)}>\r\n            {objective.name}\r\n        </option>));\r\n    \r\n    let objectiveSelect = <select id=\"objectives\" required onChange={props.onObjectiveChange}>\r\n        {objectiveElements}\r\n    </select>;\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>Select Public Objective</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {objectiveSelect}\r\n                </div>\r\n                <div className=\"d-flex flex-column\">\r\n                    <br/>\r\n                    <p className=\"objectiveLongDescription\">\r\n                        {props.selectedObjectiveSelection ? props.selectedObjectiveSelection.longDescription : \"\"}\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedObjectiveSelection}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function ObjectivePanel(props) {\r\n    let objectiveBlocks = Array(props.objectives.length);\r\n\r\n    for (let i = 0; i < props.objectives.length; i++) {\r\n        const objective = props.objectives[i];\r\n        objectiveBlocks[i] = <ObjectiveCard \r\n            key={objective.order} \r\n            name={objective.name} \r\n            stage={objective.stage} \r\n            shortDescription={objective.shortDescription} \r\n            isRevealed={objective.isRevealed} \r\n            onObjectiveCardClick={() => props.onObjectiveCardClick(i)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {objectiveBlocks}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction ObjectiveCard(props) {\r\n    let cardDisplay = props.isRevealed ? props.shortDescription : props.stage;\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                type=\"button\" \r\n                className={`objectiveCard stage${props.stage} ${props.isRevealed ? \"revealed\" : \"\"}`} \r\n                onClick={props.onObjectiveCardClick}\r\n            >\r\n                {cardDisplay}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function TokenAssignModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let playerList = [<option key=\"unselected\" value={null} hidden/>];\r\n    for (let i = 0; i < props.players.length; i++) {\r\n        let player = props.players[i];\r\n        if (player.playerNumber !== props.currentTokenOwnerNumber) {\r\n            playerList.push(\r\n                <option key={player.playerNumber} value={player.playerNumber}>\r\n                    {player.playerName + \" - \" + player.faction.shortName}\r\n                </option>\r\n            );\r\n        }\r\n    }\r\n\r\n    let playerSelect = <select id=\"tokenOwnerCandidates\" required onChange={props.onTokenOwnerChange}>\r\n        {playerList}\r\n    </select>\r\n\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>{props.title}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {playerSelect}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedTokenOwnerNumber}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PlayerSelect from './PlayerSelect';\r\nimport StrategySelect from './StrategySelect';\r\nimport StatusBoard from './StatusBoard';\r\nimport PlayAgenda from './PlayAgenda';\r\nimport TimerBlock from './TimerBlock';\r\nimport ObjectiveSelectModal from './ObjectiveSelectModal';\r\nimport ObjectivePanel from './ObjectivePanel';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport TokenAssignModal from './TokenAssignModal';\r\n\r\nimport {hasUnplayedStrategies} from './Utils';\r\n\r\nimport './GameManager.css';\r\n\r\n//game modes\r\nconst MODE_PLAYER_SELECT = 1;\r\nconst MODE_STRATEGY = 2;\r\nconst MODE_STATUS_BOARD = 3;\r\nconst MODE_AGENDA = 4;\r\n\r\n//assign token owner modes\r\nconst MODE_NO_ASSIGN = 0;\r\nconst MODE_ASSIGN_SPEAKER = 1;\r\nconst MODE_ASSIGN_NAALU_INITIATIVE = 2;\r\n\r\nconst NUMBER_STRATEGIES = 8;\r\nconst NUMBER_OBJECTIVES_STAGE_ONE = 5;\r\nconst NUMBER_OBJECTIVES_STAGE_TWO = 5;\r\n\r\nconst POLITICS_CARD_NUMBER = 3;\r\n\r\nconst LEFT_CLICK = 1; //native event constant for a left click\r\nconst RIGHT_CLICK = 3; //native event constant for the opening of the context menu (i.e. right click)\r\n\r\n\r\nclass GameManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //View controls\r\n            gameMode: MODE_PLAYER_SELECT,\r\n            showObjectiveSelectModal: false,\r\n            tokenAssignModalMode: MODE_NO_ASSIGN,\r\n\r\n            //Temporary State\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null, //used for the objective select modal to record the current selection\r\n            selectedTokenOwnerNumber: null, //used for the token assignment modal to record the new owner selected\r\n            currentTokenOwnerNumber: null, //used for the token assignment modal as an input identifying the current token owner\r\n            tokenAssignModalTitle: null, //used to set the title of the token assignment modal\r\n            selectedAgenda: null,\r\n\r\n            //Game Details\r\n            playerDetails: null,\r\n            playerTimers: null,\r\n            roundNumber: 1,\r\n            isNaaluTelepathicActive: false,\r\n            totalGameTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            currentTurnTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            publicObjectives: this.fillPublicObjectives(),\r\n        };\r\n\r\n        window.addEventListener('beforeunload', (e) => {\r\n            e.preventDefault();\r\n            e.returnValue = '';\r\n        });\r\n    }\r\n\r\n    //#region Lifecycle\r\n    componentDidMount() {\r\n        this.heartbeat = setInterval(() => this.recalculateTimers(), 500);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.heartbeat);\r\n    }\r\n    //#endregion\r\n\r\n    //#region Event Handlers\r\n    handleStartGame(playerDetails) {\r\n        let playerTimers = Array(playerDetails.length);\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            playerTimers[i] = {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            }\r\n        }\r\n\r\n        let isNaaluTelepathicActive = false;\r\n        for (let i = 0; i < playerDetails.length; i++) {\r\n            if (playerDetails[i].faction.isNaaluTelepathic) {\r\n                isNaaluTelepathicActive = true;\r\n                playerDetails[i].isNaaluTelepathic = true;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n            gameMode: MODE_STRATEGY,\r\n            isNaaluTelepathicActive: isNaaluTelepathicActive,\r\n        });\r\n\r\n        this.startGameTimer();\r\n    }\r\n\r\n    handlePlayerStrategyChange(e, playerNumber, strategyNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let newStrategy = {\r\n            strategyCard: JSON.parse(e.target.value),\r\n            isUsed: false,\r\n        }\r\n        playerDetails[playerNumber].strategies[strategyNumber] = newStrategy\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    //TODO Review the function name as it's likely to become confusing once strategy cards area added to the strategy select view. \r\n    // This one relates to clicking the card on the Status Board to indicate that the strategy has been played\r\n    handleStrategyCardClicked(strategyCardNumber, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (player.isPassed) {\r\n            return; //can't toggle strategy card if already passed\r\n        }\r\n\r\n        let isPlayingPolitics = false;\r\n\r\n        let newStrategies = [];\r\n        for (let i = 0; i < player.strategies.length; i++) {\r\n            newStrategies[i] = {...player.strategies[i]};\r\n            if (newStrategies[i].strategyCard.number === strategyCardNumber) {\r\n                newStrategies[i].isUsed = !newStrategies[i].isUsed;\r\n                if (strategyCardNumber === POLITICS_CARD_NUMBER && newStrategies[i].isUsed) {\r\n                    isPlayingPolitics = true;\r\n                }\r\n            }\r\n        }\r\n        \r\n        let newPlayer = {...player}; \r\n        newPlayer.strategies = newStrategies;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        \r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n        \r\n        if (isPlayingPolitics) {\r\n            this.handleSpeakerButtonClicked();\r\n        }\r\n    }\r\n\r\n    handlePassButtonClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (!player.isPassed && hasUnplayedStrategies(player)) {\r\n            return; //can't pass if strategy card is not yet played\r\n        }\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.isPassed = !newPlayer.isPassed;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartRound() {\r\n        let lowestInitiative = NUMBER_STRATEGIES;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            let playerStrategies = player.strategies.sort((a, b) => a.strategyCard.number - b.strategyCard.number);\r\n            let playerInitiative = player.isNaaluTelepathic ? 0 : playerStrategies[0].strategyCard.number; \r\n            if (playerInitiative <= lowestInitiative) {\r\n                lowestInitiative = playerInitiative;\r\n            }\r\n        }\r\n\r\n        let newPlayerDetails = this.state.playerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            newPlayer.strategies = player.strategies.sort((a, b) => a.strategyCard.number - b.strategyCard.number);\r\n            let playerInitiative = newPlayer.isNaaluTelepathic ? 0 : newPlayer.strategies[0].strategyCard.number; \r\n            newPlayer.isActivePlayer = playerInitiative === lowestInitiative;\r\n            return newPlayer;\r\n        });\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n            gameMode: MODE_STATUS_BOARD,\r\n        });\r\n\r\n        this.startGameTimer();\r\n        this.startTurnTimers();\r\n    }\r\n\r\n    handlePlayAgenda() {\r\n        this.setState({\r\n            gameMode: MODE_AGENDA,\r\n        });\r\n    }\r\n\r\n    handleTurnTimerClicked() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startTurnTimers();\r\n            this.startGameTimer(); //if turn timers are running, the game timer should be as well\r\n        }\r\n    }\r\n\r\n    handleGameTimerClicked() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers(); //if the game timer is stopped, all timers should be stopped\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n        }\r\n    }\r\n\r\n    handleEndRound() {\r\n        let playerDetails = this.state.playerDetails.slice().map(\r\n            player => ({\r\n                ...player,\r\n                strategy: null,\r\n                isPassed: false,\r\n            })\r\n        );\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            roundNumber: this.state.roundNumber + 1,\r\n            playerDetails: playerDetails,\r\n        });\r\n\r\n        this.stopTurnTimers(true); //turns aren't occurring between rounds\r\n        this.startGameTimer(); //activity means the game timer should almost certainly be on\r\n    }\r\n\r\n    handleToggleTimers() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n            this.state.gameMode === MODE_STATUS_BOARD && this.startTurnTimers();\r\n        }\r\n    }\r\n\r\n    handleVictoryPointClick(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVictoryPoints = player.victoryPoints;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints + 1;\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints - 1;\r\n        }\r\n        \r\n        if (newVictoryPoints >= 0 && newVictoryPoints <= (this.state.maxVictoryPoints ? this.state.maxVictoryPoints : 10)) {\r\n            let newPlayer = {...player};\r\n            newPlayer.victoryPoints = newVictoryPoints;\r\n            newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handleAvailableVotesClick(e, playerString, delta) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newAvailableVotes = player.availableVotes;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newAvailableVotes = Math.min(99, player.availableVotes + delta);\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newAvailableVotes = Math.max(0, player.availableVotes - delta);\r\n        }\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.availableVotes = newAvailableVotes;\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleSpentVotesClick(e, playerString, delta) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newSpentVotes = player.spentVotes;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newSpentVotes = Math.min(player.availableVotes, player.spentVotes + delta);\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newSpentVotes = Math.max(0, player.spentVotes - delta);\r\n        }\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.spentVotes = newSpentVotes;\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleVoteTargetChange(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVoteTarget = e.target.value;\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.voteTarget = newVoteTarget;\r\n        if (newVoteTarget === \"Abstain\") {\r\n            newPlayer.spentVotes = 0;\r\n        }\r\n        \r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleEndTurn() {\r\n        this.startGameTimer();\r\n        this.restartTurnTimers();\r\n    }\r\n\r\n    handleObjectiveCardClicked(index) {\r\n        let objective = this.state.publicObjectives[index];\r\n        if (!objective.isRevealed && objective.order === this.nextUnrevealedObjective()) {\r\n            this.setState({ \r\n                showObjectiveSelectModal: true,\r\n                selectedObjective: objective,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleObjectiveChange(e) {\r\n        let newObjective = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedObjectiveSelection: newObjective,\r\n        });\r\n    }\r\n\r\n    handleCloseObjectiveSelectModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedObjectiveSelection && this.state.selectedObjective) {\r\n            let newObjective = {...this.state.selectedObjectiveSelection};\r\n            newObjective.isRevealed = true;\r\n            newObjective.order = this.state.selectedObjective.order;\r\n\r\n            let newPublicObjectives = this.state.publicObjectives.slice();\r\n            newPublicObjectives[this.state.selectedObjective.order] = newObjective;\r\n            \r\n            this.setState({\r\n                publicObjectives: newPublicObjectives,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            showObjectiveSelectModal: false,\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null,\r\n        });\r\n    }\r\n\r\n    handleAgendaChange(e) {\r\n        let newAgenda = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedAgenda: newAgenda,\r\n        });\r\n    }\r\n\r\n    handleNextAgenda() {\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        for (let i = 0; i < newPlayerDetails.length; i++) {\r\n            let player = {...newPlayerDetails[i]};\r\n            player.availableVotes = player.availableVotes - player.spentVotes;\r\n            player.spentVotes = 0;\r\n            player.voteTarget = null;\r\n            newPlayerDetails[i] = player;\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleEndAgenda() {\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        for (let i = 0; i < newPlayerDetails.length; i++) {\r\n            let player = {...newPlayerDetails[i]};\r\n            player.availableVotes = 0;\r\n            player.spentVotes = 0;\r\n            player.voteTarget = null;\r\n            newPlayerDetails[i] = player;\r\n        }\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            selectedAgenda: null,\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleSpeakerButtonClicked() {\r\n        let speakerNumber = null;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isSpeaker) {\r\n                speakerNumber = this.state.playerDetails[i].playerNumber;\r\n            }\r\n        }\r\n        this.setState({ \r\n            tokenAssignModalMode: MODE_ASSIGN_SPEAKER,\r\n            currentTokenOwnerNumber: speakerNumber,\r\n            tokenAssignModalTitle: \"Select new speaker\",\r\n        });\r\n    }\r\n\r\n    handleNaaluInitiativeButtonClicked() {\r\n        let naaluTelepathicPlayerNumber = null;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isNaaluTelepathic) {\r\n                naaluTelepathicPlayerNumber = this.state.playerDetails[i].playerNumber;\r\n            }\r\n        }\r\n        this.setState({ \r\n            tokenAssignModalMode: MODE_ASSIGN_NAALU_INITIATIVE,\r\n            currentTokenOwnerNumber: naaluTelepathicPlayerNumber,\r\n            tokenAssignModalTitle: \"Select new telepath\",\r\n        });\r\n    }\r\n\r\n    handleTokenOwnerChange(e) {\r\n        let newTokenOwnerNumber = e.target.value;\r\n        this.setState({\r\n            selectedTokenOwnerNumber: newTokenOwnerNumber,\r\n        });\r\n    }\r\n\r\n    handleCloseTokenAssignModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedTokenOwnerNumber) {\r\n            let newPlayerDetails = this.state.playerDetails.slice();\r\n            let oldOwner = {...newPlayerDetails[this.state.currentTokenOwnerNumber]}\r\n            let newOwner = {...newPlayerDetails[this.state.selectedTokenOwnerNumber]};\r\n\r\n            switch (this.state.tokenAssignModalMode) {\r\n                case MODE_ASSIGN_SPEAKER:\r\n                    oldOwner.isSpeaker = false;\r\n                    newOwner.isSpeaker = true;\r\n                    break;\r\n                case MODE_ASSIGN_NAALU_INITIATIVE:\r\n                    oldOwner.isNaaluTelepathic = false;\r\n                    newOwner.isNaaluTelepathic = true;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            newPlayerDetails[oldOwner.playerNumber] = oldOwner;\r\n            newPlayerDetails[newOwner.playerNumber] = newOwner;\r\n\r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            tokenAssignModalMode: MODE_NO_ASSIGN,\r\n            selectedTokenOwnerNumber: null,\r\n            currentTokenOwnerNumber: null,\r\n            tokenAssignModalTitle: null,\r\n        });\r\n    }\r\n\r\n    handleTechClicked(techDefinition, player) {\r\n        let newPlayer = {...player};\r\n        let newTechSets = player.techs.slice();\r\n        for (let i = 0; i < newTechSets.length; i++) {\r\n            let newTechs = newTechSets[i].map(tech => {\r\n                if (tech.techDefinition === techDefinition) {\r\n                    let newTech = {...tech};\r\n                    newTech.isResearched = !newTech.isResearched;\r\n                    return newTech;\r\n                }\r\n                return tech;\r\n            })\r\n            newTechSets[i] = newTechs;\r\n        }\r\n        newPlayer.techs = newTechSets;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n    //#endregion\r\n\r\n    //#region Commands\r\n    fillPublicObjectives() {\r\n        let numberObjectives = NUMBER_OBJECTIVES_STAGE_ONE + NUMBER_OBJECTIVES_STAGE_TWO;\r\n        let objectives = Array(numberObjectives);\r\n        for (let i = 0; i < numberObjectives; i++) {\r\n            objectives[i] = {\r\n                id: null,\r\n                order: i,\r\n                stage: i < NUMBER_OBJECTIVES_STAGE_ONE ? 1 : 2,\r\n                name: null,\r\n                longDescription: null,\r\n                shortDescription: null,\r\n                isRevealed: false,\r\n            }\r\n        }\r\n        return objectives;\r\n    }\r\n\r\n    nextUnrevealedObjective() {\r\n        for (let i = 0; i < this.state.publicObjectives.length; i++) {\r\n            if (!this.state.publicObjectives[i].isRevealed) {\r\n                return this.state.publicObjectives[i].order;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    recalculateTimers() {\r\n        if (this.state.totalGameTimer && this.state.totalGameTimer.isCounting) {\r\n            this.recalculateGameTime();\r\n        }\r\n        if (this.state.currentTurnTimer && this.state.currentTurnTimer.isCounting) {\r\n            this.recalculateTurnTime();\r\n        }\r\n    }\r\n\r\n    recalculateGameTime() {\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        this.setState({\r\n            totalGameTimer: timer,\r\n        });\r\n    }\r\n\r\n    recalculateTurnTime() {\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.currentSeconds = playerTimer.baseSeconds + Math.floor((Date.now() - playerTimer.countStartTime) / 1000);\r\n        playerTimers[playerNumber] = playerTimer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        });\r\n    }\r\n\r\n    startTurnTimers() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            let playerTimer = {...playerTimers[i]};\r\n            playerTimer.isCounting = i === playerNumber;\r\n            playerTimer.countStartTime = Date.now();\r\n            playerTimers[i] = playerTimer;\r\n    \r\n        }\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    stopTurnTimers(resetCurrentTurn) {\r\n        if (!this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = false;\r\n        if (resetCurrentTurn) {\r\n            timer.baseSeconds = 0;\r\n            timer.currentSeconds = 0;\r\n        }\r\n        else {\r\n            timer.baseSeconds = timer.currentSeconds;\r\n        }\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.isCounting = false;\r\n        playerTimer.baseSeconds = playerTimer.currentSeconds;\r\n        playerTimers[playerNumber] = playerTimer;\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    restartTurnTimers() {\r\n        let timer = {\r\n            baseSeconds: 0,\r\n            currentSeconds: 0,\r\n            countStartTime: Date.now(),\r\n            isCounting: true,\r\n        };\r\n\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let playerTimers = this.state.playerTimers.slice();\r\n\r\n        let currentPlayer = {...this.getActivePlayer()};\r\n        let currentPlayerTimer = {...playerTimers[currentPlayer.playerNumber]};\r\n        currentPlayerTimer.isCounting = false;\r\n        currentPlayerTimer.baseSeconds = currentPlayerTimer.currentSeconds;\r\n        currentPlayer.isActivePlayer = false;\r\n        playerTimers[currentPlayer.playerNumber] = currentPlayerTimer;\r\n        playerDetails[currentPlayer.playerNumber] = currentPlayer;\r\n\r\n        let nextPlayer = this.getNextPlayer(currentPlayer)\r\n        let nextPlayerTimer = {...playerTimers[nextPlayer.playerNumber]};\r\n        nextPlayerTimer.isCounting = true;\r\n        nextPlayerTimer.countStartTime = Date.now();\r\n        nextPlayer.isActivePlayer = true;\r\n        playerTimers[nextPlayer.playerNumber] = nextPlayerTimer;\r\n        playerDetails[nextPlayer.playerNumber] = nextPlayer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    startGameTimer() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    stopGameTimer() {\r\n        if (!this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.baseSeconds = timer.currentSeconds;\r\n        timer.isCounting = false;\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    getActivePlayer() {\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isActivePlayer) {\r\n                return this.state.playerDetails[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getNextPlayer(activePlayer) {\r\n        let nextPlayer = activePlayer;\r\n        //TODO Make Naalu initiative account for it being held my non-Naalu players\r\n        let activePlayerInitiative = activePlayer.isNaaluTelepathic ? 0 : activePlayer.strategies[0].strategyCard.number;\r\n        let initiativeRange = NUMBER_STRATEGIES + (this.state.isNaaluTelepathicActive ? 1 : 0);\r\n        // determine the highest initiative number that could possibly be next. Offset by the number of strategies to allow it to loop back;\r\n        let highestInitiativeNumber = activePlayerInitiative + initiativeRange - 1;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.isActivePlayer && !player.isPassed) {\r\n                // determine the player initiative number, offset by the number of strategies to allow it to loop back\r\n                let playerInitiativeNumber = player.isNaaluTelepathic ? 0 : player.strategies[0].strategyCard.number;\r\n                if (playerInitiativeNumber < activePlayerInitiative) {\r\n                    playerInitiativeNumber += initiativeRange;\r\n                }\r\n                if (playerInitiativeNumber < highestInitiativeNumber) {\r\n                    highestInitiativeNumber = playerInitiativeNumber;\r\n                    nextPlayer = player;\r\n                }\r\n            }\r\n        }\r\n        return nextPlayer;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Rendering methods\r\n    renderGameComponent() {\r\n        switch (this.state.gameMode) {\r\n            case MODE_PLAYER_SELECT:\r\n                return this.renderPlayerSelect();\r\n            case MODE_STRATEGY:\r\n                return this.renderStrategy();\r\n            case MODE_STATUS_BOARD:\r\n                return this.renderStatusBoard();\r\n            case MODE_AGENDA:\r\n                return this.renderAgenda();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    renderPlayerSelect() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <PlayerSelect onStartGame={playerDetails => this.handleStartGame(playerDetails)} />\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStrategy() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <StrategySelect\r\n                            playerDetails={this.state.playerDetails}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onStartRound={() => this.handleStartRound()}\r\n                            onPlayAgenda={() => this.handlePlayAgenda()}\r\n                            onPlayerStrategyChange={(e, playerNumber, strategyNumber) => this.handlePlayerStrategyChange(e, playerNumber, strategyNumber)}\r\n                            onSpeakerButtonClick={() => this.handleSpeakerButtonClicked()}\r\n                            />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStatusBoard() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(true)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <StatusBoard\r\n                            roundNumber={this.state.roundNumber}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            players={this.state.playerDetails}\r\n                            playerTimers={this.state.playerTimers}\r\n                            onEndTurn={() => this.handleEndTurn()}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onVictoryPointsClick={(e, playerString) => this.handleVictoryPointClick(e, playerString)}\r\n                            onStrategyCardClick={(strategyCardNumber, playerString) => this.handleStrategyCardClicked(strategyCardNumber, playerString)}\r\n                            onPassButtonClick={(playerString) => this.handlePassButtonClicked(playerString)}\r\n                            onEndRound={() => this.handleEndRound()}\r\n                            onTechClick={(techDefinition, player) => this.handleTechClicked(techDefinition, player)}\r\n                            onSpeakerButtonClick={() => this.handleSpeakerButtonClicked()}\r\n                            onNaaluInitiativeButtonClick={() => this.handleNaaluInitiativeButtonClicked()}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderAgenda() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <PlayAgenda\r\n                            playerDetails={this.state.playerDetails}\r\n                            selectedAgenda={this.state.selectedAgenda}\r\n                            onAgendaChange={e => this.handleAgendaChange(e)}\r\n                            onNextAgenda={() => this.handleNextAgenda()}\r\n                            onEndAgenda={() => this.handleEndAgenda()}\r\n                            onAvailableVotesClick={(e, playerString, delta) => this.handleAvailableVotesClick(e, playerString, delta)}\r\n                            onSpentVotesClick={(e, playerString, delta) => this.handleSpentVotesClick(e, playerString, delta)}\r\n                            onVoteTargetChange={(e, playerString) => this.handleVoteTargetChange(e, playerString)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderGameHeader(showTurnTimer) {\r\n        return <GameHeader\r\n            roundNumber={this.state.roundNumber}\r\n            totalGameTimer={this.state.totalGameTimer}\r\n            showTurnTimer={showTurnTimer}\r\n            currentTurnTimer={this.state.currentTurnTimer}\r\n            onTurnTimerClick={() => this.handleTurnTimerClicked()}\r\n            onGameTimerClick={() => this.handleGameTimerClicked()}\r\n        />\r\n    }\r\n\r\n\r\n    renderObjectivePanel() {\r\n        return <ObjectivePanel\r\n            className=\"objectivePanel\"\r\n            objectives={this.state.publicObjectives}\r\n            onObjectiveCardClick={(index) => this.handleObjectiveCardClicked(index)}\r\n        />\r\n    }\r\n    //#endregion\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderGameComponent()}\r\n                <ObjectiveSelectModal\r\n                    showModal={this.state.showObjectiveSelectModal}\r\n                    objectives={this.state.publicObjectives}\r\n                    stage={this.state.selectedObjective ? this.state.selectedObjective.stage : null}\r\n                    selectedObjectiveSelection={this.state.selectedObjectiveSelection}\r\n                    onConfirmModal={() => this.handleCloseObjectiveSelectModal(true)}\r\n                    onCloseModal={() => this.handleCloseObjectiveSelectModal()}\r\n                    onObjectiveChange={e => this.handleObjectiveChange(e)}\r\n                />\r\n                <TokenAssignModal\r\n                    showModal={this.state.tokenAssignModalMode !== MODE_NO_ASSIGN}\r\n                    title={this.state.tokenAssignModalTitle}\r\n                    players={this.state.playerDetails}\r\n                    currentTokenOwnerNumber={this.state.currentTokenOwnerNumber}\r\n                    selectedTokenOwnerNumber={this.state.selectedTokenOwnerNumber}\r\n                    onConfirmModal={() => this.handleCloseTokenAssignModal(true)}\r\n                    onCloseModal={() => this.handleCloseTokenAssignModal()}\r\n                    onTokenOwnerChange={e => this.handleTokenOwnerChange(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction GameHeader(props) {\r\n    let turnTimer = props.showTurnTimer ?\r\n        <TimerBlock\r\n            id=\"turnTimer\"\r\n            label=\"Turn Time\"\r\n            currentSeconds={props.currentTurnTimer.currentSeconds}\r\n            onClick={() => props.onTurnTimerClick()}\r\n        /> :\r\n        null;\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"timerLabel\">{\"Round: \" + props.roundNumber}</label>\r\n            {turnTimer}\r\n            <TimerBlock\r\n                id=\"turnTimer\"\r\n                label=\"Total Game Time\"\r\n                currentSeconds={props.totalGameTimer.currentSeconds}\r\n                onClick={() => props.onGameTimerClick()}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameManager;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GameManager from './GameManager';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './custom.scss';\r\n\r\ndocument.oncontextmenu = (e) => e.preventDefault();\r\n\r\nReactDOM.render(\r\n    <GameManager/>,\r\n    document.getElementById(\"root\")\r\n  );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}