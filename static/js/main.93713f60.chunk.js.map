{"version":3,"sources":["PlayerSelect.js","StrategySelect.js","TimerBlock.js","TechPanel.js","StatusBoard.js","PlayAgenda.js","ObjectiveSelectModal.js","ObjectivePanel.js","TokenAssignModal.js","GameManager.js","serviceWorker.js","index.js"],"names":["PlayerSelect","props","playerDetails","Array","i","createPlayer","state","selectedNumberOfPlayers","playerNumber","playerName","faction","properties","testMode","faction_store","colour","colour_store","victoryPoints","isSpeaker","isActivePlayer","isPassed","isNaaluTelepathic","availableVotes","spentVotes","this","setState","playerNumberSelections","fill","e","slice","target","value","JSON","parse","finalPlayerDetails","initialiseTechnologies","onStartGame","map","player","newPlayer","techSets","push","createPlayerTechnologies","tech_store","Biotic","Warfare","Propulsion","Cybernetic","shortName","Ship","Unit","Warsun","techs","techSet","techDefinition","isResearched","selectedFactions","selectedColours","selectedNames","includes","description","determineSelection","Row","Col","xs","xl","span","offset","onClick","playerNumberButtonHandleClick","numberOfPlayers","onPlayerNameChange","handlePlayerNameChange","onPlayerFactionChange","handlePlayerFactionChange","onPlayerColourChange","handlePlayerColourChange","Button","type","disabled","isGameReady","handleStartGame","React","Component","PlayerNumberSelect","isSelected","PlayerNumberButton","selected","renderPlayerNumberButton","className","id","PlayerDetailForm","playerDetailEntries","key","playerDetail","onFactionChange","onColourChange","renderPlayerDetailEntries","PlayerDetailEntry","factionElements","hidden","concat","stringify","fullName","playerFaction","undefined","required","onChange","colourElements","playerColour","defaultValue","getFactionList","getColourList","StrategySelect","onStartRound","onPlayAgenda","selectedStrategyCards","length","strategy","strategyCard","number","onPlayerStrategyChange","onSpeakerButtonClick","variant","onToggleTimers","isGameActive","handlePlayAgenda","isRoundReady","handleStartRound","PlayerStrategyForm","players","speakerIndex","playerStrategyEntries","destinationIndex","onStrategyChange","renderPlayerStrategyEntries","PlayerStrategyEntry","strategyElements","strategy_card_store","name","playerStrategy","getStrategyList","Timer","time","TimerBlock","totalSeconds","hours","Math","floor","minutes","seconds","parseTime","currentSeconds","interactive","label","TechPanel","techSetGroups","TechSetGroup","onTechClick","techButtons","TechButton","tech","text","PlayerCard","playerBackgroundColour","playerTextColour","textColour","playerStrategyButton","style","backgroundColor","isUsed","onStrategyCardClick","speakerButtonColumn","naaluTelepathicButtonColumn","onNaaluInitiativeButtonClick","Card","onEndTurn","noGutters","color","onPassButtonClick","playerTimer","onVictoryPointsClick","onContextMenu","EndRoundConfirmModal","Modal","show","showModal","onHide","onCloseModal","centered","Body","Footer","onConfirmModal","StatusBoard","useState","showEndRoundModal","setShowEndRoundModal","sort","a","b","playerCards","playerTimers","isAllPassed","isAllPlayersPassed","ButtonGroup","onEndRound","standardVoteOptions","PlayAgenda","onNextAgenda","onEndAgenda","AgendaForm","selectedAgenda","onAgendaChange","onAvailableVotesClick","playerString","delta","onSpentVotesClick","onVoteTargetChange","handleNextAgenda","handleEndAgenda","votePanel","VotePanel","resultsPanel","ResultsPanel","AgendaSelector","agendaElements","agenda_store","agenda","getAgendaList","AgendaCard","firstVoterIndex","playerVotePanels","PlayerVotePanel","VoteTargetSelector","voteTarget","agendaCardDisplay","electionTarget","forEffect","againstEffect","voteOptions","electionTargetType","getPlanetVoteOptions","voteOption","planets_store","filter","planet","trait","resolutions","existingResolution","j","resolution","votes","votedResolutions","ObjectiveSelectModal","selectedObjectives","objectives","objective","isRevealed","availableObjectives","objective_store","stage","some","selectedObjective","objectiveElements","objectiveSelect","onObjectiveChange","Header","Title","selectedObjectiveSelection","longDescription","ObjectivePanel","objectiveBlocks","ObjectiveCard","order","shortDescription","onObjectiveCardClick","cardDisplay","TokenAssignModal","playerList","currentTokenOwnerNumber","playerSelect","onTokenOwnerChange","title","selectedTokenOwnerNumber","GameHeader","turnTimer","showTurnTimer","currentTurnTimer","onTurnTimerClick","roundNumber","totalGameTimer","onGameTimerClick","GameManager","gameMode","showObjectiveSelectModal","tokenAssignModalMode","tokenAssignModalTitle","isNaaluTelepathicActive","baseSeconds","countStartTime","Date","now","isCounting","publicObjectives","fillPublicObjectives","heartbeat","setInterval","recalculateTimers","clearInterval","startGameTimer","newStrategy","newPlayerDetails","handleSpeakerButtonClicked","lowestInitiative","playerInitiative","startTurnTimers","stopTurnTimers","stopGameTimer","newVictoryPoints","nativeEvent","which","maxVictoryPoints","newAvailableVotes","min","max","newSpentVotes","newVoteTarget","restartTurnTimers","index","nextUnrevealedObjective","newObjective","isConfirmed","newPublicObjectives","newAgenda","speakerNumber","naaluTelepathicPlayerNumber","newTokenOwnerNumber","oldOwner","newOwner","newTechSets","newTechs","newTech","NUMBER_OBJECTIVES_STAGE_ONE","recalculateGameTime","recalculateTurnTime","timer","getActivePlayer","resetCurrentTurn","currentPlayer","currentPlayerTimer","nextPlayer","getNextPlayer","nextPlayerTimer","activePlayer","activePlayerInitiative","initiativeRange","highestInitiativeNumber","playerInitiativeNumber","renderPlayerSelect","renderStrategy","renderStatusBoard","renderAgenda","Container","fluid","renderGameHeader","md","renderObjectivePanel","handleToggleTimers","handlePlayerStrategyChange","handleEndTurn","handleVictoryPointClick","handleStrategyCardClicked","handlePassButtonClicked","handleEndRound","handleTechClicked","handleNaaluInitiativeButtonClicked","handleAgendaChange","handleAvailableVotesClick","handleSpentVotesClick","handleVoteTargetChange","handleTurnTimerClicked","handleGameTimerClicked","handleObjectiveCardClicked","renderGameComponent","handleCloseObjectiveSelectModal","handleObjectiveChange","handleCloseTokenAssignModal","handleTokenOwnerChange","Boolean","window","location","hostname","match","document","oncontextmenu","preventDefault","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93713f60.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport './PlayerSelect.css';\r\n\r\nimport faction_store from './data/factions.json';\r\nimport tech_store from './data/technologies.json';\r\nimport properties from './data/properties.json';\r\nimport colour_store from './data/colours.json';\r\n\r\nconst PLAYER_NUMBER_INDEX_OFFSET = 3; //player 3 is array index 0\r\nconst MAX_PLAYER_NUMBER = 6;\r\n\r\nclass PlayerSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let playerDetails = Array(MAX_PLAYER_NUMBER);\r\n        for (let i = 0; i < MAX_PLAYER_NUMBER; i++) {\r\n            playerDetails[i] = this.createPlayer(i);\r\n        }\r\n\r\n        this.state = {\r\n            selectedNumberOfPlayers: MAX_PLAYER_NUMBER,\r\n            playerDetails: playerDetails,\r\n        };\r\n    }\r\n\r\n    createPlayer(playerNumber) {\r\n        let playerDetail = {\r\n            playerName: \"Player \" + (playerNumber + 1),\r\n            playerNumber: playerNumber,\r\n            faction: properties.testMode ? faction_store[playerNumber] : null,\r\n            colour: properties.testMode ? colour_store[playerNumber] : null,\r\n            victoryPoints: 0,\r\n            isSpeaker: playerNumber === 0 ? true : false,\r\n            isActivePlayer: playerNumber === 0 ? true : false,\r\n            isPassed: false,\r\n            isNaaluTelepathic: false,\r\n            availableVotes: 0,\r\n            spentVotes: 0,\r\n        }\r\n        return playerDetail;\r\n    }\r\n\r\n    playerNumberButtonHandleClick(playerNumber) {\r\n        this.setState({\r\n            selectedNumberOfPlayers: playerNumber,\r\n        });\r\n    }\r\n\r\n    determineSelection() {\r\n        let playerNumberSelections = Array(MAX_PLAYER_NUMBER).fill(false);\r\n        if (this.state.selectedNumberOfPlayers !== null) {\r\n            playerNumberSelections[this.state.selectedNumberOfPlayers - PLAYER_NUMBER_INDEX_OFFSET] = true;\r\n        }\r\n\r\n        return playerNumberSelections;\r\n    }\r\n\r\n    handlePlayerNameChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].playerName = e.target.value;\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handlePlayerFactionChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].faction = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n    \r\n    handlePlayerColourChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].colour = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartGame() {\r\n        let finalPlayerDetails = this.state.playerDetails.slice(0, this.state.selectedNumberOfPlayers)\r\n        finalPlayerDetails = this.initialiseTechnologies(finalPlayerDetails);\r\n\r\n        return this.props.onStartGame(finalPlayerDetails);\r\n    }\r\n\r\n    initialiseTechnologies(finalPlayerDetails) {\r\n        let playerDetails = finalPlayerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            let techSets = [];\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Biotic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Warfare));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Propulsion));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Cybernetic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store[newPlayer.faction.shortName]));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Ship));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Unit));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Warsun));\r\n            newPlayer.techs = techSets;\r\n            return newPlayer;\r\n        });\r\n\r\n        return playerDetails;\r\n    }\r\n\r\n    createPlayerTechnologies(techSet) {\r\n        let playerTechs = techSet.map((techDefinition) => {\r\n            return {\r\n                techDefinition: techDefinition,\r\n                isResearched: false,\r\n            };\r\n        });\r\n\r\n        return playerTechs;\r\n    }\r\n\r\n    isGameReady() {\r\n        if (!this.state.selectedNumberOfPlayers) {\r\n            return true;\r\n        }\r\n        \r\n        let selectedFactions = [];\r\n        let selectedColours = [];\r\n        let selectedNames = [];\r\n        for (let i = 0; i < this.state.selectedNumberOfPlayers; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.faction || !player.colour || !player.playerName ||\r\n                    selectedColours.includes(player.colour.description) ||\r\n                    selectedFactions.includes(player.faction.shortName) || \r\n                    selectedNames.includes(player.playerName)) {\r\n                return true;\r\n            }\r\n            selectedFactions[i] = player.faction.shortName;\r\n            selectedColours[i] = player.colour.description;\r\n            selectedNames[i] = player.playerName;\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const playerNumberSelections = this.determineSelection();\r\n\r\n        return (\r\n            <Row>\r\n                <Col xs={12} xl={{span: 8, offset: 2}}> \r\n                    <div>\r\n                        <h1>Number of Players</h1>\r\n                        <PlayerNumberSelect \r\n                            playerNumberSelections={playerNumberSelections}\r\n                            onClick={playerNumber => this.playerNumberButtonHandleClick(playerNumber)}\r\n                        />\r\n                    </div>\r\n                    <form>\r\n                        <PlayerDetailForm \r\n                            numberOfPlayers={this.state.selectedNumberOfPlayers} \r\n                            playerDetails={this.state.playerDetails}\r\n                            onPlayerNameChange={(e, playerNumber) => this.handlePlayerNameChange(e, playerNumber)}\r\n                            onPlayerFactionChange={(e, playerNumber) => this.handlePlayerFactionChange(e, playerNumber)}\r\n                            onPlayerColourChange={(e, playerNumber) => this.handlePlayerColourChange(e, playerNumber)}\r\n                        />\r\n                        <Button type=\"button\" disabled= {this.isGameReady()} onClick={() => this.handleStartGame()}>\r\n                            Start Game\r\n                        </Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerNumberSelect extends React.Component {\r\n    renderPlayerNumberButton(playerNumber) {\r\n        const isSelected = this.props.playerNumberSelections[playerNumber - PLAYER_NUMBER_INDEX_OFFSET];\r\n\r\n        return (\r\n            <PlayerNumberButton\r\n                value={playerNumber}\r\n                selected={isSelected}\r\n                onClick={() => this.props.onClick(playerNumber)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                { this.renderPlayerNumberButton(3) }\r\n                { this.renderPlayerNumberButton(4) }\r\n                { this.renderPlayerNumberButton(5) }\r\n                { this.renderPlayerNumberButton(6) }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerNumberButton(props) {\r\n    return (\r\n        <button \r\n            className={`playerNumButton ${props.selected ? \"selectedPlayerNumButton\" : \"\"}`} \r\n            id={`${props.value}Player`} \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nclass PlayerDetailForm extends React.Component {\r\n    renderPlayerDetailEntries() {\r\n        let playerDetailEntries = Array(this.props.numberOfPlayers);\r\n        for (let i = 0; i < this.props.numberOfPlayers; i++) {\r\n            playerDetailEntries[i] = <PlayerDetailEntry \r\n                key={i}\r\n                playerDetail={this.props.playerDetails[i]}\r\n                onPlayerNameChange={e => this.props.onPlayerNameChange(e, i)}\r\n                onFactionChange={e => this.props.onPlayerFactionChange(e, i)}\r\n                onColourChange={e => this.props.onPlayerColourChange(e, i)}\r\n            />;\r\n        }\r\n\r\n        return (<div>\r\n            {playerDetailEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerDetailEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerDetailEntry extends React.Component {\r\n    getFactionList() {\r\n        let factionElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        factionElements = factionElements.concat(faction_store.map((faction) => \r\n            <option key={faction.shortName} value={JSON.stringify(faction)}>\r\n                {faction.fullName}\r\n            </option>));\r\n\r\n        let playerFaction = this.props.playerDetail.faction ? JSON.stringify(this.props.playerDetail.faction) : undefined;\r\n\r\n        return <select \r\n            id=\"factions\" \r\n            required \r\n            value={playerFaction}\r\n            onChange={this.props.onFactionChange}\r\n        >\r\n            {factionElements}\r\n        </select>;\r\n    }\r\n\r\n    getColourList() {\r\n        let colourElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        colourElements = colourElements.concat(colour_store.map((colour) => \r\n            <option key={colour.description} value={JSON.stringify(colour)}>\r\n                {colour.description}\r\n            </option>));\r\n\r\n        let playerColour = this.props.playerDetail.colour ? JSON.stringify(this.props.playerDetail.colour) : undefined;\r\n\r\n        return <select \r\n            id=\"colours\" \r\n            required \r\n            defaultValue={playerColour} \r\n            onChange={this.props.onColourChange}\r\n        >\r\n            {colourElements}\r\n        </select>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={{span: 2, offset: 0}} xl={{span: 1, offset: 1}}>\r\n                    <button className={`speakerToken ${this.props.playerDetail.isSpeaker ? \"\" : \"invisible\"} disabled`}/>\r\n                </Col>\r\n                <Col xs={4}>\r\n                    <input \r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.playerName} \r\n                        onChange={this.props.onPlayerNameChange}\r\n                    />\r\n                </Col>\r\n                <Col xs={4}>\r\n                    {this.getFactionList()}\r\n                </Col>\r\n                <Col xs={2}>\r\n                    {this.getColourList()}\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerSelect;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport strategy_card_store from './data/strategy-cards.json';\r\n\r\nclass StrategySelect extends React.Component {\r\n    handleStartRound() {\r\n        if (this.props.onStartRound) {\r\n            return () => this.props.onStartRound()\r\n        }\r\n    }\r\n\r\n    handlePlayAgenda() {\r\n        if (this.props.onPlayAgenda) {\r\n            return () => this.props.onPlayAgenda()\r\n        }\r\n    }\r\n\r\n    isRoundReady() {\r\n        let selectedStrategyCards = [];\r\n        for (let i = 0; i < this.props.playerDetails.length; i++) {\r\n            let player = this.props.playerDetails[i];\r\n            if (!player.strategy || \r\n                    selectedStrategyCards.includes(player.strategy.strategyCard.number)) {\r\n                return true;\r\n            }\r\n            selectedStrategyCards[i] = player.strategy.strategyCard.number;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {/*TODO: add strategy cards */}\r\n                </Row>\r\n                <Row>\r\n                    <PlayerStrategyForm\r\n                        playerDetails={this.props.playerDetails}\r\n                        onPlayerStrategyChange={(e, playerNumber) => this.props.onPlayerStrategyChange(e, playerNumber)}\r\n                        onSpeakerButtonClick={this.props.onSpeakerButtonClick}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button variant=\"light\" type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                            {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handlePlayAgenda()}>\r\n                            Play Agenda\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" disabled={this.isRoundReady()} onClick={this.handleStartRound()}>\r\n                            Start Round\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyForm extends React.Component {\r\n    renderPlayerStrategyEntries() {\r\n        const players = this.props.playerDetails.slice();\r\n        var speakerIndex = 0;\r\n        for (let i = 0; i < players.length; i++) {\r\n            speakerIndex = players[i].isSpeaker ? i : speakerIndex;\r\n        }\r\n\r\n        let playerStrategyEntries = Array(players.length).fill(null);\r\n        for (let i = 0; i < players.length; i++) {\r\n            let destinationIndex = (((i - speakerIndex) % players.length) + players.length) % players.length;\r\n            playerStrategyEntries[destinationIndex] =\r\n                <PlayerStrategyEntry\r\n                    key={players[i].playerNumber}\r\n                    playerDetail={players[i]}\r\n                    onStrategyChange={e => this.props.onPlayerStrategyChange(e, players[i].playerNumber)}\r\n                    onSpeakerButtonClick={this.props.onSpeakerButtonClick}\r\n                />\r\n        }\r\n            \r\n        return (<Col>\r\n            {playerStrategyEntries}\r\n        </Col>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.renderPlayerStrategyEntries()\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyEntry extends React.Component {\r\n    getStrategyList() {\r\n        let strategyElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        strategyElements = strategyElements.concat(strategy_card_store.map((strategy) => \r\n            <option key={strategy.name} value={JSON.stringify(strategy)}>\r\n                {strategy.name}\r\n            </option>));\r\n\r\n        let playerStrategy = this.props.playerDetail.strategy ? JSON.stringify(this.props.playerDetail.strategy.strategyCard) : undefined;\r\n\r\n        return <select \r\n            id=\"strategies\" \r\n            required \r\n            value={playerStrategy} \r\n            onChange={this.props.onStrategyChange}\r\n        >\r\n            {strategyElements}\r\n        </select>;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={2} xl={1}>\r\n                    <button \r\n                        className={`speakerToken ${this.props.playerDetail.isSpeaker ? \"\" : \"invisible\"}`}\r\n                        onClick={this.props.onSpeakerButtonClick} \r\n                    />\r\n                </Col>\r\n                <Col xs={10} xl={11}>\r\n                    <input\r\n                        key=\"playerName\"\r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.playerName}\r\n                        disabled\r\n                    />\r\n                {/* </Col> */}\r\n                {/* <Col xs={3}> */}\r\n                    <input\r\n                        key=\"playerFaction\"\r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.faction && this.props.playerDetail.faction.fullName}\r\n                        disabled\r\n                    />\r\n                {/* </Col> */}\r\n                {/* <Col xs={4}> */}\r\n                    {this.getStrategyList()}\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default StrategySelect;","import React from 'react';\r\nimport './TimerBlock.css';\r\n\r\nconst secondsInMinute = 60;\r\nconst secondsInHour = 60 * 60;\r\n\r\nfunction Timer(props) {\r\n    return (\r\n        <button className=\"timer\" onClick={props.onClick} disabled={props.disabled}>\r\n            {props.time}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass TimerBlock extends React.Component {\r\n    render() {\r\n        const time = parseTime(this.props.currentSeconds);\r\n\r\n        let interactive = this.props.onClick;\r\n\r\n        return (\r\n            <span className=\"Timer\">\r\n                <label className=\"timerLabel\">{this.props.label}</label>\r\n                <Timer time={time} disabled={this.props.disabled} onClick={interactive ? () => this.props.onClick(this.props.currentSeconds) : null} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n//-------------------------------------------\r\n\r\nfunction parseTime(totalSeconds) {\r\n    if (!totalSeconds) {\r\n        return \"00:00\";\r\n    }\r\n\r\n    const hours = Math.floor(totalSeconds / secondsInHour);\r\n    const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\r\n    const seconds = totalSeconds % secondsInMinute;\r\n\r\n    var time = hours > 0 ? hours + \":\" : \"\";\r\n    time += (minutes < 10 ? \"0\" + minutes : minutes) + \":\";\r\n    time += seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return time;\r\n}\r\n\r\nexport default TimerBlock;","import React from 'react';\r\nimport {Row, Col} from 'react-bootstrap'\r\n\r\nimport './TechPanel.css';\r\n\r\n\r\nexport default function TechPanel(props) {\r\n    let techSetGroups = [];\r\n    for (let i = 0; i < props.techs.length; i++) {\r\n        techSetGroups[i] = <TechSetGroup \r\n            key={i} \r\n            techSet={props.techs[i]} \r\n            className=\"techSetGroup\" \r\n            onTechClick={(techDefinition) => props.onTechClick(techDefinition)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        techSetGroups\r\n    );\r\n}\r\n\r\n\r\nfunction TechSetGroup(props) {\r\n    let techButtons = [];\r\n    for (let i = 0; i < props.techSet.length; i++) {\r\n        let span = 12 / props.techSet.length;\r\n        techButtons[i] = \r\n            <Col key={i} xs={span}>\r\n                <TechButton \r\n                    key={props.techSet[i].techDefinition.name} \r\n                    tech={props.techSet[i]} \r\n                    onTechClick={() => props.onTechClick(props.techSet[i].techDefinition)} \r\n                />\r\n            </Col>\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {techButtons}\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction TechButton(props) {\r\n    return (\r\n        <button \r\n            className={`rounded techButton ${props.tech.techDefinition.type} ${props.tech.isResearched ? \"researched\" : \"\"} `}\r\n            onClick={props.onTechClick}\r\n        >\r\n            {props.tech.techDefinition.text}\r\n        </button> \r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport TimerBlock from './TimerBlock';\r\nimport Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport {Row, Col} from 'react-bootstrap'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nimport './StatusBoard.css';\r\nimport TechPanel from './TechPanel';\r\n\r\nconst USED_STRATEGY_COLOUR = \"grey\";\r\n\r\nfunction StatusBoard(props) {\r\n    const [showEndRoundModal, setShowEndRoundModal] = useState(false);\r\n\r\n    let players = props.players.slice();\r\n    players.sort((a, b) => \r\n        (a.isNaaluTelepathic ? 0 : a.strategy.strategyCard.number) - (b.isNaaluTelepathic ? 0 : b.strategy.strategyCard.number));\r\n\r\n    let playerCards = players.map(\r\n        (player) => \r\n        <Col key={player.playerNumber}>\r\n            <PlayerCard \r\n                key={player.playerNumber} \r\n                player={player}\r\n                playerTimer={props.playerTimers[player.playerNumber]}\r\n                onEndTurn={() => props.onEndTurn()}\r\n                onVictoryPointsClick={e => props.onVictoryPointsClick(e, JSON.stringify(player))}\r\n                onStrategyCardClick={() => props.onStrategyCardClick(JSON.stringify(player))}\r\n                onPassButtonClick={() => props.onPassButtonClick(JSON.stringify(player))}\r\n                onTechClick={(techDefinition) => props.onTechClick(techDefinition, player)}\r\n                onSpeakerButtonClick={props.onSpeakerButtonClick}\r\n                onNaaluInitiativeButtonClick={props.onNaaluInitiativeButtonClick}\r\n            />\r\n        </Col>\r\n    );\r\n\r\n    const isAllPassed = isAllPlayersPassed(players);\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n            <Row>\r\n                {playerCards}\r\n            </Row>\r\n            <Row>\r\n                <Col xs={{span:2, offset:1}}>\r\n                    <Button variant=\"light\" type=\"button\" onClick={() => props.onToggleTimers()}>\r\n                        {props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                    </Button>\r\n                </Col>\r\n                <Col xs={{span:3, offset:6}}>\r\n                    <ButtonGroup>\r\n                        <Button type=\"button\" disabled={isAllPassed} onClick={() => props.onEndTurn()}>\r\n                            End Turn\r\n                        </Button>\r\n                        <Button type=\"button\" disabled={!isAllPassed} onClick={() => setShowEndRoundModal(true)}>\r\n                            End Round\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n            <EndRoundConfirmModal \r\n                showModal={showEndRoundModal}\r\n                onConfirmModal={() => props.onEndRound()}\r\n                onCloseModal={() => setShowEndRoundModal(false)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction PlayerCard(props) {\r\n    const player = props.player;\r\n    let playerBackgroundColour = player.colour ? player.colour.colour : null;\r\n    let playerTextColour = player.colour ? player.colour.textColour : null;\r\n    let playerStrategy = player.strategy;\r\n    let playerStrategyButton = playerStrategy ? \r\n        <button \r\n            className=\"strategyCardButton\" \r\n            type=\"button\"\r\n            style={{backgroundColor: playerStrategy.isUsed ? USED_STRATEGY_COLOUR : playerStrategy.strategyCard.colour,}}\r\n            onClick={props.onStrategyCardClick}\r\n        >\r\n            {playerStrategy.strategyCard.number}\r\n        </button> : \r\n        null;\r\n\r\n    let speakerButtonColumn = player.isSpeaker ? \r\n        <Col>\r\n            <button\r\n                className=\"speakerToken\"\r\n                onClick={props.onSpeakerButtonClick}\r\n            />\r\n        </Col> :\r\n        null;\r\n\r\n    let naaluTelepathicButtonColumn = player.isNaaluTelepathic ? \r\n        <Col>\r\n            <button\r\n                className=\"naaluInitiative\"\r\n                onClick={props.onNaaluInitiativeButtonClick}\r\n            />\r\n        </Col> :\r\n        null;\r\n\r\n    return (\r\n        <Card className=\"border-0\">\r\n            <h6 \r\n                className={`rounded currentPlayerBlock ${player.isActivePlayer ? \"activePlayerBlock\" : player.isPassed ? \"passedPlayerBlock\" : \"\"}`}\r\n                onClick={props.onEndTurn}\r\n            >\r\n                {player.isActivePlayer ? \"Current Player\" : player.isPassed ? \"Passed\" : \"\"}\r\n            </h6>\r\n            <Card className=\"playerCard\">\r\n                <Row noGutters style={{ \r\n                    backgroundColor: playerBackgroundColour, \r\n                    color: playerTextColour,\r\n                }}>\r\n                    <Col xs={2}>\r\n                        {/* TODO: Add faction icon */}\r\n                    </Col>\r\n                    <Col>\r\n                        <div>{player.playerName}</div>\r\n                        <div>{player.faction && player.faction.shortName}</div>\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                        <button \r\n                            className={\r\n                                `rounded passButton \r\n                                ${!player.strategy.isUsed ? \"invisible\" : \r\n                                player.isPassed ? \"passButtonPassed\" : \"\"}`\r\n                            }\r\n                            onClick={props.onPassButtonClick}\r\n                            disabled={!player.strategy.isUsed}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <TimerBlock currentSeconds={props.playerTimer.currentSeconds} disabled={true} />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        <button\r\n                            className=\"victoryPointButton\"\r\n                            type=\"button\"\r\n                            onClick={props.onVictoryPointsClick}\r\n                            onContextMenu={props.onVictoryPointsClick}\r\n                        >\r\n                            {player.victoryPoints}\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        {playerStrategyButton}\r\n                    </Col>\r\n                    {speakerButtonColumn}\r\n                    {naaluTelepathicButtonColumn}\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n            <TechPanel techs={player.techs} onTechClick={(techDefinition) => props.onTechClick(techDefinition)}/>\r\n            </Card>\r\n        </Card>\r\n    )\r\n}\r\n\r\nfunction EndRoundConfirmModal(props) {\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Body>\r\n                <h3>End the round?</h3>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default StatusBoard;\r\n\r\n//#region functions\r\n\r\nfunction isAllPlayersPassed(players) {\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (!players[i].isPassed) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n//#endregion\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col, ButtonGroup} from 'react-bootstrap';\r\n\r\nimport './PlayAgenda.css';\r\n\r\nimport agenda_store from './data/agendas.json';\r\nimport planets_store from './data/planets.json';\r\n\r\nconst ELECTION_TARGET_PLAYER = \"Player\";\r\nconst ELECTION_TARGET_PLANET = \"Planet\";\r\nconst ELECTION_TARGET_HAZARDOUS = \"Hazardous\";\r\nconst ELECTION_TARGET_CULTURAL = \"Cultural\";\r\nconst ELECTION_TARGET_INDUSTRIAL = \"Industrial\";\r\n\r\nconst standardVoteOptions = [\r\n    \"For\",\r\n    \"Against\"\r\n]\r\n\r\nclass PlayAgenda extends React.Component {\r\n    handleNextAgenda() {\r\n        if (this.props.onNextAgenda) {\r\n            return () => this.props.onNextAgenda()\r\n        }\r\n    }\r\n\r\n    handleEndAgenda() {\r\n        if (this.props.onEndAgenda) {\r\n            return () => this.props.onEndAgenda()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <AgendaForm\r\n                        selectedAgenda={this.props.selectedAgenda}\r\n                        onAgendaChange={this.props.onAgendaChange}\r\n                        playerDetails={this.props.playerDetails}\r\n                        onAvailableVotesClick={(e, playerString, delta) => this.props.onAvailableVotesClick(e, playerString, delta)}\r\n                        onSpentVotesClick={(e, playerString, delta) => this.props.onSpentVotesClick(e, playerString, delta)}\r\n                        onVoteTargetChange={(e, playerString) => this.props.onVoteTargetChange(e, playerString)}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handleNextAgenda()}>\r\n                            Next Agenda\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handleEndAgenda()}>\r\n                            End Agenda Phase\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction AgendaForm(props) {\r\n    let votePanel = props.selectedAgenda ? \r\n    <VotePanel\r\n        playerDetails={props.playerDetails}\r\n        selectedAgenda={props.selectedAgenda}\r\n        onAvailableVotesClick={(e, playerString, delta) => props.onAvailableVotesClick(e, playerString, delta)}\r\n        onSpentVotesClick={(e, playerString, delta) => props.onSpentVotesClick(e, playerString, delta)}\r\n        onVoteTargetChange={(e, playerString) => props.onVoteTargetChange(e, playerString)}\r\n    />\r\n    : null\r\n\r\n    let resultsPanel = props.selectedAgenda ? \r\n    <ResultsPanel\r\n        playerDetails={props.playerDetails}\r\n    />\r\n    : null\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <AgendaSelector\r\n                    selectedAgenda={props.selectedAgenda}\r\n                    onAgendaChange={props.onAgendaChange}\r\n                />\r\n            </Row>\r\n            <Row>\r\n                {votePanel}\r\n            </Row>\r\n            <Row>\r\n                {resultsPanel}\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass AgendaSelector extends React.Component {\r\n    getAgendaList() {\r\n        let agendaElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        agendaElements = agendaElements.concat(agenda_store.map((agenda) => \r\n            <option key={agenda.name} value={JSON.stringify(agenda)}>\r\n                {agenda.name}\r\n            </option>));\r\n\r\n        let selectedAgenda = this.props.selectedAgenda ? JSON.stringify(this.props.selectedAgenda) : undefined;\r\n\r\n        return <select \r\n            className=\"agendaName\"\r\n            id=\"agendas\" \r\n            required \r\n            defaultValue={selectedAgenda} \r\n            onChange={this.props.onAgendaChange}\r\n        >\r\n            {agendaElements}\r\n        </select>;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"agendaCard\">\r\n                <Row>\r\n                    {this.getAgendaList()}\r\n                </Row>\r\n                <Row>\r\n                    <AgendaCard\r\n                        agenda={this.props.selectedAgenda}\r\n                    />\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction VotePanel(props) {\r\n    const players = props.playerDetails.slice();\r\n    //First voter should be the player immediately after the speaker\r\n    var firstVoterIndex = 0;\r\n    for (let i = 0; i < players.length; i++) {\r\n        firstVoterIndex = players[i].isSpeaker ? (i + 1 % players.length) : firstVoterIndex;\r\n    }\r\n\r\n    let playerVotePanels = Array(players.length).fill(null);\r\n    for (let i = 0; i < players.length; i++) {\r\n        let destinationIndex = (((i - firstVoterIndex) % players.length) + players.length) % players.length;\r\n        playerVotePanels[destinationIndex] =\r\n        <PlayerVotePanel\r\n            key={i}\r\n            player={players[i]}\r\n            players={players}\r\n            selectedAgenda={props.selectedAgenda}\r\n            onAvailableVotesClick={(e, playerString, delta) => props.onAvailableVotesClick(e, playerString, delta)}\r\n            onSpentVotesClick={(e, playerString, delta) => props.onSpentVotesClick(e, playerString, delta)}\r\n            onVoteTargetChange={(e, playerString) => props.onVoteTargetChange(e, playerString)}\r\n        />\r\n    }\r\n        \r\n    return (\r\n        <Col>\r\n            <Row>\r\n                <Col xs={2} xl={1}/>\r\n                <Col xs={4} xl={3}/>\r\n                <Col xs={2} xl={2}>\r\n                    <p className=\"columnHeader\">\r\n                        Available\r\n                    </p>\r\n                </Col>\r\n                <Col xs={2} xl={2}>\r\n                    <p className=\"columnHeader\">\r\n                        Assigned\r\n                    </p>\r\n                </Col>\r\n            </Row>\r\n            {playerVotePanels}\r\n        </Col>\r\n    );\r\n}\r\n\r\nfunction PlayerVotePanel(props) {\r\n        \r\n    \r\n    return (\r\n        <Row>\r\n            <Col xs={2} xl={1}>\r\n                <button \r\n                    className={`speakerToken ${props.player.isSpeaker ? \"\" : \"invisible\"}`}\r\n                />\r\n            </Col>\r\n            <Col xs={4} xl={3}>\r\n                <input\r\n                    key=\"playerName\"\r\n                    type=\"text\"\r\n                    defaultValue={props.player.playerName}\r\n                    disabled\r\n                />\r\n            </Col>\r\n            <Col xs={2} xl={2}>\r\n                <ButtonGroup>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"tens\" \r\n                        className=\"digitButton tens\"\r\n                        onClick={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 10)}\r\n                        onContextMenu={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 10)}\r\n                    >\r\n                        {props.player.availableVotes >= 10 ? Math.floor(props.player.availableVotes / 10) : \"\"}\r\n                    </Button>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"ones\" \r\n                        className=\"digitButton ones\"\r\n                        onClick={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 1)}\r\n                        onContextMenu={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 1)}\r\n                    >\r\n                        {props.player.availableVotes % 10}\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n            <Col xs={2} xl={2}>\r\n                <ButtonGroup>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"tens\" \r\n                        className=\"digitButton tens\"\r\n                        onClick={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 10)}\r\n                        onContextMenu={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 10)}\r\n                    >\r\n                        {props.player.spentVotes >= 10 ? Math.floor(props.player.spentVotes / 10) : \"\"}\r\n                    </Button>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"ones\" \r\n                        className=\"digitButton ones\"\r\n                        onClick={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 1)}\r\n                        onContextMenu={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 1)}\r\n                    >\r\n                        {props.player.spentVotes % 10}\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n            <Col>\r\n                <VoteTargetSelector\r\n                    voteTarget={props.player.voteTarget}\r\n                    selectedAgenda={props.selectedAgenda}\r\n                    onVoteTargetChange={e => props.onVoteTargetChange(e, JSON.stringify(props.player))}\r\n                    players={props.players}\r\n                />\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction AgendaCard(props) {\r\n    let agenda = props.agenda;\r\n    let agendaCardDisplay = <div/>\r\n    if (agenda) {\r\n        agendaCardDisplay = <div className=\"agendaCardDisplay\">\r\n            <p className=\"agendaType\">\r\n                {agenda.type}\r\n            </p>\r\n            <p className=\"agendaElectionTarget\">\r\n                {agenda.electionTarget ? \"Elect \" + agenda.electionTarget : null}\r\n            </p>\r\n            <p className=\"agendaEffect\">\r\n                <b>\r\n                    {!agenda.electionTarget && \"For: \"}\r\n                </b>\r\n                {agenda.forEffect}\r\n            </p>\r\n            <p className=\"agendaEffect\">\r\n                <b>\r\n                    {!agenda.electionTarget && \"Against: \"}\r\n                </b>\r\n                {agenda.electionTarget ? \"\" : agenda.againstEffect ? agenda.againstEffect : \"No effect\"}\r\n            </p>\r\n        </div>\r\n    }\r\n    \r\n    return (\r\n        agendaCardDisplay\r\n    );\r\n}\r\n\r\nfunction VoteTargetSelector(props) {\r\n    let voteOptions = [\r\n        <option key=\"unselected\" value={null}/>,\r\n        <option key=\"Abstain\" value={\"Abstain\"}>\r\n            --Abstain\r\n        </option>\r\n    ]\r\n\r\n    if (props.selectedAgenda) {\r\n        switch (props.selectedAgenda.electionTargetType) {\r\n            case ELECTION_TARGET_PLAYER:\r\n                voteOptions = voteOptions.concat(getPlayerVoteOptions(props.players));\r\n                break;\r\n            case ELECTION_TARGET_PLANET:\r\n                voteOptions = voteOptions.concat(getPlanetVoteOptions());\r\n                break;\r\n            case ELECTION_TARGET_HAZARDOUS:\r\n            case ELECTION_TARGET_CULTURAL:\r\n            case ELECTION_TARGET_INDUSTRIAL:\r\n                voteOptions = voteOptions.concat(getPlanetVoteOptions(props.selectedAgenda.electionTargetType));\r\n                break;\r\n            default:\r\n                voteOptions = voteOptions.concat(getStandardVoteOptions());\r\n                break;\r\n        }\r\n    }\r\n\r\n    return <select \r\n        className=\"voteTargetSelector\"\r\n        required \r\n        defaultValue={props.voteTarget} \r\n        onChange={props.onVoteTargetChange}\r\n    >\r\n        {voteOptions}\r\n    </select>;\r\n}\r\n\r\nfunction getStandardVoteOptions() {\r\n    return standardVoteOptions.map((voteOption) => \r\n        <option key={voteOption} value={voteOption}>\r\n            {voteOption}\r\n        </option>);\r\n}\r\n\r\nfunction getPlayerVoteOptions(players) {\r\n    return players.map((player) => \r\n        <option key={player.playerName} value={player.playerName}>\r\n            {player.playerName}\r\n        </option>);\r\n}\r\n\r\nfunction getPlanetVoteOptions(electionTargetType) {\r\n    let planets = electionTargetType ? planets_store.filter((planet) => planet.trait === electionTargetType) : planets_store;\r\n\r\n    return planets.map((planet) => \r\n    <option key={planet.name} value={planet.name}>\r\n        {planet.name}\r\n    </option>);\r\n}\r\n\r\nfunction ResultsPanel(props) {\r\n    let players = props.playerDetails;\r\n    let resolutions = [];\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (players[i].voteTarget && players[i].spentVotes > 0) {\r\n            let existingResolution = null;\r\n            for (let j = 0; j < resolutions.length; j++) {\r\n                if (resolutions[j].resolution === players[i].voteTarget) {\r\n                    existingResolution = j;\r\n                }\r\n            }\r\n            if (existingResolution >= 0 && resolutions[existingResolution]) {\r\n                resolutions[existingResolution] = {\r\n                    resolution: resolutions[existingResolution].resolution,\r\n                    votes: resolutions[existingResolution].votes + players[i].spentVotes,\r\n                }\r\n            }\r\n            else {\r\n                resolutions.push({\r\n                    resolution: players[i].voteTarget, \r\n                    votes: players[i].spentVotes,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let votedResolutions = null;\r\n    if (resolutions.length > 0) {\r\n        resolutions.sort((a,b) => b.votes - a.votes);\r\n        votedResolutions = [];\r\n        for (let i = 0; i < resolutions.length; i++) {\r\n            votedResolutions.push(\r\n                <p className=\"votedResolution\" key={i}>\r\n                    {resolutions[i].resolution} - {resolutions[i].votes} votes\r\n                </p>\r\n            ); \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {votedResolutions}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayAgenda;","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport objective_store from './data/objectives.json';\r\n\r\nexport default function ObjectiveSelectModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let selectedObjectives = props.objectives.map((objective) => objective.isRevealed ? objective : null);\r\n    selectedObjectives = selectedObjectives.filter((objective) => objective !== null);\r\n\r\n    let availableObjectives = objective_store.filter((objective) => objective.stage === props.stage);\r\n    availableObjectives = availableObjectives.filter(\r\n        (objective) => !selectedObjectives.some(\r\n            function (selectedObjective) {\r\n                return objective.id === selectedObjective.id;\r\n            }\r\n       )\r\n    );\r\n\r\n    let objectiveElements = Array(1);\r\n    objectiveElements[0] = <option key=\"unselected\" className=\"nullOption\" value={null} hidden/>\r\n    objectiveElements = objectiveElements.concat(availableObjectives.map(\r\n        (objective) => <option key={objective.id} value={JSON.stringify(objective)}>\r\n            {objective.name}\r\n        </option>));\r\n    \r\n    let objectiveSelect = <select id=\"objectives\" required onChange={props.onObjectiveChange}>\r\n        {objectiveElements}\r\n    </select>;\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>Select Public Objective</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {objectiveSelect}\r\n                </div>\r\n                <div className=\"d-flex flex-column\">\r\n                    <br/>\r\n                    <p className=\"objectiveLongDescription\">\r\n                        {props.selectedObjectiveSelection ? props.selectedObjectiveSelection.longDescription : \"\"}\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedObjectiveSelection}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function ObjectivePanel(props) {\r\n    let objectiveBlocks = Array(props.objectives.length);\r\n\r\n    for (let i = 0; i < props.objectives.length; i++) {\r\n        const objective = props.objectives[i];\r\n        objectiveBlocks[i] = <ObjectiveCard \r\n            key={objective.order} \r\n            name={objective.name} \r\n            stage={objective.stage} \r\n            shortDescription={objective.shortDescription} \r\n            isRevealed={objective.isRevealed} \r\n            onObjectiveCardClick={() => props.onObjectiveCardClick(i)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {objectiveBlocks}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction ObjectiveCard(props) {\r\n    let cardDisplay = props.isRevealed ? props.shortDescription : props.stage;\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                type=\"button\" \r\n                className={`objectiveCard stage${props.stage} ${props.isRevealed ? \"revealed\" : \"\"}`} \r\n                onClick={props.onObjectiveCardClick}\r\n            >\r\n                {cardDisplay}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function TokenAssignModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let playerList = [<option key=\"unselected\" value={null} hidden/>];\r\n    for (let i = 0; i < props.players.length; i++) {\r\n        let player = props.players[i];\r\n        if (player.playerNumber !== props.currentTokenOwnerNumber) {\r\n            playerList.push(\r\n                <option key={player.playerNumber} value={player.playerNumber}>\r\n                    {player.playerName + \" - \" + player.faction.shortName}\r\n                </option>\r\n            );\r\n        }\r\n    }\r\n\r\n    let playerSelect = <select id=\"tokenOwnerCandidates\" required onChange={props.onTokenOwnerChange}>\r\n        {playerList}\r\n    </select>\r\n\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>{props.title}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {playerSelect}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedTokenOwnerNumber}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PlayerSelect from './PlayerSelect';\r\nimport StrategySelect from './StrategySelect';\r\nimport StatusBoard from './StatusBoard';\r\nimport PlayAgenda from './PlayAgenda';\r\nimport TimerBlock from './TimerBlock';\r\nimport ObjectiveSelectModal from './ObjectiveSelectModal';\r\nimport ObjectivePanel from './ObjectivePanel';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport TokenAssignModal from './TokenAssignModal';\r\n\r\nimport './GameManager.css';\r\n\r\n//game modes\r\nconst MODE_PLAYER_SELECT = 1;\r\nconst MODE_STRATEGY = 2;\r\nconst MODE_STATUS_BOARD = 3;\r\nconst MODE_AGENDA = 4;\r\n\r\n//assign token owner modes\r\nconst MODE_NO_ASSIGN = 0;\r\nconst MODE_ASSIGN_SPEAKER = 1;\r\nconst MODE_ASSIGN_NAALU_INITIATIVE = 2;\r\n\r\nconst NUMBER_STRATEGIES = 8;\r\nconst NUMBER_OBJECTIVES_STAGE_ONE = 5;\r\nconst NUMBER_OBJECTIVES_STAGE_TWO = 5;\r\n\r\nconst POLITICS_CARD_NUMBER = 3;\r\n\r\nconst LEFT_CLICK = 1; //native event constant for a left click\r\nconst RIGHT_CLICK = 3; //native event constant for the opening of the context menu (i.e. right click)\r\n\r\n\r\nclass GameManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //View controls\r\n            gameMode: MODE_PLAYER_SELECT,\r\n            showObjectiveSelectModal: false,\r\n            tokenAssignModalMode: MODE_NO_ASSIGN,\r\n\r\n            //Temporary State\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null, //used for the objective select modal to record the current selection\r\n            selectedTokenOwnerNumber: null, //used for the token assignment modal to record the new owner selected\r\n            currentTokenOwnerNumber: null, //used for the token assignment modal as an input identifying the current token owner\r\n            tokenAssignModalTitle: null, //used to set the title of the token assignment modal\r\n            selectedAgenda: null,\r\n\r\n            //Game Details\r\n            playerDetails: null,\r\n            playerTimers: null,\r\n            roundNumber: 1,\r\n            isNaaluTelepathicActive: false,\r\n            totalGameTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            currentTurnTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            publicObjectives: this.fillPublicObjectives(),\r\n        };\r\n    }\r\n\r\n    //#region Lifecycle\r\n    componentDidMount() {\r\n        this.heartbeat = setInterval(() => this.recalculateTimers(), 500);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.heartbeat);\r\n    }\r\n    //#endregion\r\n\r\n    //#region Event Handlers\r\n    handleStartGame(playerDetails) {\r\n        let playerTimers = Array(playerDetails.length);\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            playerTimers[i] = {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            }\r\n        }\r\n\r\n        let isNaaluTelepathicActive = false;\r\n        for (let i = 0; i < playerDetails.length; i++) {\r\n            if (playerDetails[i].faction.isNaaluTelepathic) {\r\n                isNaaluTelepathicActive = true;\r\n                playerDetails[i].isNaaluTelepathic = true;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n            gameMode: MODE_STRATEGY,\r\n            isNaaluTelepathicActive: isNaaluTelepathicActive,\r\n        });\r\n\r\n        this.startGameTimer();\r\n    }\r\n\r\n    handlePlayerStrategyChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let newStrategy = {\r\n            strategyCard: JSON.parse(e.target.value),\r\n            isUsed: false,\r\n        }\r\n        playerDetails[playerNumber].strategy = newStrategy\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    //TODO Review the function name as it's likely to become confusing once strategy cards area added to the strategy select view\r\n    handleStrategyCardClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (player.isPassed) {\r\n            return; //can't toggle strategy card if already passed\r\n        }\r\n\r\n        let newStrategy = {...player.strategy};\r\n        newStrategy.isUsed = !newStrategy.isUsed;\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.strategy = newStrategy;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        \r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n        \r\n        if (newPlayer.strategy.strategyCard.number === POLITICS_CARD_NUMBER && newPlayer.strategy.isUsed) {\r\n            this.handleSpeakerButtonClicked();\r\n        }\r\n    }\r\n\r\n    handlePassButtonClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (!player.isPassed && !player.strategy.isUsed) {\r\n            return; //can't pass if strategy card is not yet played\r\n        }\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.isPassed = !newPlayer.isPassed;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartRound() {\r\n        let lowestInitiative = NUMBER_STRATEGIES;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            let playerInitiative = player.isNaaluTelepathic ? 0 : player.strategy.strategyCard.number; \r\n            if (playerInitiative <= lowestInitiative) {\r\n                lowestInitiative = playerInitiative;\r\n            }\r\n        }\r\n\r\n        let newPlayerDetails = this.state.playerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            let playerInitiative = newPlayer.isNaaluTelepathic ? 0 : newPlayer.strategy.strategyCard.number; \r\n            newPlayer.isActivePlayer = playerInitiative === lowestInitiative;\r\n            return newPlayer;\r\n        });\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n            gameMode: MODE_STATUS_BOARD,\r\n        });\r\n\r\n        this.startGameTimer();\r\n        this.startTurnTimers();\r\n    }\r\n\r\n    handlePlayAgenda() {\r\n        this.setState({\r\n            gameMode: MODE_AGENDA,\r\n        });\r\n    }\r\n\r\n    handleTurnTimerClicked() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startTurnTimers();\r\n            this.startGameTimer(); //if turn timers are running, the game timer should be as well\r\n        }\r\n    }\r\n\r\n    handleGameTimerClicked() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers(); //if the game timer is stopped, all timers should be stopped\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n        }\r\n    }\r\n\r\n    handleEndRound() {\r\n        let playerDetails = this.state.playerDetails.slice().map(\r\n            player => ({\r\n                ...player,\r\n                strategy: null,\r\n                isPassed: false,\r\n            })\r\n        );\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            roundNumber: this.state.roundNumber + 1,\r\n            playerDetails: playerDetails,\r\n        });\r\n\r\n        this.stopTurnTimers(true); //turns aren't occurring between rounds\r\n        this.startGameTimer(); //activity means the game timer should almost certainly be on\r\n    }\r\n\r\n    handleToggleTimers() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n            this.state.gameMode === MODE_STATUS_BOARD && this.startTurnTimers();\r\n        }\r\n    }\r\n\r\n    handleVictoryPointClick(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVictoryPoints = player.victoryPoints;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints + 1;\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints - 1;\r\n        }\r\n        \r\n        if (newVictoryPoints >= 0 && newVictoryPoints <= (this.state.maxVictoryPoints ? this.state.maxVictoryPoints : 10)) {\r\n            let newPlayer = {...player};\r\n            newPlayer.victoryPoints = newVictoryPoints;\r\n            newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handleAvailableVotesClick(e, playerString, delta) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newAvailableVotes = player.availableVotes;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newAvailableVotes = Math.min(99, player.availableVotes + delta);\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newAvailableVotes = Math.max(0, player.availableVotes - delta);\r\n        }\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.availableVotes = newAvailableVotes;\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleSpentVotesClick(e, playerString, delta) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newSpentVotes = player.spentVotes;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newSpentVotes = Math.min(player.availableVotes, player.spentVotes + delta);\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newSpentVotes = Math.max(0, player.spentVotes - delta);\r\n        }\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.spentVotes = newSpentVotes;\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleVoteTargetChange(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVoteTarget = e.target.value;\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.voteTarget = newVoteTarget;\r\n        if (newVoteTarget === \"Abstain\") {\r\n            newPlayer.spentVotes = 0;\r\n        }\r\n        \r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleEndTurn() {\r\n        this.startGameTimer();\r\n        this.restartTurnTimers();\r\n    }\r\n\r\n    handleObjectiveCardClicked(index) {\r\n        let objective = this.state.publicObjectives[index];\r\n        if (!objective.isRevealed && objective.order === this.nextUnrevealedObjective()) {\r\n            this.setState({ \r\n                showObjectiveSelectModal: true,\r\n                selectedObjective: objective,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleObjectiveChange(e) {\r\n        let newObjective = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedObjectiveSelection: newObjective,\r\n        });\r\n    }\r\n\r\n    handleCloseObjectiveSelectModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedObjectiveSelection && this.state.selectedObjective) {\r\n            let newObjective = {...this.state.selectedObjectiveSelection};\r\n            newObjective.isRevealed = true;\r\n            newObjective.order = this.state.selectedObjective.order;\r\n\r\n            let newPublicObjectives = this.state.publicObjectives.slice();\r\n            newPublicObjectives[this.state.selectedObjective.order] = newObjective;\r\n            \r\n            this.setState({\r\n                publicObjectives: newPublicObjectives,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            showObjectiveSelectModal: false,\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null,\r\n        });\r\n    }\r\n\r\n    handleAgendaChange(e) {\r\n        let newAgenda = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedAgenda: newAgenda,\r\n        });\r\n    }\r\n\r\n    handleNextAgenda() {\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        for (let i = 0; i < newPlayerDetails.length; i++) {\r\n            let player = {...newPlayerDetails[i]};\r\n            player.availableVotes = player.availableVotes - player.spentVotes;\r\n            player.spentVotes = 0;\r\n            player.voteTarget = null;\r\n            newPlayerDetails[i] = player;\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleEndAgenda() {\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        for (let i = 0; i < newPlayerDetails.length; i++) {\r\n            let player = {...newPlayerDetails[i]};\r\n            player.availableVotes = 0;\r\n            player.spentVotes = 0;\r\n            player.voteTarget = null;\r\n            newPlayerDetails[i] = player;\r\n        }\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            selectedAgenda: null,\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleSpeakerButtonClicked() {\r\n        let speakerNumber = null;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isSpeaker) {\r\n                speakerNumber = this.state.playerDetails[i].playerNumber;\r\n            }\r\n        }\r\n        this.setState({ \r\n            tokenAssignModalMode: MODE_ASSIGN_SPEAKER,\r\n            currentTokenOwnerNumber: speakerNumber,\r\n            tokenAssignModalTitle: \"Select new speaker\",\r\n        });\r\n    }\r\n\r\n    handleNaaluInitiativeButtonClicked() {\r\n        let naaluTelepathicPlayerNumber = null;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isNaaluTelepathic) {\r\n                naaluTelepathicPlayerNumber = this.state.playerDetails[i].playerNumber;\r\n            }\r\n        }\r\n        this.setState({ \r\n            tokenAssignModalMode: MODE_ASSIGN_NAALU_INITIATIVE,\r\n            currentTokenOwnerNumber: naaluTelepathicPlayerNumber,\r\n            tokenAssignModalTitle: \"Select new telepath\",\r\n        });\r\n    }\r\n\r\n    handleTokenOwnerChange(e) {\r\n        let newTokenOwnerNumber = e.target.value;\r\n        this.setState({\r\n            selectedTokenOwnerNumber: newTokenOwnerNumber,\r\n        });\r\n    }\r\n\r\n    handleCloseTokenAssignModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedTokenOwnerNumber) {\r\n            let newPlayerDetails = this.state.playerDetails.slice();\r\n            let oldOwner = {...newPlayerDetails[this.state.currentTokenOwnerNumber]}\r\n            let newOwner = {...newPlayerDetails[this.state.selectedTokenOwnerNumber]};\r\n\r\n            switch (this.state.tokenAssignModalMode) {\r\n                case MODE_ASSIGN_SPEAKER:\r\n                    oldOwner.isSpeaker = false;\r\n                    newOwner.isSpeaker = true;\r\n                    break;\r\n                case MODE_ASSIGN_NAALU_INITIATIVE:\r\n                    oldOwner.isNaaluTelepathic = false;\r\n                    newOwner.isNaaluTelepathic = true;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            newPlayerDetails[oldOwner.playerNumber] = oldOwner;\r\n            newPlayerDetails[newOwner.playerNumber] = newOwner;\r\n\r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            tokenAssignModalMode: MODE_NO_ASSIGN,\r\n            selectedTokenOwnerNumber: null,\r\n            currentTokenOwnerNumber: null,\r\n            tokenAssignModalTitle: null,\r\n        });\r\n    }\r\n\r\n    handleTechClicked(techDefinition, player) {\r\n        let newPlayer = {...player};\r\n        let newTechSets = player.techs.slice();\r\n        for (let i = 0; i < newTechSets.length; i++) {\r\n            let newTechs = newTechSets[i].map(tech => {\r\n                if (tech.techDefinition === techDefinition) {\r\n                    let newTech = {...tech};\r\n                    newTech.isResearched = !newTech.isResearched;\r\n                    return newTech;\r\n                }\r\n                return tech;\r\n            })\r\n            newTechSets[i] = newTechs;\r\n        }\r\n        newPlayer.techs = newTechSets;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n    //#endregion\r\n\r\n    //#region Commands\r\n    fillPublicObjectives() {\r\n        let numberObjectives = NUMBER_OBJECTIVES_STAGE_ONE + NUMBER_OBJECTIVES_STAGE_TWO;\r\n        let objectives = Array(numberObjectives);\r\n        for (let i = 0; i < numberObjectives; i++) {\r\n            objectives[i] = {\r\n                id: null,\r\n                order: i,\r\n                stage: i < NUMBER_OBJECTIVES_STAGE_ONE ? 1 : 2,\r\n                name: null,\r\n                longDescription: null,\r\n                shortDescription: null,\r\n                isRevealed: false,\r\n            }\r\n        }\r\n        return objectives;\r\n    }\r\n\r\n    nextUnrevealedObjective() {\r\n        for (let i = 0; i < this.state.publicObjectives.length; i++) {\r\n            if (!this.state.publicObjectives[i].isRevealed) {\r\n                return this.state.publicObjectives[i].order;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    recalculateTimers() {\r\n        if (this.state.totalGameTimer && this.state.totalGameTimer.isCounting) {\r\n            this.recalculateGameTime();\r\n        }\r\n        if (this.state.currentTurnTimer && this.state.currentTurnTimer.isCounting) {\r\n            this.recalculateTurnTime();\r\n        }\r\n    }\r\n\r\n    recalculateGameTime() {\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        this.setState({\r\n            totalGameTimer: timer,\r\n        });\r\n    }\r\n\r\n    recalculateTurnTime() {\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.currentSeconds = playerTimer.baseSeconds + Math.floor((Date.now() - playerTimer.countStartTime) / 1000);\r\n        playerTimers[playerNumber] = playerTimer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        });\r\n    }\r\n\r\n    startTurnTimers() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            let playerTimer = {...playerTimers[i]};\r\n            playerTimer.isCounting = i === playerNumber;\r\n            playerTimer.countStartTime = Date.now();\r\n            playerTimers[i] = playerTimer;\r\n    \r\n        }\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    stopTurnTimers(resetCurrentTurn) {\r\n        if (!this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = false;\r\n        if (resetCurrentTurn) {\r\n            timer.baseSeconds = 0;\r\n            timer.currentSeconds = 0;\r\n        }\r\n        else {\r\n            timer.baseSeconds = timer.currentSeconds;\r\n        }\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.isCounting = false;\r\n        playerTimer.baseSeconds = playerTimer.currentSeconds;\r\n        playerTimers[playerNumber] = playerTimer;\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    restartTurnTimers() {\r\n        let timer = {\r\n            baseSeconds: 0,\r\n            currentSeconds: 0,\r\n            countStartTime: Date.now(),\r\n            isCounting: true,\r\n        };\r\n\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let playerTimers = this.state.playerTimers.slice();\r\n\r\n        let currentPlayer = {...this.getActivePlayer()};\r\n        let currentPlayerTimer = {...playerTimers[currentPlayer.playerNumber]};\r\n        currentPlayerTimer.isCounting = false;\r\n        currentPlayerTimer.baseSeconds = currentPlayerTimer.currentSeconds;\r\n        currentPlayer.isActivePlayer = false;\r\n        playerTimers[currentPlayer.playerNumber] = currentPlayerTimer;\r\n        playerDetails[currentPlayer.playerNumber] = currentPlayer;\r\n\r\n        let nextPlayer = this.getNextPlayer(currentPlayer)\r\n        let nextPlayerTimer = {...playerTimers[nextPlayer.playerNumber]};\r\n        nextPlayerTimer.isCounting = true;\r\n        nextPlayerTimer.countStartTime = Date.now();\r\n        nextPlayer.isActivePlayer = true;\r\n        playerTimers[nextPlayer.playerNumber] = nextPlayerTimer;\r\n        playerDetails[nextPlayer.playerNumber] = nextPlayer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    startGameTimer() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    stopGameTimer() {\r\n        if (!this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.baseSeconds = timer.currentSeconds;\r\n        timer.isCounting = false;\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    getActivePlayer() {\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isActivePlayer) {\r\n                return this.state.playerDetails[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getNextPlayer(activePlayer) {\r\n        let nextPlayer = activePlayer;\r\n        //TODO Make Naalu initiative account for it being held my non-Naalu players\r\n        let activePlayerInitiative = activePlayer.isNaaluTelepathic ? 0 : activePlayer.strategy.strategyCard.number;\r\n        let initiativeRange = NUMBER_STRATEGIES + (this.state.isNaaluTelepathicActive ? 1 : 0);\r\n        // determine the highest initiative number that could possibly be next. Offset by the number of strategies to allow it to loop back;\r\n        let highestInitiativeNumber = activePlayerInitiative + initiativeRange - 1;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.isActivePlayer && !player.isPassed) {\r\n                // determine the player initiative number, offset by the number of strategies to allow it to loop back\r\n                let playerInitiativeNumber = player.isNaaluTelepathic ? 0 : player.strategy.strategyCard.number;\r\n                if (playerInitiativeNumber < activePlayerInitiative) {\r\n                    playerInitiativeNumber += initiativeRange;\r\n                }\r\n                if (playerInitiativeNumber < highestInitiativeNumber) {\r\n                    highestInitiativeNumber = playerInitiativeNumber;\r\n                    nextPlayer = player;\r\n                }\r\n            }\r\n        }\r\n        return nextPlayer;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Rendering methods\r\n    renderGameComponent() {\r\n        switch (this.state.gameMode) {\r\n            case MODE_PLAYER_SELECT:\r\n                return this.renderPlayerSelect();\r\n            case MODE_STRATEGY:\r\n                return this.renderStrategy();\r\n            case MODE_STATUS_BOARD:\r\n                return this.renderStatusBoard();\r\n            case MODE_AGENDA:\r\n                return this.renderAgenda();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    renderPlayerSelect() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <PlayerSelect onStartGame={playerDetails => this.handleStartGame(playerDetails)} />\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStrategy() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <StrategySelect\r\n                            playerDetails={this.state.playerDetails}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onStartRound={() => this.handleStartRound()}\r\n                            onPlayAgenda={() => this.handlePlayAgenda()}\r\n                            onPlayerStrategyChange={(e, playerNumber) => this.handlePlayerStrategyChange(e, playerNumber)}\r\n                            onSpeakerButtonClick={() => this.handleSpeakerButtonClicked()}\r\n                            />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStatusBoard() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(true)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <StatusBoard\r\n                            roundNumber={this.state.roundNumber}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            players={this.state.playerDetails}\r\n                            playerTimers={this.state.playerTimers}\r\n                            onEndTurn={() => this.handleEndTurn()}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onVictoryPointsClick={(e, playerString) => this.handleVictoryPointClick(e, playerString)}\r\n                            onStrategyCardClick={(playerString) => this.handleStrategyCardClicked(playerString)}\r\n                            onPassButtonClick={(playerString) => this.handlePassButtonClicked(playerString)}\r\n                            onEndRound={() => this.handleEndRound()}\r\n                            onTechClick={(techDefinition, player) => this.handleTechClicked(techDefinition, player)}\r\n                            onSpeakerButtonClick={() => this.handleSpeakerButtonClicked()}\r\n                            onNaaluInitiativeButtonClick={() => this.handleNaaluInitiativeButtonClicked()}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderAgenda() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <PlayAgenda\r\n                            playerDetails={this.state.playerDetails}\r\n                            selectedAgenda={this.state.selectedAgenda}\r\n                            onAgendaChange={e => this.handleAgendaChange(e)}\r\n                            onNextAgenda={() => this.handleNextAgenda()}\r\n                            onEndAgenda={() => this.handleEndAgenda()}\r\n                            onAvailableVotesClick={(e, playerString, delta) => this.handleAvailableVotesClick(e, playerString, delta)}\r\n                            onSpentVotesClick={(e, playerString, delta) => this.handleSpentVotesClick(e, playerString, delta)}\r\n                            onVoteTargetChange={(e, playerString) => this.handleVoteTargetChange(e, playerString)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderGameHeader(showTurnTimer) {\r\n        return <GameHeader\r\n            roundNumber={this.state.roundNumber}\r\n            totalGameTimer={this.state.totalGameTimer}\r\n            showTurnTimer={showTurnTimer}\r\n            currentTurnTimer={this.state.currentTurnTimer}\r\n            onTurnTimerClick={() => this.handleTurnTimerClicked()}\r\n            onGameTimerClick={() => this.handleGameTimerClicked()}\r\n        />\r\n    }\r\n\r\n\r\n    renderObjectivePanel() {\r\n        return <ObjectivePanel\r\n            className=\"objectivePanel\"\r\n            objectives={this.state.publicObjectives}\r\n            onObjectiveCardClick={(index) => this.handleObjectiveCardClicked(index)}\r\n        />\r\n    }\r\n    //#endregion\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderGameComponent()}\r\n                <ObjectiveSelectModal\r\n                    showModal={this.state.showObjectiveSelectModal}\r\n                    objectives={this.state.publicObjectives}\r\n                    stage={this.state.selectedObjective ? this.state.selectedObjective.stage : null}\r\n                    selectedObjectiveSelection={this.state.selectedObjectiveSelection}\r\n                    onConfirmModal={() => this.handleCloseObjectiveSelectModal(true)}\r\n                    onCloseModal={() => this.handleCloseObjectiveSelectModal()}\r\n                    onObjectiveChange={e => this.handleObjectiveChange(e)}\r\n                />\r\n                <TokenAssignModal\r\n                    showModal={this.state.tokenAssignModalMode !== MODE_NO_ASSIGN}\r\n                    title={this.state.tokenAssignModalTitle}\r\n                    players={this.state.playerDetails}\r\n                    currentTokenOwnerNumber={this.state.currentTokenOwnerNumber}\r\n                    selectedTokenOwnerNumber={this.state.selectedTokenOwnerNumber}\r\n                    onConfirmModal={() => this.handleCloseTokenAssignModal(true)}\r\n                    onCloseModal={() => this.handleCloseTokenAssignModal()}\r\n                    onTokenOwnerChange={e => this.handleTokenOwnerChange(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction GameHeader(props) {\r\n    let turnTimer = props.showTurnTimer ?\r\n        <TimerBlock\r\n            id=\"turnTimer\"\r\n            label=\"Turn Time\"\r\n            currentSeconds={props.currentTurnTimer.currentSeconds}\r\n            onClick={() => props.onTurnTimerClick()}\r\n        /> :\r\n        null;\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"timerLabel\">{\"Round: \" + props.roundNumber}</label>\r\n            {turnTimer}\r\n            <TimerBlock\r\n                id=\"turnTimer\"\r\n                label=\"Total Game Time\"\r\n                currentSeconds={props.totalGameTimer.currentSeconds}\r\n                onClick={() => props.onGameTimerClick()}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameManager;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GameManager from './GameManager';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './custom.scss';\r\n\r\ndocument.oncontextmenu = (e) => e.preventDefault();\r\n\r\nReactDOM.render(\r\n    <GameManager/>,\r\n    document.getElementById(\"root\")\r\n  );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}