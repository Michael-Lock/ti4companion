{"version":3,"sources":["PlayerSelect.js","StrategySelect.js","TimerBlock.js","TechPanel.js","StatusBoard.js","ObjectiveSelectModal.js","ObjectivePanel.js","SpeakerChangeModal.js","GameManager.js","serviceWorker.js","index.js"],"names":["PlayerSelect","props","playerDetails","Array","i","createPlayer","state","selectedNumberOfPlayers","playerNumber","playerName","faction","properties","testMode","faction_store","colour","colour_store","victoryPoints","isSpeaker","isActivePlayer","isPassed","this","setState","playerNumberSelections","fill","e","slice","target","value","JSON","parse","finalPlayerDetails","initialiseTechnologies","onStartGame","map","player","newPlayer","techSets","push","createPlayerTechnologies","tech_store","Biotic","Warfare","Propulsion","Cybernetic","shortName","Ship","Unit","Warsun","techs","techSet","techDefinition","isResearched","selectedFactions","selectedColours","selectedNames","includes","description","determineSelection","Row","Col","xs","xl","span","offset","onClick","playerNumberButtonHandleClick","numberOfPlayers","onPlayerNameChange","handlePlayerNameChange","onPlayerFactionChange","handlePlayerFactionChange","onPlayerColourChange","handlePlayerColourChange","Button","type","disabled","isGameReady","handleStartGame","React","Component","PlayerNumberSelect","isSelected","PlayerNumberButton","selected","renderPlayerNumberButton","className","id","PlayerDetailForm","playerDetailEntries","key","playerDetail","onFactionChange","onColourChange","renderPlayerDetailEntries","PlayerDetailEntry","factionElements","hidden","concat","stringify","fullName","playerFaction","undefined","required","onChange","colourElements","playerColour","defaultValue","getFactionList","getColourList","StrategySelect","onStartRound","selectedStrategyCards","length","strategy","strategyCard","number","onPlayerStrategyChange","onSpeakerButtonClick","variant","onToggleTimers","isGameActive","isRoundReady","handleStartRound","PlayerStrategyForm","players","speakerIndex","playerStrategyEntries","destinationIndex","onStrategyChange","renderPlayerStrategyEntries","PlayerStrategyEntry","strategyElements","strategy_card_store","name","playerStrategy","getStrategyList","Timer","time","TimerBlock","totalSeconds","hours","Math","floor","minutes","seconds","parseTime","currentSeconds","interactive","label","TechPanel","techSetGroups","TechSetGroup","onTechClick","techButtons","TechButton","tech","text","PlayerCard","playerBackgroundColour","playerTextColour","textColour","playerStrategyButton","style","backgroundColor","isUsed","onStrategyCardClick","speakerButtonColumn","Card","onEndTurn","noGutters","color","onPassButtonClick","playerTimer","onVictoryPointsClick","onContextMenu","EndRoundConfirmModal","Modal","show","showModal","onHide","onCloseModal","centered","Body","Footer","onConfirmModal","StatusBoard","useState","showEndRoundModal","setShowEndRoundModal","sort","a","b","playerCards","playerTimers","isAllPassed","isAllPlayersPassed","ButtonGroup","onEndRound","ObjectiveSelectModal","selectedObjectives","objectives","objective","isRevealed","filter","availableObjectives","objective_store","stage","some","selectedObjective","objectiveElements","objectiveSelect","onObjectiveChange","Header","Title","selectedObjectiveSelection","longDescription","ObjectivePanel","objectiveBlocks","ObjectiveCard","order","shortDescription","onObjectiveCardClick","cardDisplay","SpeakerChangeModal","playerList","playerSelect","onSpeakerChange","selectedSpeakerNumber","GameHeader","turnTimer","showTurnTimer","currentTurnTimer","onTurnTimerClick","roundNumber","totalGameTimer","onGameTimerClick","GameManager","gameMode","showObjectiveSelectModal","showSpeakerChangeModal","baseSeconds","countStartTime","Date","now","isCounting","publicObjectives","fillPublicObjectives","heartbeat","setInterval","recalculateTimers","clearInterval","startGameTimer","newStrategy","playerString","newPlayerDetails","handleSpeakerButtonClicked","lowestInitiative","startTurnTimers","stopTurnTimers","stopGameTimer","newVictoryPoints","nativeEvent","which","maxVictoryPoints","restartTurnTimers","index","nextUnrevealedObjective","newObjective","isConfirmed","newPublicObjectives","newSpeakerNumber","oldSpeaker","newSpeaker","newTechSets","newTechs","newTech","NUMBER_OBJECTIVES_STAGE_ONE","recalculateGameTime","recalculateTurnTime","timer","getActivePlayer","resetCurrentTurn","currentPlayer","currentPlayerTimer","nextPlayer","getNextPlayer","nextPlayerTimer","activePlayer","highestInitiativeNumber","playerInitiativeNumber","renderPlayerSelect","renderStrategy","renderStatusBoard","Container","fluid","renderGameHeader","md","renderObjectivePanel","handleToggleTimers","handlePlayerStrategyChange","handleEndTurn","handleVictoryPointClick","handleStrategyCardClicked","handlePassButtonClicked","handleEndRound","handleTechClicked","handleTurnTimerClicked","handleGameTimerClicked","handleObjectiveCardClicked","renderGameComponent","handleCloseObjectiveSelectModal","handleObjectiveChange","handleCloseSpeakerChangeModal","handleSpeakerChange","Boolean","window","location","hostname","match","document","oncontextmenu","preventDefault","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4ba9d5a3.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport './PlayerSelect.css';\r\n\r\nimport faction_store from './data/factions.json';\r\nimport tech_store from './data/technologies.json';\r\nimport properties from './data/properties.json';\r\nimport colour_store from './data/colours.json';\r\n\r\nconst PLAYER_NUMBER_INDEX_OFFSET = 3; //player 3 is array index 0\r\nconst MAX_PLAYER_NUMBER = 6;\r\n\r\nclass PlayerSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let playerDetails = Array(MAX_PLAYER_NUMBER);\r\n        for (let i = 0; i < MAX_PLAYER_NUMBER; i++) {\r\n            playerDetails[i] = this.createPlayer(i);\r\n        }\r\n\r\n        this.state = {\r\n            selectedNumberOfPlayers: MAX_PLAYER_NUMBER,\r\n            playerDetails: playerDetails,\r\n        };\r\n    }\r\n\r\n    createPlayer(playerNumber) {\r\n        let playerDetail = {\r\n            playerName: \"Player \" + (playerNumber + 1),\r\n            playerNumber: playerNumber,\r\n            faction: properties.testMode ? faction_store[playerNumber] : null,\r\n            colour: properties.testMode ? colour_store[playerNumber] : null,\r\n            victoryPoints: 0,\r\n            isSpeaker: playerNumber === 0 ? true : false,\r\n            isActivePlayer: playerNumber === 0 ? true : false,\r\n            isPassed: false,\r\n        }\r\n        return playerDetail;\r\n    }\r\n\r\n    playerNumberButtonHandleClick(playerNumber) {\r\n        this.setState({\r\n            selectedNumberOfPlayers: playerNumber,\r\n        });\r\n    }\r\n\r\n    determineSelection() {\r\n        let playerNumberSelections = Array(MAX_PLAYER_NUMBER).fill(false);\r\n        if (this.state.selectedNumberOfPlayers !== null) {\r\n            playerNumberSelections[this.state.selectedNumberOfPlayers - PLAYER_NUMBER_INDEX_OFFSET] = true;\r\n        }\r\n\r\n        return playerNumberSelections;\r\n    }\r\n\r\n    handlePlayerNameChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].playerName = e.target.value;\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handlePlayerFactionChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].faction = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n    \r\n    handlePlayerColourChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].colour = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartGame() {\r\n        let finalPlayerDetails = this.state.playerDetails.slice(0, this.state.selectedNumberOfPlayers)\r\n        finalPlayerDetails = this.initialiseTechnologies(finalPlayerDetails);\r\n\r\n        return this.props.onStartGame(finalPlayerDetails);\r\n    }\r\n\r\n    initialiseTechnologies(finalPlayerDetails) {\r\n        let playerDetails = finalPlayerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            let techSets = [];\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Biotic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Warfare));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Propulsion));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Cybernetic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store[newPlayer.faction.shortName]));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Ship));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Unit));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Warsun));\r\n            newPlayer.techs = techSets;\r\n            return newPlayer;\r\n        });\r\n\r\n        return playerDetails;\r\n    }\r\n\r\n    createPlayerTechnologies(techSet) {\r\n        let playerTechs = techSet.map((techDefinition) => {\r\n            return {\r\n                techDefinition: techDefinition,\r\n                isResearched: false,\r\n            };\r\n        });\r\n\r\n        return playerTechs;\r\n    }\r\n\r\n    isGameReady() {\r\n        if (!this.state.selectedNumberOfPlayers) {\r\n            return true;\r\n        }\r\n        \r\n        let selectedFactions = [];\r\n        let selectedColours = [];\r\n        let selectedNames = [];\r\n        for (let i = 0; i < this.state.selectedNumberOfPlayers; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.faction || !player.colour || !player.playerName ||\r\n                    selectedColours.includes(player.colour.description) ||\r\n                    selectedFactions.includes(player.faction.shortName) || \r\n                    selectedNames.includes(player.playerName)) {\r\n                return true;\r\n            }\r\n            selectedFactions[i] = player.faction.shortName;\r\n            selectedColours[i] = player.colour.description;\r\n            selectedNames[i] = player.playerName;\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const playerNumberSelections = this.determineSelection();\r\n\r\n        return (\r\n            <Row>\r\n                <Col xs={12} xl={{span: 8, offset: 2}}> \r\n                    <div>\r\n                        <h1>Number of Players</h1>\r\n                        <PlayerNumberSelect \r\n                            playerNumberSelections={playerNumberSelections}\r\n                            onClick={playerNumber => this.playerNumberButtonHandleClick(playerNumber)}\r\n                        />\r\n                    </div>\r\n                    <form>\r\n                        <PlayerDetailForm \r\n                            numberOfPlayers={this.state.selectedNumberOfPlayers} \r\n                            playerDetails={this.state.playerDetails}\r\n                            onPlayerNameChange={(e, playerNumber) => this.handlePlayerNameChange(e, playerNumber)}\r\n                            onPlayerFactionChange={(e, playerNumber) => this.handlePlayerFactionChange(e, playerNumber)}\r\n                            onPlayerColourChange={(e, playerNumber) => this.handlePlayerColourChange(e, playerNumber)}\r\n                        />\r\n                        <Button type=\"button\" disabled= {this.isGameReady()} onClick={() => this.handleStartGame()}>\r\n                            Start Game\r\n                        </Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerNumberSelect extends React.Component {\r\n    renderPlayerNumberButton(playerNumber) {\r\n        const isSelected = this.props.playerNumberSelections[playerNumber - PLAYER_NUMBER_INDEX_OFFSET];\r\n\r\n        return (\r\n            <PlayerNumberButton\r\n                value={playerNumber}\r\n                selected={isSelected}\r\n                onClick={() => this.props.onClick(playerNumber)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                { this.renderPlayerNumberButton(3) }\r\n                { this.renderPlayerNumberButton(4) }\r\n                { this.renderPlayerNumberButton(5) }\r\n                { this.renderPlayerNumberButton(6) }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerNumberButton(props) {\r\n    return (\r\n        <button \r\n            className={`playerNumButton ${props.selected ? \"selectedPlayerNumButton\" : \"\"}`} \r\n            id={`${props.value}Player`} \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nclass PlayerDetailForm extends React.Component {\r\n    renderPlayerDetailEntries() {\r\n        let playerDetailEntries = Array(this.props.numberOfPlayers);\r\n        for (let i = 0; i < this.props.numberOfPlayers; i++) {\r\n            playerDetailEntries[i] = <PlayerDetailEntry \r\n                key={i}\r\n                playerDetail={this.props.playerDetails[i]}\r\n                onPlayerNameChange={e => this.props.onPlayerNameChange(e, i)}\r\n                onFactionChange={e => this.props.onPlayerFactionChange(e, i)}\r\n                onColourChange={e => this.props.onPlayerColourChange(e, i)}\r\n            />;\r\n        }\r\n\r\n        return (<div>\r\n            {playerDetailEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerDetailEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerDetailEntry extends React.Component {\r\n    getFactionList() {\r\n        let factionElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        factionElements = factionElements.concat(faction_store.map((faction) => \r\n            <option key={faction.shortName} value={JSON.stringify(faction)}>\r\n                {faction.fullName}\r\n            </option>));\r\n\r\n        let playerFaction = this.props.playerDetail.faction ? JSON.stringify(this.props.playerDetail.faction) : undefined;\r\n\r\n        return <select \r\n            id=\"factions\" \r\n            required \r\n            value={playerFaction}\r\n            onChange={this.props.onFactionChange}\r\n        >\r\n            {factionElements}\r\n        </select>;\r\n    }\r\n\r\n    getColourList() {\r\n        let colourElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        colourElements = colourElements.concat(colour_store.map((colour) => \r\n            <option key={colour.description} value={JSON.stringify(colour)}>\r\n                {colour.description}\r\n            </option>));\r\n\r\n        let playerColour = this.props.playerDetail.colour ? JSON.stringify(this.props.playerDetail.colour) : undefined;\r\n\r\n        return <select \r\n            id=\"colours\" \r\n            required \r\n            defaultValue={playerColour} \r\n            onChange={this.props.onColourChange}\r\n        >\r\n            {colourElements}\r\n        </select>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={{span: 2, offset: 0}} xl={{span: 1, offset: 1}}>\r\n                    <button className={`speakerToken ${this.props.playerDetail.isSpeaker ? \"\" : \"invisible\"} disabled`}/>\r\n                </Col>\r\n                <Col xs={4}>\r\n                    <input \r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.playerName} \r\n                        onChange={this.props.onPlayerNameChange}\r\n                    />\r\n                </Col>\r\n                <Col xs={4}>\r\n                    {this.getFactionList()}\r\n                </Col>\r\n                <Col xs={2}>\r\n                    {this.getColourList()}\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerSelect;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport strategy_card_store from './data/strategy-cards.json';\r\n\r\nclass StrategySelect extends React.Component {\r\n    handleStartRound() {\r\n        if (this.props.onStartRound) {\r\n            return () => this.props.onStartRound()\r\n        }\r\n    }\r\n\r\n    isRoundReady() {\r\n        let selectedStrategyCards = [];\r\n        for (let i = 0; i < this.props.playerDetails.length; i++) {\r\n            let player = this.props.playerDetails[i];\r\n            if (!player.strategy || \r\n                    selectedStrategyCards.includes(player.strategy.strategyCard.number)) {\r\n                return true;\r\n            }\r\n            selectedStrategyCards[i] = player.strategy.strategyCard.number;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {/*TODO: add strategy cards */}\r\n                </Row>\r\n                <Row>\r\n                    <PlayerStrategyForm\r\n                        playerDetails={this.props.playerDetails}\r\n                        onPlayerStrategyChange={(e, playerNumber) => this.props.onPlayerStrategyChange(e, playerNumber)}\r\n                        onSpeakerButtonClick={this.props.onSpeakerButtonClick}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button variant=\"light\" type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                            {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" disabled={this.isRoundReady()} onClick={this.handleStartRound()}>\r\n                            Start Round\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyForm extends React.Component {\r\n    renderPlayerStrategyEntries() {\r\n        const players = this.props.playerDetails.slice();\r\n        var speakerIndex = 0;\r\n        for (let i = 0; i < players.length; i++) {\r\n            speakerIndex = players[i].isSpeaker ? i : speakerIndex;\r\n        }\r\n\r\n        let playerStrategyEntries = Array(players.length).fill(null);\r\n        for (let i = 0; i < players.length; i++) {\r\n            let destinationIndex = (((i - speakerIndex) % players.length) + players.length) % players.length;\r\n            playerStrategyEntries[destinationIndex] =\r\n                <PlayerStrategyEntry\r\n                    key={players[i].playerNumber}\r\n                    playerDetail={players[i]}\r\n                    onStrategyChange={e => this.props.onPlayerStrategyChange(e, players[i].playerNumber)}\r\n                    onSpeakerButtonClick={this.props.onSpeakerButtonClick}\r\n                />\r\n        }\r\n            \r\n        return (<Col>\r\n            {playerStrategyEntries}\r\n        </Col>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.renderPlayerStrategyEntries()\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyEntry extends React.Component {\r\n    getStrategyList() {\r\n        let strategyElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        strategyElements = strategyElements.concat(strategy_card_store.map((strategy) => \r\n            <option key={strategy.name} value={JSON.stringify(strategy)}>\r\n                {strategy.name}\r\n            </option>));\r\n\r\n        let playerStrategy = this.props.playerDetail.strategy ? JSON.stringify(this.props.playerDetail.strategy.strategyCard) : undefined;\r\n\r\n        return <select \r\n            id=\"strategies\" \r\n            required \r\n            value={playerStrategy} \r\n            onChange={this.props.onStrategyChange}\r\n        >\r\n            {strategyElements}\r\n        </select>;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={2} xl={1}>\r\n                    <button \r\n                        className={`speakerToken ${this.props.playerDetail.isSpeaker ? \"\" : \"invisible\"}`}\r\n                        onClick={this.props.onSpeakerButtonClick} \r\n                    />\r\n                </Col>\r\n                <Col xs={10} xl={11}>\r\n                    <input\r\n                        key=\"playerName\"\r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.playerName}\r\n                        disabled\r\n                    />\r\n                {/* </Col> */}\r\n                {/* <Col xs={3}> */}\r\n                    <input\r\n                        key=\"playerFaction\"\r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.faction && this.props.playerDetail.faction.fullName}\r\n                        disabled\r\n                    />\r\n                {/* </Col> */}\r\n                {/* <Col xs={4}> */}\r\n                    {this.getStrategyList()}\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default StrategySelect;","import React from 'react';\r\nimport './TimerBlock.css';\r\n\r\nconst secondsInMinute = 60;\r\nconst secondsInHour = 60 * 60;\r\n\r\nfunction Timer(props) {\r\n    return (\r\n        <button className=\"timer\" onClick={props.onClick} disabled={props.disabled}>\r\n            {props.time}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass TimerBlock extends React.Component {\r\n    render() {\r\n        const time = parseTime(this.props.currentSeconds);\r\n\r\n        let interactive = this.props.onClick;\r\n\r\n        return (\r\n            <span className=\"Timer\">\r\n                <label className=\"timerLabel\">{this.props.label}</label>\r\n                <Timer time={time} disabled={this.props.disabled} onClick={interactive ? () => this.props.onClick(this.props.currentSeconds) : null} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n//-------------------------------------------\r\n\r\nfunction parseTime(totalSeconds) {\r\n    if (!totalSeconds) {\r\n        return \"00:00\";\r\n    }\r\n\r\n    const hours = Math.floor(totalSeconds / secondsInHour);\r\n    const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\r\n    const seconds = totalSeconds % secondsInMinute;\r\n\r\n    var time = hours > 0 ? hours + \":\" : \"\";\r\n    time += (minutes < 10 ? \"0\" + minutes : minutes) + \":\";\r\n    time += seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return time;\r\n}\r\n\r\nexport default TimerBlock;","import React from 'react';\r\nimport {Row, Col} from 'react-bootstrap'\r\n\r\nimport './TechPanel.css';\r\n\r\n\r\nexport default function TechPanel(props) {\r\n    let techSetGroups = [];\r\n    for (let i = 0; i < props.techs.length; i++) {\r\n        techSetGroups[i] = <TechSetGroup \r\n            key={i} \r\n            techSet={props.techs[i]} \r\n            className=\"techSetGroup\" \r\n            onTechClick={(techDefinition) => props.onTechClick(techDefinition)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        techSetGroups\r\n    );\r\n}\r\n\r\n\r\nfunction TechSetGroup(props) {\r\n    let techButtons = [];\r\n    for (let i = 0; i < props.techSet.length; i++) {\r\n        let span = 12 / props.techSet.length;\r\n        techButtons[i] = \r\n            <Col key={i} xs={span}>\r\n                <TechButton \r\n                    key={props.techSet[i].techDefinition.name} \r\n                    tech={props.techSet[i]} \r\n                    onTechClick={() => props.onTechClick(props.techSet[i].techDefinition)} \r\n                />\r\n            </Col>\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {techButtons}\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction TechButton(props) {\r\n    return (\r\n        <button \r\n            className={`rounded techButton ${props.tech.techDefinition.type} ${props.tech.isResearched ? \"researched\" : \"\"} `}\r\n            onClick={props.onTechClick}\r\n        >\r\n            {props.tech.techDefinition.text}\r\n        </button> \r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport TimerBlock from './TimerBlock';\r\nimport Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport {Row, Col} from 'react-bootstrap'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nimport './StatusBoard.css';\r\nimport TechPanel from './TechPanel';\r\n\r\nconst USED_STRATEGY_COLOUR = \"grey\";\r\n\r\nfunction StatusBoard(props) {\r\n    const [showEndRoundModal, setShowEndRoundModal] = useState(false);\r\n\r\n    let players = props.players.slice();\r\n    players.sort((a, b) => a.strategy.strategyCard.number - b.strategy.strategyCard.number);\r\n\r\n    let playerCards = players.map(\r\n        (player) => \r\n        <Col key={player.playerNumber}>\r\n            <PlayerCard \r\n                key={player.playerNumber} \r\n                player={player}\r\n                playerTimer={props.playerTimers[player.playerNumber]}\r\n                onEndTurn={() => props.onEndTurn()}\r\n                onVictoryPointsClick={e => props.onVictoryPointsClick(e, JSON.stringify(player))}\r\n                onStrategyCardClick={() => props.onStrategyCardClick(JSON.stringify(player))}\r\n                onPassButtonClick={() => props.onPassButtonClick(JSON.stringify(player))}\r\n                onTechClick={(techDefinition) => props.onTechClick(techDefinition, player)}\r\n                onSpeakerButtonClick={props.onSpeakerButtonClick}\r\n            />\r\n        </Col>\r\n    );\r\n\r\n    const isAllPassed = isAllPlayersPassed(players);\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n            <Row>\r\n                {playerCards}\r\n            </Row>\r\n            <Row>\r\n                <Col xs={{span:2, offset:1}}>\r\n                    <Button variant=\"light\" type=\"button\" onClick={() => props.onToggleTimers()}>\r\n                        {props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                    </Button>\r\n                </Col>\r\n                <Col xs={{span:3, offset:6}}>\r\n                    <ButtonGroup>\r\n                        <Button type=\"button\" disabled={isAllPassed} onClick={() => props.onEndTurn()}>\r\n                            End Turn\r\n                        </Button>\r\n                        <Button type=\"button\" disabled={!isAllPassed} onClick={() => setShowEndRoundModal(true)}>\r\n                            End Round\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n            <EndRoundConfirmModal \r\n                showModal={showEndRoundModal}\r\n                onConfirmModal={() => props.onEndRound()}\r\n                onCloseModal={() => setShowEndRoundModal(false)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction PlayerCard(props) {\r\n    const player = props.player;\r\n    let playerBackgroundColour = player.colour ? player.colour.colour : null;\r\n    let playerTextColour = player.colour ? player.colour.textColour : null;\r\n    let playerStrategy = player.strategy;\r\n    let playerStrategyButton = playerStrategy ? \r\n        <button \r\n            className=\"strategyCardButton\" \r\n            type=\"button\"\r\n            style={{backgroundColor: playerStrategy.isUsed ? USED_STRATEGY_COLOUR : playerStrategy.strategyCard.colour,}}\r\n            onClick={props.onStrategyCardClick}\r\n        >\r\n            {playerStrategy.strategyCard.number}\r\n        </button> : \r\n        null;\r\n\r\n    let speakerButtonColumn = player.isSpeaker ? \r\n        <Col>\r\n            <button\r\n                className=\"speakerToken\"\r\n                onClick={props.onSpeakerButtonClick}\r\n            />\r\n        </Col> :\r\n        null;\r\n\r\n    return (\r\n        <Card className=\"border-0\">\r\n            <h6 \r\n                className={`rounded currentPlayerBlock ${player.isActivePlayer ? \"activePlayerBlock\" : player.isPassed ? \"passedPlayerBlock\" : \"\"}`}\r\n                onClick={props.onEndTurn}\r\n            >\r\n                {player.isActivePlayer ? \"Current Player\" : player.isPassed ? \"Passed\" : \"\"}\r\n            </h6>\r\n            <Card className=\"playerCard\">\r\n                <Row noGutters style={{ \r\n                    backgroundColor: playerBackgroundColour, \r\n                    color: playerTextColour,\r\n                }}>\r\n                    <Col xs={2}>\r\n                        {/* TODO: Add faction icon */}\r\n                    </Col>\r\n                    <Col>\r\n                        <div>{player.playerName}</div>\r\n                        <div>{player.faction && player.faction.shortName}</div>\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                        <button \r\n                            className={\r\n                                `rounded passButton \r\n                                ${!player.strategy.isUsed ? \"invisible\" : \r\n                                player.isPassed ? \"passButtonPassed\" : \"\"}`\r\n                            }\r\n                            onClick={props.onPassButtonClick}\r\n                            disabled={!player.strategy.isUsed}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <TimerBlock currentSeconds={props.playerTimer.currentSeconds} disabled={true} />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        <button\r\n                            className=\"victoryPointButton\"\r\n                            type=\"button\"\r\n                            onClick={props.onVictoryPointsClick}\r\n                            onContextMenu={props.onVictoryPointsClick}\r\n                        >\r\n                            {player.victoryPoints}\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        {playerStrategyButton}\r\n                    </Col>\r\n                    {speakerButtonColumn}\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n            <TechPanel techs={player.techs} onTechClick={(techDefinition) => props.onTechClick(techDefinition)}/>\r\n            </Card>\r\n        </Card>\r\n    )\r\n}\r\n\r\nfunction EndRoundConfirmModal(props) {\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Body>\r\n                <h3>End the round?</h3>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default StatusBoard;\r\n\r\n//#region functions\r\n\r\nfunction isAllPlayersPassed(players) {\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (!players[i].isPassed) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n//#endregion\r\n","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport objective_store from './data/objectives.json';\r\n\r\nexport default function ObjectiveSelectModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let selectedObjectives = props.objectives.map((objective) => objective.isRevealed ? objective : null);\r\n    selectedObjectives = selectedObjectives.filter((objective) => objective !== null);\r\n\r\n    let availableObjectives = objective_store.filter((objective) => objective.stage === props.stage);\r\n    availableObjectives = availableObjectives.filter(\r\n        (objective) => !selectedObjectives.some(\r\n            function (selectedObjective) {\r\n                return objective.id === selectedObjective.id;\r\n            }\r\n       )\r\n    );\r\n\r\n    let objectiveElements = Array(1);\r\n    objectiveElements[0] = <option key=\"unselected\" className=\"nullOption\" value={null} hidden/>\r\n    objectiveElements = objectiveElements.concat(availableObjectives.map(\r\n        (objective) => <option key={objective.id} value={JSON.stringify(objective)}>\r\n            {objective.name}\r\n        </option>));\r\n    \r\n    let objectiveSelect = <select id=\"objectives\" required onChange={props.onObjectiveChange}>\r\n        {objectiveElements}\r\n    </select>;\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>Select Public Objective</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {objectiveSelect}\r\n                </div>\r\n                <div className=\"d-flex flex-column\">\r\n                    <br/>\r\n                    <p className=\"objectiveLongDescription\">\r\n                        {props.selectedObjectiveSelection ? props.selectedObjectiveSelection.longDescription : \"\"}\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedObjectiveSelection}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function ObjectivePanel(props) {\r\n    let objectiveBlocks = Array(props.objectives.length);\r\n\r\n    for (let i = 0; i < props.objectives.length; i++) {\r\n        const objective = props.objectives[i];\r\n        objectiveBlocks[i] = <ObjectiveCard \r\n            key={objective.order} \r\n            name={objective.name} \r\n            stage={objective.stage} \r\n            shortDescription={objective.shortDescription} \r\n            isRevealed={objective.isRevealed} \r\n            onObjectiveCardClick={() => props.onObjectiveCardClick(i)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {objectiveBlocks}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction ObjectiveCard(props) {\r\n    let cardDisplay = props.isRevealed ? props.shortDescription : props.stage;\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                type=\"button\" \r\n                className={`objectiveCard stage${props.stage} ${props.isRevealed ? \"revealed\" : \"\"}`} \r\n                onClick={props.onObjectiveCardClick}\r\n            >\r\n                {cardDisplay}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function SpeakerChangeModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let playerList = [<option key=\"unselected\" value={null} hidden/>];\r\n    for (let i = 0; i < props.playerDetails.length; i++) {\r\n        let player = props.playerDetails[i];\r\n        if (!player.isSpeaker) {\r\n            playerList.push(\r\n                <option key={player.playerNumber} value={player.playerNumber}>\r\n                    {player.playerName + \" - \" + player.faction.shortName}\r\n                </option>\r\n            );\r\n        }\r\n    }\r\n    let playerSelect = <select id=\"speakerCandidates\" required onChange={props.onSpeakerChange}>\r\n        {playerList}\r\n    </select>\r\n\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>Select New Speaker</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {playerSelect}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedSpeakerNumber}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PlayerSelect from './PlayerSelect';\r\nimport StrategySelect from './StrategySelect';\r\nimport StatusBoard from './StatusBoard';\r\nimport TimerBlock from './TimerBlock';\r\nimport ObjectiveSelectModal from './ObjectiveSelectModal';\r\nimport ObjectivePanel from './ObjectivePanel';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport SpeakerChangeModal from './SpeakerChangeModal';\r\n\r\nimport './GameManager.css';\r\n\r\nconst MODE_PLAYER_SELECT = 1;\r\nconst MODE_STRATEGY = 2;\r\nconst MODE_STATUS_BOARD = 3;\r\n\r\nconst NUMBER_STRATEGIES = 8;\r\nconst NUMBER_OBJECTIVES_STAGE_ONE = 5;\r\nconst NUMBER_OBJECTIVES_STAGE_TWO = 5;\r\n\r\nconst POLITICS_CARD_NUMBER = 3;\r\n\r\nconst LEFT_CLICK = 1; //native event constant for a left click\r\nconst RIGHT_CLICK = 3; //native event constant for the opening of the context menu (i.e. right click)\r\n\r\n\r\nclass GameManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //View controls\r\n            gameMode: MODE_PLAYER_SELECT,\r\n            showObjectiveSelectModal: false,\r\n            showSpeakerChangeModal: false,\r\n\r\n            //Temporary State\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null, //used for the objective select modal to record the current selection\r\n            selectedSpeakerNumber: null, //used for the speaker select modal to record the player selected\r\n\r\n            //Game Details\r\n            playerDetails: null,\r\n            playerTimers: null,\r\n            roundNumber: 1,\r\n            totalGameTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            currentTurnTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            publicObjectives: this.fillPublicObjectives(),\r\n        };\r\n    }\r\n\r\n    //#region Lifecycle\r\n    componentDidMount() {\r\n        this.heartbeat = setInterval(() => this.recalculateTimers(), 500);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.heartbeat);\r\n    }\r\n    //#endregion\r\n\r\n    //#region Event Handlers\r\n    handleStartGame(playerDetails) {\r\n        let playerTimers = Array(playerDetails.length);\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            playerTimers[i] = {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n            gameMode: MODE_STRATEGY,\r\n        });\r\n\r\n        this.startGameTimer();\r\n    }\r\n\r\n    handlePlayerStrategyChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let newStrategy = {\r\n            strategyCard: JSON.parse(e.target.value),\r\n            isUsed: false,\r\n        }\r\n        playerDetails[playerNumber].strategy = newStrategy\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    //TODO Review the function name as it's likely to become confusing once strategy cards area added to the strategy select view\r\n    handleStrategyCardClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (player.isPassed) {\r\n            return; //can't toggle strategy card if already passed\r\n        }\r\n\r\n        let newStrategy = {...player.strategy};\r\n        newStrategy.isUsed = !newStrategy.isUsed;\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.strategy = newStrategy;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        \r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n        \r\n        if (newPlayer.strategy.strategyCard.number === POLITICS_CARD_NUMBER && newPlayer.strategy.isUsed) {\r\n            this.handleSpeakerButtonClicked();\r\n        }\r\n    }\r\n\r\n    handlePassButtonClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (!player.isPassed && !player.strategy.isUsed) {\r\n            return; //can't pass if strategy card is not yet played\r\n        }\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.isPassed = !newPlayer.isPassed;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartRound() {\r\n        let lowestInitiative = NUMBER_STRATEGIES;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].strategy.strategyCard.number <= lowestInitiative) {\r\n                lowestInitiative = this.state.playerDetails[i].strategy.strategyCard.number;\r\n            }\r\n        }\r\n\r\n        let newPlayerDetails = this.state.playerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            newPlayer.isActivePlayer = newPlayer.strategy.strategyCard.number === lowestInitiative;\r\n            return newPlayer;\r\n        });\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n            gameMode: MODE_STATUS_BOARD,\r\n        });\r\n\r\n        this.startGameTimer();\r\n        this.startTurnTimers();\r\n    }\r\n\r\n    handleTurnTimerClicked() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startTurnTimers();\r\n            this.startGameTimer(); //if turn timers are running, the game timer should be as well\r\n        }\r\n    }\r\n\r\n    handleGameTimerClicked() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers(); //if the game timer is stopped, all timers should be stopped\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n        }\r\n    }\r\n\r\n    handleEndRound() {\r\n        let playerDetails = this.state.playerDetails.slice().map(\r\n            player => ({\r\n                ...player,\r\n                strategy: null,\r\n                isPassed: false,\r\n            })\r\n        );\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            roundNumber: this.state.roundNumber + 1,\r\n            playerDetails: playerDetails,\r\n        });\r\n\r\n        this.stopTurnTimers(true); //turns aren't occurring between rounds\r\n        this.startGameTimer(); //activity means the game timer should almost certainly be on\r\n    }\r\n\r\n    handleToggleTimers() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n            this.state.gameMode === MODE_STATUS_BOARD && this.startTurnTimers();\r\n        }\r\n    }\r\n\r\n    handleVictoryPointClick(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVictoryPoints = player.victoryPoints;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints + 1;\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints - 1;\r\n        }\r\n        \r\n        if (newVictoryPoints >= 0 && newVictoryPoints <= (this.state.maxVictoryPoints ? this.state.maxVictoryPoints : 10)) {\r\n            let newPlayer = {...player};\r\n            newPlayer.victoryPoints = newVictoryPoints;\r\n            newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleEndTurn() {\r\n        this.startGameTimer();\r\n        this.restartTurnTimers();\r\n    }\r\n\r\n    handleObjectiveCardClicked(index) {\r\n        let objective = this.state.publicObjectives[index];\r\n        if (!objective.isRevealed && objective.order === this.nextUnrevealedObjective()) {\r\n            this.setState({ \r\n                showObjectiveSelectModal: true,\r\n                selectedObjective: objective,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleObjectiveChange(e) {\r\n        let newObjective = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedObjectiveSelection: newObjective,\r\n        });\r\n    }\r\n\r\n    handleCloseObjectiveSelectModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedObjectiveSelection && this.state.selectedObjective) {\r\n            let newObjective = {...this.state.selectedObjectiveSelection};\r\n            newObjective.isRevealed = true;\r\n            newObjective.order = this.state.selectedObjective.order;\r\n\r\n            let newPublicObjectives = this.state.publicObjectives.slice();\r\n            newPublicObjectives[this.state.selectedObjective.order] = newObjective;\r\n            \r\n            this.setState({\r\n                publicObjectives: newPublicObjectives,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            showObjectiveSelectModal: false,\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null,\r\n        });\r\n    }\r\n\r\n    handleSpeakerButtonClicked() {\r\n        this.setState({ \r\n            showSpeakerChangeModal: true,\r\n        });\r\n    }\r\n\r\n    handleSpeakerChange(e) {\r\n        let newSpeakerNumber = e.target.value;\r\n        this.setState({\r\n            selectedSpeakerNumber: newSpeakerNumber,\r\n        });\r\n    }\r\n\r\n    handleCloseSpeakerChangeModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedSpeakerNumber) {\r\n            let newPlayerDetails = this.state.playerDetails.slice();\r\n            let oldSpeaker = null;\r\n            for (let i = 0; i < newPlayerDetails.length; i++) {\r\n                if (newPlayerDetails[i].isSpeaker) {\r\n                    oldSpeaker = {...newPlayerDetails[i]}\r\n                    oldSpeaker.isSpeaker = false;\r\n                }\r\n            }\r\n\r\n            let newSpeaker = {...newPlayerDetails[this.state.selectedSpeakerNumber]};\r\n            newSpeaker.isSpeaker = true;\r\n            \r\n            newPlayerDetails[oldSpeaker.playerNumber] = oldSpeaker;\r\n            newPlayerDetails[newSpeaker.playerNumber] = newSpeaker;\r\n            \r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            showSpeakerChangeModal: false,\r\n            selectedSpeakerNumber: null,\r\n        });\r\n    }\r\n\r\n    handleTechClicked(techDefinition, player) {\r\n        let newPlayer = {...player};\r\n        let newTechSets = player.techs.slice();\r\n        for (let i = 0; i < newTechSets.length; i++) {\r\n            let newTechs = newTechSets[i].map(tech => {\r\n                if (tech.techDefinition === techDefinition) {\r\n                    let newTech = {...tech};\r\n                    newTech.isResearched = !newTech.isResearched;\r\n                    return newTech;\r\n                }\r\n                return tech;\r\n            })\r\n            newTechSets[i] = newTechs;\r\n        }\r\n        newPlayer.techs = newTechSets;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n    //#endregion\r\n\r\n    //#region Commands\r\n    fillPublicObjectives() {\r\n        let numberObjectives = NUMBER_OBJECTIVES_STAGE_ONE + NUMBER_OBJECTIVES_STAGE_TWO;\r\n        let objectives = Array(numberObjectives);\r\n        for (let i = 0; i < numberObjectives; i++) {\r\n            objectives[i] = {\r\n                id: null,\r\n                order: i,\r\n                stage: i < NUMBER_OBJECTIVES_STAGE_ONE ? 1 : 2,\r\n                name: null,\r\n                longDescription: null,\r\n                shortDescription: null,\r\n                isRevealed: false,\r\n            }\r\n        }\r\n        return objectives;\r\n    }\r\n\r\n    nextUnrevealedObjective() {\r\n        for (let i = 0; i < this.state.publicObjectives.length; i++) {\r\n            if (!this.state.publicObjectives[i].isRevealed) {\r\n                return this.state.publicObjectives[i].order;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    recalculateTimers() {\r\n        if (this.state.totalGameTimer && this.state.totalGameTimer.isCounting) {\r\n            this.recalculateGameTime();\r\n        }\r\n        if (this.state.currentTurnTimer && this.state.currentTurnTimer.isCounting) {\r\n            this.recalculateTurnTime();\r\n        }\r\n    }\r\n\r\n    recalculateGameTime() {\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        this.setState({\r\n            totalGameTimer: timer,\r\n        });\r\n    }\r\n\r\n    recalculateTurnTime() {\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.currentSeconds = playerTimer.baseSeconds + Math.floor((Date.now() - playerTimer.countStartTime) / 1000);\r\n        playerTimers[playerNumber] = playerTimer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        });\r\n    }\r\n\r\n    startTurnTimers() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.isCounting = true;\r\n        playerTimer.countStartTime = Date.now();\r\n        playerTimers[playerNumber] = playerTimer;\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    stopTurnTimers(resetCurrentTurn) {\r\n        if (!this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = false;\r\n        if (resetCurrentTurn) {\r\n            timer.baseSeconds = 0;\r\n            timer.currentSeconds = 0;\r\n        }\r\n        else {\r\n            timer.baseSeconds = timer.currentSeconds;\r\n        }\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.isCounting = false;\r\n        playerTimer.baseSeconds = playerTimer.currentSeconds;\r\n        playerTimers[playerNumber] = playerTimer;\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    restartTurnTimers() {\r\n        let timer = {\r\n            baseSeconds: 0,\r\n            currentSeconds: 0,\r\n            countStartTime: Date.now(),\r\n            isCounting: true,\r\n        };\r\n\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let playerTimers = this.state.playerTimers.slice();\r\n\r\n        let currentPlayer = {...this.getActivePlayer()};\r\n        let currentPlayerTimer = {...playerTimers[currentPlayer.playerNumber]};\r\n        currentPlayerTimer.isCounting = false;\r\n        currentPlayerTimer.baseSeconds = currentPlayerTimer.currentSeconds;\r\n        currentPlayer.isActivePlayer = false;\r\n        playerTimers[currentPlayer.playerNumber] = currentPlayerTimer;\r\n        playerDetails[currentPlayer.playerNumber] = currentPlayer;\r\n\r\n        let nextPlayer = this.getNextPlayer(currentPlayer)\r\n        let nextPlayerTimer = {...playerTimers[nextPlayer.playerNumber]};\r\n        nextPlayerTimer.isCounting = true;\r\n        nextPlayerTimer.countStartTime = Date.now();\r\n        nextPlayer.isActivePlayer = true;\r\n        playerTimers[nextPlayer.playerNumber] = nextPlayerTimer;\r\n        playerDetails[nextPlayer.playerNumber] = nextPlayer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    startGameTimer() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    stopGameTimer() {\r\n        if (!this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.baseSeconds = timer.currentSeconds;\r\n        timer.isCounting = false;\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    getActivePlayer() {\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isActivePlayer) {\r\n                return this.state.playerDetails[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getNextPlayer(activePlayer) {\r\n        //TODO Factor in Naalu initiative (race or promissory)\r\n        let nextPlayer = activePlayer;\r\n        // determine the highest initiative number that could possibly be next. Offset by the number of strategies to allow it to loop back;\r\n        let highestInitiativeNumber = activePlayer.strategy.strategyCard.number + NUMBER_STRATEGIES - 1;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.isActivePlayer && !player.isPassed) {\r\n                // determine the player initiative number, offset by the number of strategies to allow it to loop back\r\n                let playerInitiativeNumber =\r\n                    player.strategy.strategyCard.number < activePlayer.strategy.strategyCard.number ?\r\n                        player.strategy.strategyCard.number + NUMBER_STRATEGIES :\r\n                        player.strategy.strategyCard.number;\r\n                if (playerInitiativeNumber < highestInitiativeNumber) {\r\n                    highestInitiativeNumber = playerInitiativeNumber;\r\n                    nextPlayer = player;\r\n                }\r\n            }\r\n        }\r\n        return nextPlayer;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Rendering methods\r\n    renderGameComponent() {\r\n        switch (this.state.gameMode) {\r\n            case MODE_PLAYER_SELECT:\r\n                return this.renderPlayerSelect();\r\n            case MODE_STRATEGY:\r\n                return this.renderStrategy();\r\n            case MODE_STATUS_BOARD:\r\n                return this.renderStatusBoard();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    renderPlayerSelect() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <PlayerSelect onStartGame={playerDetails => this.handleStartGame(playerDetails)} />\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStrategy() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <StrategySelect\r\n                            playerDetails={this.state.playerDetails}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onStartRound={() => this.handleStartRound()}\r\n                            onPlayerStrategyChange={(e, playerNumber) => this.handlePlayerStrategyChange(e, playerNumber)}\r\n                            onSpeakerButtonClick={() => this.handleSpeakerButtonClicked()}\r\n                            />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStatusBoard() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(true)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <StatusBoard\r\n                            roundNumber={this.state.roundNumber}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            players={this.state.playerDetails}\r\n                            playerTimers={this.state.playerTimers}\r\n                            onEndTurn={() => this.handleEndTurn()}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onVictoryPointsClick={(e, playerString) => this.handleVictoryPointClick(e, playerString)}\r\n                            onStrategyCardClick={(playerString) => this.handleStrategyCardClicked(playerString)}\r\n                            onPassButtonClick={(playerString) => this.handlePassButtonClicked(playerString)}\r\n                            onEndRound={() => this.handleEndRound()}\r\n                            onTechClick={(techDefinition, player) => this.handleTechClicked(techDefinition, player)}\r\n                            onSpeakerButtonClick={() => this.handleSpeakerButtonClicked()}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderGameHeader(showTurnTimer) {\r\n        return <GameHeader\r\n            roundNumber={this.state.roundNumber}\r\n            totalGameTimer={this.state.totalGameTimer}\r\n            showTurnTimer={showTurnTimer}\r\n            currentTurnTimer={this.state.currentTurnTimer}\r\n            onTurnTimerClick={() => this.handleTurnTimerClicked()}\r\n            onGameTimerClick={() => this.handleGameTimerClicked()}\r\n        />\r\n    }\r\n\r\n\r\n    renderObjectivePanel() {\r\n        return <ObjectivePanel\r\n            className=\"objectivePanel\"\r\n            objectives={this.state.publicObjectives}\r\n            onObjectiveCardClick={(index) => this.handleObjectiveCardClicked(index)}\r\n        />\r\n    }\r\n    //#endregion\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderGameComponent()}\r\n                <ObjectiveSelectModal\r\n                    showModal={this.state.showObjectiveSelectModal}\r\n                    objectives={this.state.publicObjectives}\r\n                    stage={this.state.selectedObjective ? this.state.selectedObjective.stage : null}\r\n                    selectedObjectiveSelection={this.state.selectedObjectiveSelection}\r\n                    onConfirmModal={() => this.handleCloseObjectiveSelectModal(true)}\r\n                    onCloseModal={() => this.handleCloseObjectiveSelectModal()}\r\n                    onObjectiveChange={e => this.handleObjectiveChange(e)}\r\n                />\r\n                <SpeakerChangeModal\r\n                    showModal={this.state.showSpeakerChangeModal}\r\n                    playerDetails={this.state.playerDetails}\r\n                    selectedSpeakerNumber={this.state.selectedSpeakerNumber}\r\n                    onConfirmModal={() => this.handleCloseSpeakerChangeModal(true)}\r\n                    onCloseModal={() => this.handleCloseSpeakerChangeModal()}\r\n                    onSpeakerChange={e => this.handleSpeakerChange(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction GameHeader(props) {\r\n    let turnTimer = props.showTurnTimer ?\r\n        <TimerBlock\r\n            id=\"turnTimer\"\r\n            label=\"Turn Time\"\r\n            currentSeconds={props.currentTurnTimer.currentSeconds}\r\n            onClick={() => props.onTurnTimerClick()}\r\n        /> :\r\n        null;\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"timerLabel\">{\"Round: \" + props.roundNumber}</label>\r\n            {turnTimer}\r\n            <TimerBlock\r\n                id=\"turnTimer\"\r\n                label=\"Total Game Time\"\r\n                currentSeconds={props.totalGameTimer.currentSeconds}\r\n                onClick={() => props.onGameTimerClick()}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameManager;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GameManager from './GameManager';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './custom.scss';\r\n\r\ndocument.oncontextmenu = (e) => e.preventDefault();\r\n\r\nReactDOM.render(\r\n    <GameManager/>,\r\n    document.getElementById(\"root\")\r\n  );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}