{"version":3,"sources":["PlayerSelect.js","StrategySelect.js","StatusBoard.js","TimerBlock.js","GameManager.js","serviceWorker.js","index.js"],"names":["FACTIONS","COLOURS","description","colour","PlayerSelect","props","state","selectedNumberOfPlayers","playerDetails","createPlayer","playerNumber","playerName","faction","victoryPoints","isSpeaker","deselected","this","setState","playerNumberSelections","Array","fill","e","slice","target","value","JSON","parse","onStartGame","finalPlayerDetails","determineSelection","onClick","playerNumberButtonHandleClick","numberOfPlayers","onPlayerNameChange","handlePlayerNameChange","onPlayerFactionChange","handlePlayerFactionChange","onPlayerColourChange","handlePlayerColourChange","type","handleStartGame","React","Component","PlayerNumberSelect","isSelected","PlayerNumberButton","selected","renderPlayerNumberButton","className","id","PlayerDetailForm","playerDetailEntries","i","key","playerDetail","onFactionChange","onColourChange","renderPlayerDetailEntries","PlayerDetailEntry","factionElements","map","required","defaultValue","onChange","colourElements","stringify","playerColour","getFactionList","getColourList","STRATEGIES","name","number","StrategySelect","onStartRound","onPlayerStrategyChange","onToggleTimers","isGameActive","handleStartRound","PlayerStrategyForm","players","speakerIndex","length","playerStrategyEntries","destinationIndex","onStrategyChange","renderPlayerStrategyEntries","PlayerStrategyEntry","strategyElements","strategy","playerStrategy","disabled","getStrategyList","StatusBoard","playerCards","player","onEndTurn","onEndRound","PlayerCard","playerStrategyButton","style","backgroundColor","isActivePlayer","Timer","time","TimerBlock","totalSeconds","hours","Math","floor","minutes","seconds","parseTime","currentSeconds","label","GameHeader","turnTimer","showTurnTimer","currentTurnTimer","onTurnTimerClick","roundNumber","totalGameTimer","onGameTimerClick","GameManager","gameMode","baseSeconds","countStartTime","Date","now","isCounting","startGameTimer","startTurnTimers","stopTurnTimers","stopGameTimer","restartTurnTimers","timer","interval","setInterval","recalculateTurnTime","resetCurrentTurn","clearInterval","recalculateGameTime","renderPlayerSelect","renderStrategy","renderStatusBoard","renderGameHeader","handleToggleTimers","handlePlayerStrategyChange","handleEndTurn","handleEndRound","handleTurnTimerClicked","handleGameTimerClicked","renderGameComponent","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f903c90f.chunk.js","sourcesContent":["import React from 'react';\r\nimport './PlayerSelect.css';\r\n\r\nconst PLAYER_NUMBER_INDEX_OFFSET = 3; //player 3 is array index 0\r\nconst MAX_PLAYER_NUMBER = 6;\r\n\r\nconst FACTIONS = [\r\n    \"\",\r\n    \"Arborec\",\r\n    \"Barony of Letnev\",\r\n    \"Clan of Saar\",\r\n    \"Embers of Muaat\",\r\n    \"Emirates of Hacan\",\r\n    \"Federation of Sol\",\r\n    \"Ghosts of Creuss\",\r\n    \"L1Z1X Mindnet\",\r\n    \"Mentak Coalition\",\r\n    \"Naalu Collective\",\r\n    \"Nekro Virus\",\r\n    \"Sardakk N’orr\",\r\n    \"Universities of Jol-Nar\",\r\n    \"Winnu\",\r\n    \"Xxcha Kingdom\",\r\n    \"Yin Brotherhood\",\r\n    \"Yssaril Tribes\"\r\n]\r\n\r\nconst COLOURS = [\r\n    {description: null, colour: null},\r\n    {description: \"Red\", colour: \"red\"},\r\n    {description: \"Blue\", colour: \"blue\"},\r\n    {description: \"Green\", colour: \"green\"},\r\n    {description: \"Yellow\", colour: \"yellow\"},\r\n    {description: \"Purple\", colour: \"purple\"},\r\n    {description: \"Black\", colour: \"black\"},\r\n]\r\n\r\nclass PlayerSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            selectedNumberOfPlayers: null,\r\n            //TODO dynamically populate player number as index\r\n            playerDetails: [\r\n                this.createPlayer(0),\r\n                this.createPlayer(1),\r\n                this.createPlayer(2),\r\n                this.createPlayer(3),\r\n                this.createPlayer(4),\r\n                this.createPlayer(5),\r\n            ]\r\n        };\r\n    }\r\n\r\n    createPlayer(playerNumber) {\r\n        var playerDetail = {\r\n            playerName: \"Player \" + (playerNumber + 1),\r\n            playerNumber: playerNumber,\r\n            faction: null,\r\n            colour: null,\r\n            victoryPoints: 0,\r\n            isSpeaker: playerNumber === 0 ? true : false,\r\n        }\r\n        return playerDetail;\r\n    }\r\n\r\n    playerNumberButtonHandleClick(playerNumber) {\r\n        //if the existing option is selected, deselect it\r\n        let deselected = this.state.selectedNumberOfPlayers === playerNumber\r\n\r\n        this.setState({\r\n            selectedNumberOfPlayers: deselected ? null : playerNumber,\r\n        });\r\n    }\r\n\r\n    determineSelection() {\r\n        let playerNumberSelections = Array(MAX_PLAYER_NUMBER).fill(false);\r\n        if (this.state.selectedNumberOfPlayers !== null) {\r\n            playerNumberSelections[this.state.selectedNumberOfPlayers - PLAYER_NUMBER_INDEX_OFFSET] = true;\r\n        }\r\n\r\n        return playerNumberSelections;\r\n    }\r\n\r\n    handlePlayerNameChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].playerName = e.target.value;\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handlePlayerFactionChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].faction = e.target.value;\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n    \r\n    handlePlayerColourChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].colour = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartGame() {\r\n        if (this.props.onStartGame) {\r\n            let finalPlayerDetails = this.state.playerDetails.slice(0, this.state.selectedNumberOfPlayers)\r\n\r\n            return () => this.props.onStartGame(finalPlayerDetails)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const playerNumberSelections = this.determineSelection();\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h1>Number of Players</h1>\r\n                    <PlayerNumberSelect \r\n                        playerNumberSelections={playerNumberSelections}\r\n                        onClick={playerNumber => this.playerNumberButtonHandleClick(playerNumber)}\r\n                    />\r\n                </div>\r\n                <form>\r\n                    <PlayerDetailForm \r\n                        numberOfPlayers={this.state.selectedNumberOfPlayers} \r\n                        playerDetails={this.state.playerDetails}\r\n                        onPlayerNameChange={(e, playerNumber) => this.handlePlayerNameChange(e, playerNumber)}\r\n                        onPlayerFactionChange={(e, playerNumber) => this.handlePlayerFactionChange(e, playerNumber)}\r\n                        onPlayerColourChange={(e, playerNumber) => this.handlePlayerColourChange(e, playerNumber)}\r\n                    />\r\n                    <button type=\"button\" onClick={this.handleStartGame()}>\r\n                        Start Game\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerNumberSelect extends React.Component {\r\n    renderPlayerNumberButton(playerNumber) {\r\n        const isSelected = this.props.playerNumberSelections[playerNumber - PLAYER_NUMBER_INDEX_OFFSET];\r\n\r\n        return (<PlayerNumberButton\r\n            value={playerNumber}\r\n            selected={isSelected}\r\n            onClick={() => this.props.onClick(playerNumber)}\r\n        />);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.renderPlayerNumberButton(3) }\r\n                { this.renderPlayerNumberButton(4) }\r\n                { this.renderPlayerNumberButton(5) }\r\n                { this.renderPlayerNumberButton(6) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerNumberButton(props) {\r\n    return (\r\n        <button \r\n            className={`playerNumButton ${props.selected ? \"selectedPlayerNumButton\" : \"\"}`} \r\n            id={`${props.value}Player`} \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nclass PlayerDetailForm extends React.Component {\r\n    renderPlayerDetailEntries() {\r\n        let playerDetailEntries = Array(this.props.numberOfPlayers);\r\n        for (let i = 0; i < this.props.numberOfPlayers; i++) {\r\n            playerDetailEntries[i] = <PlayerDetailEntry \r\n                key={i}\r\n                playerDetail={this.props.playerDetails[i]}\r\n                onPlayerNameChange={e => this.props.onPlayerNameChange(e, i)}\r\n                onFactionChange={e => this.props.onPlayerFactionChange(e, i)}\r\n                onColourChange={e => this.props.onPlayerColourChange(e, i)}\r\n            />;\r\n        }\r\n\r\n        return (<div>\r\n            {playerDetailEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerDetailEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerDetailEntry extends React.Component {\r\n    //TODO: could have a list of unselected factions passed down to prevent duplicates\r\n    //TODO: work out a better way of recording all the faction details (enum equivalent?)\r\n    getFactionList() {\r\n        let factionElements = FACTIONS.map((faction) => \r\n            <option key={faction} value={faction}>\r\n                {faction}\r\n            </option>);\r\n\r\n        //TODO: consider a datalist instead. Allows type-ahead but clearing is clunky\r\n        return <select \r\n            id=\"factions\" \r\n            required \r\n            defaultValue={this.props.playerDetail.faction}\r\n            onChange={this.props.onFactionChange}\r\n        >\r\n            {factionElements}\r\n        </select>;\r\n    }\r\n\r\n    getColourList() {\r\n        let colourElements = COLOURS.map((colour) => \r\n        <option key={colour.description} value={JSON.stringify(colour)}>\r\n            {colour.description}\r\n        </option>);\r\n\r\n        let playerColour = this.props.playerDetail.colour ? this.props.playerDetail.colour.colour : null;\r\n\r\n        return <select \r\n            id=\"colours\" \r\n            required \r\n            defaultValue={playerColour} \r\n            onChange={this.props.onColourChange}\r\n        >\r\n            {colourElements}\r\n        </select>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input \r\n                    type=\"text\"\r\n                    defaultValue={this.props.playerDetail.playerName} \r\n                    onChange={this.props.onPlayerNameChange}\r\n                />\r\n                {this.getFactionList()}\r\n                {this.getColourList()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerSelect;","import React from 'react';\r\n// import './PlayerSelect.css';\r\n\r\nconst STRATEGIES = [\r\n    {name: \"\", number: null, colour: null},\r\n    {name: \"Leadership\", number: 1, colour: \"red\"},\r\n    {name: \"Diplomacy\", number: 2, colour: \"orange\"},\r\n    {name: \"Politics\", number: 3, colour: \"yellow\"},\r\n    {name: \"Construction\", number: 4, colour: \"#307843\"},\r\n    {name: \"Trade\", number: 5, colour: \"#58e87e\"},\r\n    {name: \"Warfare\", number: 6, colour: \"cyan\"},\r\n    {name: \"Technology\", number: 7, colour: \"#084bc9\"},\r\n    {name: \"Imperial\", number: 8, colour: \"purple\"},\r\n];\r\n\r\nclass StrategySelect extends React.Component {\r\n    handleStartRound() {\r\n        if (this.props.onStartRound) {\r\n            return () => this.props.onStartRound()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n\r\n                </div>\r\n                <form>\r\n                    <PlayerStrategyForm\r\n                        playerDetails={this.props.playerDetails}\r\n                        onPlayerStrategyChange={(e, playerNumber) => this.props.onPlayerStrategyChange(e, playerNumber)}\r\n                    />\r\n                    <button type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                        {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                    </button>\r\n                    <button type=\"button\" onClick={this.handleStartRound()}>\r\n                        Start Round\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyForm extends React.Component {\r\n    renderPlayerStrategyEntries() {\r\n        const players = this.props.playerDetails.slice();\r\n        var speakerIndex = 0;\r\n        for (let i = 0; i < players.length; i++) {\r\n            speakerIndex = players[i].isSpeaker ? i : speakerIndex;\r\n        }\r\n\r\n        let playerStrategyEntries = Array(players.length).fill(null);\r\n        for (let i = 0; i < players.length; i++) {\r\n            let destinationIndex = (((i - speakerIndex) % players.length) + players.length) % players.length;\r\n            playerStrategyEntries[destinationIndex] =\r\n                <PlayerStrategyEntry\r\n                    key={players[i].playerNumber}\r\n                    playerDetail={players[i]}\r\n                    onStrategyChange={e => this.props.onPlayerStrategyChange(e, players[i].playerNumber)}\r\n                />\r\n        }\r\n            \r\n        return (<div>\r\n            {playerStrategyEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerStrategyEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyEntry extends React.Component {\r\n    getStrategyList() {\r\n        let strategyElements = STRATEGIES.map((strategy) => \r\n            <option key={strategy.name} value={JSON.stringify(strategy)}>\r\n                {strategy.name}\r\n            </option>);\r\n\r\n        let playerStrategy = this.props.playerDetail.strategy ? this.props.playerDetail.strategy.description : null;\r\n\r\n        return <select \r\n            id=\"strategies\" \r\n            required \r\n            defaultValue={playerStrategy} \r\n            onChange={this.props.onStrategyChange}\r\n        >\r\n            {strategyElements}\r\n        </select>;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input \r\n                    key=\"playerName\"\r\n                    type=\"text\"\r\n                    defaultValue={this.props.playerDetail.playerName} \r\n                    disabled\r\n                />\r\n                <input \r\n                    key=\"playerFaction\"\r\n                    type=\"text\"\r\n                    defaultValue={this.props.playerDetail.faction} \r\n                    disabled\r\n                />\r\n                {this.getStrategyList()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default StrategySelect;","import React from 'react';\r\nimport './StatusBoard.css';\r\n// import TimerBlock from './TimerBlock';\r\n\r\n\r\nclass StatusBoard extends React.Component {\r\n    render() {\r\n        let playerCards = this.props.players.map((player) => <PlayerCard player={player}/>);\r\n\r\n        return (\r\n            <div>\r\n                <span>\r\n                    {playerCards}\r\n                </span>\r\n                <span>\r\n                    <button type=\"button\" onClick={() => this.props.onEndTurn()}>\r\n                        End Turn\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                        {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                    </button>\r\n                    <button type=\"button\" onClick={() => this.props.onEndRound()}>\r\n                        End Round\r\n                    </button>\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerCard extends React.Component {\r\n    render() {\r\n        let playerColour = this.props.player.colour ? this.props.player.colour.colour : null;\r\n        let playerStrategy = this.props.player.strategy;\r\n        let playerStrategyButton = playerStrategy ? \r\n            <button \r\n                className=\"strategyCardButton\" \r\n                type=\"button\"\r\n                style={{backgroundColor: playerStrategy.colour,}}\r\n            >\r\n                {playerStrategy.number}\r\n            </button> : \r\n            null;\r\n\r\n        return (\r\n            <span className=\"playerCardColumn\">\r\n                <div type=\"button\" className={`currentPlayerBlock${this.props.player.isActivePlayer ? \" activePlayerBlock\" : \"\"}`}>\r\n                    {this.props.player.isActivePlayer ? \"Current Player\" : \"\"}\r\n                </div>\r\n                <div className=\"playerCard\">\r\n                    <div style={{backgroundColor: playerColour,}}>\r\n                        <div>{this.props.player.playerName}</div>\r\n                        <div>{this.props.player.faction}</div>\r\n                    </div>\r\n                    <button className= \"victoryPointButton\" type=\"button\">\r\n                        {this.props.player.victoryPoints}\r\n                    </button>\r\n                    <hr className=\"playerCardDivider\"/>\r\n                    {playerStrategyButton}\r\n                </div>\r\n            </span>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default StatusBoard;","import React from 'react';\r\nimport './TimerBlock.css';\r\n\r\nconst secondsInMinute = 60;\r\nconst secondsInHour = 60 * 60;\r\n\r\nfunction Timer(props) {\r\n    return (\r\n        <button className=\"timer\" onClick={props.onClick}>\r\n            {props.time}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass TimerBlock extends React.Component {\r\n    render() {\r\n        const time = parseTime(this.props.currentSeconds);\r\n\r\n        return (\r\n            <span className=\"Timer\">\r\n                <label className=\"timerLabel\">{this.props.label}</label>\r\n                <Timer time={time} onClick={() => this.props.onClick(this.props.currentSeconds)} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n//-------------------------------------------\r\n\r\nfunction parseTime(totalSeconds) {\r\n    if (!totalSeconds) {\r\n        return \"00:00\";\r\n    }\r\n\r\n    const hours = Math.floor(totalSeconds / secondsInHour);\r\n    const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\r\n    const seconds = totalSeconds % secondsInMinute;\r\n\r\n    var time = hours > 0 ? hours + \":\" : \"\";\r\n    time += (minutes < 10 ? \"0\" + minutes : minutes) + \":\";\r\n    time += seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return time;\r\n}\r\n\r\nexport default TimerBlock;","import React from 'react';\r\nimport PlayerSelect from './PlayerSelect';\r\nimport StrategySelect from './StrategySelect';\r\nimport StatusBoard from './StatusBoard';\r\nimport TimerBlock from './TimerBlock';\r\n\r\nconst MODE_PLAYER_SELECT = 1;\r\nconst MODE_STRATEGY = 2;\r\nconst MODE_STATUS_BOARD = 3;\r\n\r\nclass GameManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            playerDetails: null,\r\n            gameMode: MODE_PLAYER_SELECT,\r\n            roundNumber: 1,\r\n            totalGameTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            currentTurnTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n        };\r\n    }\r\n\r\n    //#region Event Handlers\r\n    handleStartGame(playerDetails) {\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n            gameMode: MODE_STRATEGY,\r\n        });\r\n        \r\n        this.startGameTimer();\r\n    }\r\n\r\n    handlePlayerStrategyChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].strategy = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartRound() {\r\n        this.setState ({\r\n            gameMode: MODE_STATUS_BOARD,\r\n        });\r\n\r\n        this.startGameTimer();\r\n        this.startTurnTimers();\r\n    }\r\n\r\n    handleTurnTimerClicked() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startTurnTimers();\r\n            this.startGameTimer(); //if turn timers are running, the game timer should be as well\r\n        }\r\n    }\r\n\r\n    handleGameTimerClicked() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers(); //if the game timer is stopped, all timers should be stopped\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n        }\r\n    }\r\n\r\n    handleEndRound() {\r\n        let playerDetails = this.state.playerDetails.slice().map(\r\n            player => ({\r\n                ...player, \r\n                strategy: null,\r\n            })\r\n        );\r\n\r\n        this.setState ({\r\n            gameMode: MODE_STRATEGY,\r\n            roundNumber: this.state.roundNumber + 1,\r\n            playerDetails: playerDetails,\r\n        });\r\n\r\n        this.stopTurnTimers(true); //turns aren't occurring between rounds\r\n        this.startGameTimer(); //activity means the game timer should almost certainly be on\r\n    }\r\n\r\n    handleToggleTimers() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n            this.state.gameMode === MODE_STATUS_BOARD && this.startTurnTimers();\r\n        }\r\n    }\r\n\r\n    handleEndTurn() {\r\n        this.restartTurnTimers();\r\n    }\r\n    //#endregion\r\n\r\n    //#region Commands\r\n    recalculateGameTime() {\r\n        let timer = {...this.state.totalGameTimer};\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n        \r\n        this.setState({\r\n            totalGameTimer: timer,\r\n        });\r\n    }\r\n\r\n    recalculateTurnTime() {\r\n        let timer = {...this.state.currentTurnTimer};\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n        });\r\n    }\r\n\r\n    startTurnTimers() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        //TODO: Needs to start the active player turn timer as well\r\n        let timer = {...this.state.currentTurnTimer};\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n        timer.interval = setInterval(() => {this.recalculateTurnTime()}, 1000);\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer\r\n        })\r\n    }\r\n    \r\n    stopTurnTimers(resetCurrentTurn) {\r\n        if (!this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        //TODO: Needs to stop the active player turn timer as well\r\n        let timer = {...this.state.currentTurnTimer};\r\n        timer.isCounting = false;\r\n        if (resetCurrentTurn) {\r\n            timer.baseSeconds = 0;\r\n            timer.currentSeconds = 0;\r\n        }\r\n        else {\r\n            timer.baseSeconds = timer.currentSeconds;\r\n        }\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer\r\n        })\r\n        \r\n        clearInterval(this.state.currentTurnTimer.interval);\r\n    }\r\n\r\n    restartTurnTimers() {\r\n        //TODO needs to stop the ending player's turn timer and start the next one as well\r\n        let timer = {\r\n            baseSeconds: 0,\r\n            currentSeconds: 0,\r\n            countStartTime: Date.now(),\r\n            isCounting: true,\r\n        };\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer\r\n        })\r\n    }\r\n\r\n    startGameTimer() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = {...this.state.totalGameTimer};\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n        timer.interval = setInterval(() => {this.recalculateGameTime()}, 1000);\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n    \r\n    stopGameTimer() {\r\n        if (!this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = {...this.state.totalGameTimer};\r\n        timer.baseSeconds = timer.currentSeconds;\r\n        timer.isCounting = false;\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n        \r\n        clearInterval(this.state.totalGameTimer.interval);\r\n    }\r\n    //#endregion\r\n\r\n    //#region Rendering methods\r\n    renderGameComponent() {\r\n        switch (this.state.gameMode) {\r\n            case MODE_PLAYER_SELECT: \r\n                return this.renderPlayerSelect();\r\n            case MODE_STRATEGY:\r\n                return this.renderStrategy();\r\n            case MODE_STATUS_BOARD:\r\n                return this.renderStatusBoard();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    renderPlayerSelect() {\r\n        return (\r\n            <div>\r\n                <PlayerSelect onStartGame={playerDetails => this.handleStartGame(playerDetails)}/>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderStrategy() {\r\n        return (\r\n            <div>\r\n                {this.renderGameHeader(false)}\r\n                <h1>Strategy Phase</h1>\r\n                <StrategySelect \r\n                    playerDetails={this.state.playerDetails} \r\n                    isGameActive = {this.state.totalGameTimer.isCounting}\r\n                    onToggleTimers = {() => this.handleToggleTimers()}\r\n                    onStartRound={() => this.handleStartRound()}\r\n                    onPlayerStrategyChange={(e, playerNumber) => this.handlePlayerStrategyChange(e, playerNumber)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderStatusBoard() {\r\n        return (\r\n            <div>\r\n                {this.renderGameHeader(true)}\r\n                <h1>Status Board</h1>\r\n                <StatusBoard \r\n                    roundNumber = {this.state.roundNumber}\r\n                    isGameActive = {this.state.totalGameTimer.isCounting}\r\n                    players = {this.state.playerDetails}\r\n                    onEndTurn = {() => this.handleEndTurn()}\r\n                    onToggleTimers = {() => this.handleToggleTimers()}\r\n                    onEndRound = {() => this.handleEndRound()}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderGameHeader(showTurnTimer) {\r\n        return <GameHeader\r\n            roundNumber = {this.state.roundNumber}\r\n            totalGameTimer = {this.state.totalGameTimer}\r\n            showTurnTimer = {showTurnTimer}\r\n            currentTurnTimer = {this.state.currentTurnTimer}\r\n            onTurnTimerClick = {() => this.handleTurnTimerClicked()}\r\n            onGameTimerClick = {() => this.handleGameTimerClicked()}\r\n        />\r\n    }\r\n    //#endregion\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderGameComponent()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction GameHeader(props) {\r\n    let turnTimer = props.showTurnTimer ? \r\n        <TimerBlock\r\n            id=\"turnTimer\"\r\n            label=\"Turn Time\"\r\n            currentSeconds={props.currentTurnTimer.currentSeconds}\r\n            onClick={() => props.onTurnTimerClick()}\r\n        /> :\r\n        null;\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"timerLabel\">{\"Round: \" + props.roundNumber}</label>\r\n            {turnTimer}\r\n            <TimerBlock\r\n                id=\"turnTimer\"\r\n                label=\"Total Game Time\"\r\n                currentSeconds={props.totalGameTimer.currentSeconds}\r\n                onClick={() => props.onGameTimerClick()}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameManager;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport GameManager from './GameManager';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\n// ReactDOM.render(\r\n//     <TimerBlock label=\"Total Time\" baseSeconds={5500} currentSeconds={0} isCounting={true}/>,\r\n//     document.getElementById(\"root\")\r\n//   );\r\n\r\nReactDOM.render(\r\n    <GameManager/>,\r\n    document.getElementById(\"root\")\r\n  );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}