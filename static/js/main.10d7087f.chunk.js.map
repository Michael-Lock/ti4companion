{"version":3,"sources":["PlayerSelect.js","StrategySelect.js","TimerBlock.js","TechPanel.js","StatusBoard.js","PlayAgenda.js","ObjectiveSelectModal.js","ObjectivePanel.js","SpeakerChangeModal.js","GameManager.js","serviceWorker.js","index.js"],"names":["PlayerSelect","props","playerDetails","Array","i","createPlayer","state","selectedNumberOfPlayers","playerNumber","playerName","faction","properties","testMode","faction_store","colour","colour_store","victoryPoints","isSpeaker","isActivePlayer","isPassed","availableVotes","spentVotes","this","setState","playerNumberSelections","fill","e","slice","target","value","JSON","parse","finalPlayerDetails","initialiseTechnologies","onStartGame","map","player","newPlayer","techSets","push","createPlayerTechnologies","tech_store","Biotic","Warfare","Propulsion","Cybernetic","shortName","Ship","Unit","Warsun","techs","techSet","techDefinition","isResearched","selectedFactions","selectedColours","selectedNames","includes","description","determineSelection","Row","Col","xs","xl","span","offset","onClick","playerNumberButtonHandleClick","numberOfPlayers","onPlayerNameChange","handlePlayerNameChange","onPlayerFactionChange","handlePlayerFactionChange","onPlayerColourChange","handlePlayerColourChange","Button","type","disabled","isGameReady","handleStartGame","React","Component","PlayerNumberSelect","isSelected","PlayerNumberButton","selected","renderPlayerNumberButton","className","id","PlayerDetailForm","playerDetailEntries","key","playerDetail","onFactionChange","onColourChange","renderPlayerDetailEntries","PlayerDetailEntry","factionElements","hidden","concat","stringify","fullName","playerFaction","undefined","required","onChange","colourElements","playerColour","defaultValue","getFactionList","getColourList","StrategySelect","onStartRound","onPlayAgenda","selectedStrategyCards","length","strategy","strategyCard","number","onPlayerStrategyChange","onSpeakerButtonClick","variant","onToggleTimers","isGameActive","handlePlayAgenda","isRoundReady","handleStartRound","PlayerStrategyForm","players","speakerIndex","playerStrategyEntries","destinationIndex","onStrategyChange","renderPlayerStrategyEntries","PlayerStrategyEntry","strategyElements","strategy_card_store","name","playerStrategy","getStrategyList","Timer","time","TimerBlock","totalSeconds","hours","Math","floor","minutes","seconds","parseTime","currentSeconds","interactive","label","TechPanel","techSetGroups","TechSetGroup","onTechClick","techButtons","TechButton","tech","text","PlayerCard","playerBackgroundColour","playerTextColour","textColour","playerStrategyButton","style","backgroundColor","isUsed","onStrategyCardClick","speakerButtonColumn","Card","onEndTurn","noGutters","color","onPassButtonClick","playerTimer","onVictoryPointsClick","onContextMenu","EndRoundConfirmModal","Modal","show","showModal","onHide","onCloseModal","centered","Body","Footer","onConfirmModal","StatusBoard","useState","showEndRoundModal","setShowEndRoundModal","sort","a","b","playerCards","playerTimers","isAllPassed","isAllPlayersPassed","ButtonGroup","onEndRound","standardVoteOptions","PlayAgenda","onNextAgenda","onEndAgenda","AgendaForm","selectedAgenda","onAgendaChange","onAvailableVotesClick","playerString","delta","onSpentVotesClick","onVoteTargetChange","handleNextAgenda","handleEndAgenda","votePanel","VotePanel","resultsPanel","ResultsPanel","AgendaSelector","agendaElements","agenda_store","agenda","getAgendaList","AgendaCard","firstVoterIndex","playerVotePanels","PlayerVotePanel","VoteTargetSelector","voteTarget","agendaCardDisplay","electionTarget","forEffect","againstEffect","voteOptions","electionTargetType","getPlanetVoteOptions","voteOption","planets_store","filter","planet","trait","resolutions","existingResolution","j","resolution","votes","votedResolutions","ObjectiveSelectModal","selectedObjectives","objectives","objective","isRevealed","availableObjectives","objective_store","stage","some","selectedObjective","objectiveElements","objectiveSelect","onObjectiveChange","Header","Title","selectedObjectiveSelection","longDescription","ObjectivePanel","objectiveBlocks","ObjectiveCard","order","shortDescription","onObjectiveCardClick","cardDisplay","SpeakerChangeModal","playerList","playerSelect","onSpeakerChange","selectedSpeakerNumber","GameHeader","turnTimer","showTurnTimer","currentTurnTimer","onTurnTimerClick","roundNumber","totalGameTimer","onGameTimerClick","GameManager","gameMode","showObjectiveSelectModal","showSpeakerChangeModal","naaluTelepathicActive","baseSeconds","countStartTime","Date","now","isCounting","publicObjectives","fillPublicObjectives","heartbeat","setInterval","recalculateTimers","clearInterval","naaluTelepathic","startGameTimer","newStrategy","newPlayerDetails","handleSpeakerButtonClicked","lowestInitiative","playerInitiative","startTurnTimers","stopTurnTimers","stopGameTimer","newVictoryPoints","nativeEvent","which","maxVictoryPoints","newAvailableVotes","min","max","newSpentVotes","newVoteTarget","restartTurnTimers","index","nextUnrevealedObjective","newObjective","isConfirmed","newPublicObjectives","newAgenda","newSpeakerNumber","oldSpeaker","newSpeaker","newTechSets","newTechs","newTech","NUMBER_OBJECTIVES_STAGE_ONE","recalculateGameTime","recalculateTurnTime","timer","getActivePlayer","resetCurrentTurn","currentPlayer","currentPlayerTimer","nextPlayer","getNextPlayer","nextPlayerTimer","activePlayer","activePlayerInitiative","initiativeRange","highestInitiativeNumber","playerInitiativeNumber","renderPlayerSelect","renderStrategy","renderStatusBoard","renderAgenda","Container","fluid","renderGameHeader","md","renderObjectivePanel","handleToggleTimers","handlePlayerStrategyChange","handleEndTurn","handleVictoryPointClick","handleStrategyCardClicked","handlePassButtonClicked","handleEndRound","handleTechClicked","handleAgendaChange","handleAvailableVotesClick","handleSpentVotesClick","handleVoteTargetChange","handleTurnTimerClicked","handleGameTimerClicked","handleObjectiveCardClicked","renderGameComponent","handleCloseObjectiveSelectModal","handleObjectiveChange","handleCloseSpeakerChangeModal","handleSpeakerChange","Boolean","window","location","hostname","match","document","oncontextmenu","preventDefault","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.10d7087f.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport './PlayerSelect.css';\r\n\r\nimport faction_store from './data/factions.json';\r\nimport tech_store from './data/technologies.json';\r\nimport properties from './data/properties.json';\r\nimport colour_store from './data/colours.json';\r\n\r\nconst PLAYER_NUMBER_INDEX_OFFSET = 3; //player 3 is array index 0\r\nconst MAX_PLAYER_NUMBER = 6;\r\n\r\nclass PlayerSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let playerDetails = Array(MAX_PLAYER_NUMBER);\r\n        for (let i = 0; i < MAX_PLAYER_NUMBER; i++) {\r\n            playerDetails[i] = this.createPlayer(i);\r\n        }\r\n\r\n        this.state = {\r\n            selectedNumberOfPlayers: MAX_PLAYER_NUMBER,\r\n            playerDetails: playerDetails,\r\n        };\r\n    }\r\n\r\n    createPlayer(playerNumber) {\r\n        let playerDetail = {\r\n            playerName: \"Player \" + (playerNumber + 1),\r\n            playerNumber: playerNumber,\r\n            faction: properties.testMode ? faction_store[playerNumber] : null,\r\n            colour: properties.testMode ? colour_store[playerNumber] : null,\r\n            victoryPoints: 0,\r\n            isSpeaker: playerNumber === 0 ? true : false,\r\n            isActivePlayer: playerNumber === 0 ? true : false,\r\n            isPassed: false,\r\n            availableVotes: 0,\r\n            spentVotes: 0,\r\n        }\r\n        return playerDetail;\r\n    }\r\n\r\n    playerNumberButtonHandleClick(playerNumber) {\r\n        this.setState({\r\n            selectedNumberOfPlayers: playerNumber,\r\n        });\r\n    }\r\n\r\n    determineSelection() {\r\n        let playerNumberSelections = Array(MAX_PLAYER_NUMBER).fill(false);\r\n        if (this.state.selectedNumberOfPlayers !== null) {\r\n            playerNumberSelections[this.state.selectedNumberOfPlayers - PLAYER_NUMBER_INDEX_OFFSET] = true;\r\n        }\r\n\r\n        return playerNumberSelections;\r\n    }\r\n\r\n    handlePlayerNameChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].playerName = e.target.value;\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handlePlayerFactionChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].faction = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n    \r\n    handlePlayerColourChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].colour = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartGame() {\r\n        let finalPlayerDetails = this.state.playerDetails.slice(0, this.state.selectedNumberOfPlayers)\r\n        finalPlayerDetails = this.initialiseTechnologies(finalPlayerDetails);\r\n\r\n        return this.props.onStartGame(finalPlayerDetails);\r\n    }\r\n\r\n    initialiseTechnologies(finalPlayerDetails) {\r\n        let playerDetails = finalPlayerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            let techSets = [];\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Biotic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Warfare));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Propulsion));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Cybernetic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store[newPlayer.faction.shortName]));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Ship));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Unit));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Warsun));\r\n            newPlayer.techs = techSets;\r\n            return newPlayer;\r\n        });\r\n\r\n        return playerDetails;\r\n    }\r\n\r\n    createPlayerTechnologies(techSet) {\r\n        let playerTechs = techSet.map((techDefinition) => {\r\n            return {\r\n                techDefinition: techDefinition,\r\n                isResearched: false,\r\n            };\r\n        });\r\n\r\n        return playerTechs;\r\n    }\r\n\r\n    isGameReady() {\r\n        if (!this.state.selectedNumberOfPlayers) {\r\n            return true;\r\n        }\r\n        \r\n        let selectedFactions = [];\r\n        let selectedColours = [];\r\n        let selectedNames = [];\r\n        for (let i = 0; i < this.state.selectedNumberOfPlayers; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.faction || !player.colour || !player.playerName ||\r\n                    selectedColours.includes(player.colour.description) ||\r\n                    selectedFactions.includes(player.faction.shortName) || \r\n                    selectedNames.includes(player.playerName)) {\r\n                return true;\r\n            }\r\n            selectedFactions[i] = player.faction.shortName;\r\n            selectedColours[i] = player.colour.description;\r\n            selectedNames[i] = player.playerName;\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const playerNumberSelections = this.determineSelection();\r\n\r\n        return (\r\n            <Row>\r\n                <Col xs={12} xl={{span: 8, offset: 2}}> \r\n                    <div>\r\n                        <h1>Number of Players</h1>\r\n                        <PlayerNumberSelect \r\n                            playerNumberSelections={playerNumberSelections}\r\n                            onClick={playerNumber => this.playerNumberButtonHandleClick(playerNumber)}\r\n                        />\r\n                    </div>\r\n                    <form>\r\n                        <PlayerDetailForm \r\n                            numberOfPlayers={this.state.selectedNumberOfPlayers} \r\n                            playerDetails={this.state.playerDetails}\r\n                            onPlayerNameChange={(e, playerNumber) => this.handlePlayerNameChange(e, playerNumber)}\r\n                            onPlayerFactionChange={(e, playerNumber) => this.handlePlayerFactionChange(e, playerNumber)}\r\n                            onPlayerColourChange={(e, playerNumber) => this.handlePlayerColourChange(e, playerNumber)}\r\n                        />\r\n                        <Button type=\"button\" disabled= {this.isGameReady()} onClick={() => this.handleStartGame()}>\r\n                            Start Game\r\n                        </Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerNumberSelect extends React.Component {\r\n    renderPlayerNumberButton(playerNumber) {\r\n        const isSelected = this.props.playerNumberSelections[playerNumber - PLAYER_NUMBER_INDEX_OFFSET];\r\n\r\n        return (\r\n            <PlayerNumberButton\r\n                value={playerNumber}\r\n                selected={isSelected}\r\n                onClick={() => this.props.onClick(playerNumber)}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                { this.renderPlayerNumberButton(3) }\r\n                { this.renderPlayerNumberButton(4) }\r\n                { this.renderPlayerNumberButton(5) }\r\n                { this.renderPlayerNumberButton(6) }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerNumberButton(props) {\r\n    return (\r\n        <button \r\n            className={`playerNumButton ${props.selected ? \"selectedPlayerNumButton\" : \"\"}`} \r\n            id={`${props.value}Player`} \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nclass PlayerDetailForm extends React.Component {\r\n    renderPlayerDetailEntries() {\r\n        let playerDetailEntries = Array(this.props.numberOfPlayers);\r\n        for (let i = 0; i < this.props.numberOfPlayers; i++) {\r\n            playerDetailEntries[i] = <PlayerDetailEntry \r\n                key={i}\r\n                playerDetail={this.props.playerDetails[i]}\r\n                onPlayerNameChange={e => this.props.onPlayerNameChange(e, i)}\r\n                onFactionChange={e => this.props.onPlayerFactionChange(e, i)}\r\n                onColourChange={e => this.props.onPlayerColourChange(e, i)}\r\n            />;\r\n        }\r\n\r\n        return (<div>\r\n            {playerDetailEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerDetailEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerDetailEntry extends React.Component {\r\n    getFactionList() {\r\n        let factionElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        factionElements = factionElements.concat(faction_store.map((faction) => \r\n            <option key={faction.shortName} value={JSON.stringify(faction)}>\r\n                {faction.fullName}\r\n            </option>));\r\n\r\n        let playerFaction = this.props.playerDetail.faction ? JSON.stringify(this.props.playerDetail.faction) : undefined;\r\n\r\n        return <select \r\n            id=\"factions\" \r\n            required \r\n            value={playerFaction}\r\n            onChange={this.props.onFactionChange}\r\n        >\r\n            {factionElements}\r\n        </select>;\r\n    }\r\n\r\n    getColourList() {\r\n        let colourElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        colourElements = colourElements.concat(colour_store.map((colour) => \r\n            <option key={colour.description} value={JSON.stringify(colour)}>\r\n                {colour.description}\r\n            </option>));\r\n\r\n        let playerColour = this.props.playerDetail.colour ? JSON.stringify(this.props.playerDetail.colour) : undefined;\r\n\r\n        return <select \r\n            id=\"colours\" \r\n            required \r\n            defaultValue={playerColour} \r\n            onChange={this.props.onColourChange}\r\n        >\r\n            {colourElements}\r\n        </select>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={{span: 2, offset: 0}} xl={{span: 1, offset: 1}}>\r\n                    <button className={`speakerToken ${this.props.playerDetail.isSpeaker ? \"\" : \"invisible\"} disabled`}/>\r\n                </Col>\r\n                <Col xs={4}>\r\n                    <input \r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.playerName} \r\n                        onChange={this.props.onPlayerNameChange}\r\n                    />\r\n                </Col>\r\n                <Col xs={4}>\r\n                    {this.getFactionList()}\r\n                </Col>\r\n                <Col xs={2}>\r\n                    {this.getColourList()}\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerSelect;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport strategy_card_store from './data/strategy-cards.json';\r\n\r\nclass StrategySelect extends React.Component {\r\n    handleStartRound() {\r\n        if (this.props.onStartRound) {\r\n            return () => this.props.onStartRound()\r\n        }\r\n    }\r\n\r\n    handlePlayAgenda() {\r\n        if (this.props.onPlayAgenda) {\r\n            return () => this.props.onPlayAgenda()\r\n        }\r\n    }\r\n\r\n    isRoundReady() {\r\n        let selectedStrategyCards = [];\r\n        for (let i = 0; i < this.props.playerDetails.length; i++) {\r\n            let player = this.props.playerDetails[i];\r\n            if (!player.strategy || \r\n                    selectedStrategyCards.includes(player.strategy.strategyCard.number)) {\r\n                return true;\r\n            }\r\n            selectedStrategyCards[i] = player.strategy.strategyCard.number;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {/*TODO: add strategy cards */}\r\n                </Row>\r\n                <Row>\r\n                    <PlayerStrategyForm\r\n                        playerDetails={this.props.playerDetails}\r\n                        onPlayerStrategyChange={(e, playerNumber) => this.props.onPlayerStrategyChange(e, playerNumber)}\r\n                        onSpeakerButtonClick={this.props.onSpeakerButtonClick}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button variant=\"light\" type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                            {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handlePlayAgenda()}>\r\n                            Play Agenda\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" disabled={this.isRoundReady()} onClick={this.handleStartRound()}>\r\n                            Start Round\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyForm extends React.Component {\r\n    renderPlayerStrategyEntries() {\r\n        const players = this.props.playerDetails.slice();\r\n        var speakerIndex = 0;\r\n        for (let i = 0; i < players.length; i++) {\r\n            speakerIndex = players[i].isSpeaker ? i : speakerIndex;\r\n        }\r\n\r\n        let playerStrategyEntries = Array(players.length).fill(null);\r\n        for (let i = 0; i < players.length; i++) {\r\n            let destinationIndex = (((i - speakerIndex) % players.length) + players.length) % players.length;\r\n            playerStrategyEntries[destinationIndex] =\r\n                <PlayerStrategyEntry\r\n                    key={players[i].playerNumber}\r\n                    playerDetail={players[i]}\r\n                    onStrategyChange={e => this.props.onPlayerStrategyChange(e, players[i].playerNumber)}\r\n                    onSpeakerButtonClick={this.props.onSpeakerButtonClick}\r\n                />\r\n        }\r\n            \r\n        return (<Col>\r\n            {playerStrategyEntries}\r\n        </Col>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.renderPlayerStrategyEntries()\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyEntry extends React.Component {\r\n    getStrategyList() {\r\n        let strategyElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        strategyElements = strategyElements.concat(strategy_card_store.map((strategy) => \r\n            <option key={strategy.name} value={JSON.stringify(strategy)}>\r\n                {strategy.name}\r\n            </option>));\r\n\r\n        let playerStrategy = this.props.playerDetail.strategy ? JSON.stringify(this.props.playerDetail.strategy.strategyCard) : undefined;\r\n\r\n        return <select \r\n            id=\"strategies\" \r\n            required \r\n            value={playerStrategy} \r\n            onChange={this.props.onStrategyChange}\r\n        >\r\n            {strategyElements}\r\n        </select>;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={2} xl={1}>\r\n                    <button \r\n                        className={`speakerToken ${this.props.playerDetail.isSpeaker ? \"\" : \"invisible\"}`}\r\n                        onClick={this.props.onSpeakerButtonClick} \r\n                    />\r\n                </Col>\r\n                <Col xs={10} xl={11}>\r\n                    <input\r\n                        key=\"playerName\"\r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.playerName}\r\n                        disabled\r\n                    />\r\n                {/* </Col> */}\r\n                {/* <Col xs={3}> */}\r\n                    <input\r\n                        key=\"playerFaction\"\r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.faction && this.props.playerDetail.faction.fullName}\r\n                        disabled\r\n                    />\r\n                {/* </Col> */}\r\n                {/* <Col xs={4}> */}\r\n                    {this.getStrategyList()}\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default StrategySelect;","import React from 'react';\r\nimport './TimerBlock.css';\r\n\r\nconst secondsInMinute = 60;\r\nconst secondsInHour = 60 * 60;\r\n\r\nfunction Timer(props) {\r\n    return (\r\n        <button className=\"timer\" onClick={props.onClick} disabled={props.disabled}>\r\n            {props.time}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass TimerBlock extends React.Component {\r\n    render() {\r\n        const time = parseTime(this.props.currentSeconds);\r\n\r\n        let interactive = this.props.onClick;\r\n\r\n        return (\r\n            <span className=\"Timer\">\r\n                <label className=\"timerLabel\">{this.props.label}</label>\r\n                <Timer time={time} disabled={this.props.disabled} onClick={interactive ? () => this.props.onClick(this.props.currentSeconds) : null} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n//-------------------------------------------\r\n\r\nfunction parseTime(totalSeconds) {\r\n    if (!totalSeconds) {\r\n        return \"00:00\";\r\n    }\r\n\r\n    const hours = Math.floor(totalSeconds / secondsInHour);\r\n    const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\r\n    const seconds = totalSeconds % secondsInMinute;\r\n\r\n    var time = hours > 0 ? hours + \":\" : \"\";\r\n    time += (minutes < 10 ? \"0\" + minutes : minutes) + \":\";\r\n    time += seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return time;\r\n}\r\n\r\nexport default TimerBlock;","import React from 'react';\r\nimport {Row, Col} from 'react-bootstrap'\r\n\r\nimport './TechPanel.css';\r\n\r\n\r\nexport default function TechPanel(props) {\r\n    let techSetGroups = [];\r\n    for (let i = 0; i < props.techs.length; i++) {\r\n        techSetGroups[i] = <TechSetGroup \r\n            key={i} \r\n            techSet={props.techs[i]} \r\n            className=\"techSetGroup\" \r\n            onTechClick={(techDefinition) => props.onTechClick(techDefinition)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        techSetGroups\r\n    );\r\n}\r\n\r\n\r\nfunction TechSetGroup(props) {\r\n    let techButtons = [];\r\n    for (let i = 0; i < props.techSet.length; i++) {\r\n        let span = 12 / props.techSet.length;\r\n        techButtons[i] = \r\n            <Col key={i} xs={span}>\r\n                <TechButton \r\n                    key={props.techSet[i].techDefinition.name} \r\n                    tech={props.techSet[i]} \r\n                    onTechClick={() => props.onTechClick(props.techSet[i].techDefinition)} \r\n                />\r\n            </Col>\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {techButtons}\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction TechButton(props) {\r\n    return (\r\n        <button \r\n            className={`rounded techButton ${props.tech.techDefinition.type} ${props.tech.isResearched ? \"researched\" : \"\"} `}\r\n            onClick={props.onTechClick}\r\n        >\r\n            {props.tech.techDefinition.text}\r\n        </button> \r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport TimerBlock from './TimerBlock';\r\nimport Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport {Row, Col} from 'react-bootstrap'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nimport './StatusBoard.css';\r\nimport TechPanel from './TechPanel';\r\n\r\nconst USED_STRATEGY_COLOUR = \"grey\";\r\n\r\nfunction StatusBoard(props) {\r\n    const [showEndRoundModal, setShowEndRoundModal] = useState(false);\r\n\r\n    let players = props.players.slice();\r\n    players.sort((a, b) => a.strategy.strategyCard.number - b.strategy.strategyCard.number);\r\n\r\n    let playerCards = players.map(\r\n        (player) => \r\n        <Col key={player.playerNumber}>\r\n            <PlayerCard \r\n                key={player.playerNumber} \r\n                player={player}\r\n                playerTimer={props.playerTimers[player.playerNumber]}\r\n                onEndTurn={() => props.onEndTurn()}\r\n                onVictoryPointsClick={e => props.onVictoryPointsClick(e, JSON.stringify(player))}\r\n                onStrategyCardClick={() => props.onStrategyCardClick(JSON.stringify(player))}\r\n                onPassButtonClick={() => props.onPassButtonClick(JSON.stringify(player))}\r\n                onTechClick={(techDefinition) => props.onTechClick(techDefinition, player)}\r\n                onSpeakerButtonClick={props.onSpeakerButtonClick}\r\n            />\r\n        </Col>\r\n    );\r\n\r\n    const isAllPassed = isAllPlayersPassed(players);\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n            <Row>\r\n                {playerCards}\r\n            </Row>\r\n            <Row>\r\n                <Col xs={{span:2, offset:1}}>\r\n                    <Button variant=\"light\" type=\"button\" onClick={() => props.onToggleTimers()}>\r\n                        {props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                    </Button>\r\n                </Col>\r\n                <Col xs={{span:3, offset:6}}>\r\n                    <ButtonGroup>\r\n                        <Button type=\"button\" disabled={isAllPassed} onClick={() => props.onEndTurn()}>\r\n                            End Turn\r\n                        </Button>\r\n                        <Button type=\"button\" disabled={!isAllPassed} onClick={() => setShowEndRoundModal(true)}>\r\n                            End Round\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n            <EndRoundConfirmModal \r\n                showModal={showEndRoundModal}\r\n                onConfirmModal={() => props.onEndRound()}\r\n                onCloseModal={() => setShowEndRoundModal(false)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction PlayerCard(props) {\r\n    const player = props.player;\r\n    let playerBackgroundColour = player.colour ? player.colour.colour : null;\r\n    let playerTextColour = player.colour ? player.colour.textColour : null;\r\n    let playerStrategy = player.strategy;\r\n    let playerStrategyButton = playerStrategy ? \r\n        <button \r\n            className=\"strategyCardButton\" \r\n            type=\"button\"\r\n            style={{backgroundColor: playerStrategy.isUsed ? USED_STRATEGY_COLOUR : playerStrategy.strategyCard.colour,}}\r\n            onClick={props.onStrategyCardClick}\r\n        >\r\n            {playerStrategy.strategyCard.number}\r\n        </button> : \r\n        null;\r\n\r\n    let speakerButtonColumn = player.isSpeaker ? \r\n        <Col>\r\n            <button\r\n                className=\"speakerToken\"\r\n                onClick={props.onSpeakerButtonClick}\r\n            />\r\n        </Col> :\r\n        null;\r\n\r\n    return (\r\n        <Card className=\"border-0\">\r\n            <h6 \r\n                className={`rounded currentPlayerBlock ${player.isActivePlayer ? \"activePlayerBlock\" : player.isPassed ? \"passedPlayerBlock\" : \"\"}`}\r\n                onClick={props.onEndTurn}\r\n            >\r\n                {player.isActivePlayer ? \"Current Player\" : player.isPassed ? \"Passed\" : \"\"}\r\n            </h6>\r\n            <Card className=\"playerCard\">\r\n                <Row noGutters style={{ \r\n                    backgroundColor: playerBackgroundColour, \r\n                    color: playerTextColour,\r\n                }}>\r\n                    <Col xs={2}>\r\n                        {/* TODO: Add faction icon */}\r\n                    </Col>\r\n                    <Col>\r\n                        <div>{player.playerName}</div>\r\n                        <div>{player.faction && player.faction.shortName}</div>\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                        <button \r\n                            className={\r\n                                `rounded passButton \r\n                                ${!player.strategy.isUsed ? \"invisible\" : \r\n                                player.isPassed ? \"passButtonPassed\" : \"\"}`\r\n                            }\r\n                            onClick={props.onPassButtonClick}\r\n                            disabled={!player.strategy.isUsed}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <TimerBlock currentSeconds={props.playerTimer.currentSeconds} disabled={true} />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        <button\r\n                            className=\"victoryPointButton\"\r\n                            type=\"button\"\r\n                            onClick={props.onVictoryPointsClick}\r\n                            onContextMenu={props.onVictoryPointsClick}\r\n                        >\r\n                            {player.victoryPoints}\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        {playerStrategyButton}\r\n                    </Col>\r\n                    {speakerButtonColumn}\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n            <TechPanel techs={player.techs} onTechClick={(techDefinition) => props.onTechClick(techDefinition)}/>\r\n            </Card>\r\n        </Card>\r\n    )\r\n}\r\n\r\nfunction EndRoundConfirmModal(props) {\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Body>\r\n                <h3>End the round?</h3>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default StatusBoard;\r\n\r\n//#region functions\r\n\r\nfunction isAllPlayersPassed(players) {\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (!players[i].isPassed) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n//#endregion\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col, ButtonGroup} from 'react-bootstrap';\r\n\r\nimport './PlayAgenda.css';\r\n\r\nimport agenda_store from './data/agendas.json';\r\nimport planets_store from './data/planets.json';\r\n\r\nconst ELECTION_TARGET_PLAYER = \"Player\";\r\nconst ELECTION_TARGET_PLANET = \"Planet\";\r\nconst ELECTION_TARGET_HAZARDOUS = \"Hazardous\";\r\nconst ELECTION_TARGET_CULTURAL = \"Cultural\";\r\nconst ELECTION_TARGET_INDUSTRIAL = \"Industrial\";\r\n\r\nconst standardVoteOptions = [\r\n    \"For\",\r\n    \"Against\"\r\n]\r\n\r\nclass PlayAgenda extends React.Component {\r\n    handleNextAgenda() {\r\n        if (this.props.onNextAgenda) {\r\n            return () => this.props.onNextAgenda()\r\n        }\r\n    }\r\n\r\n    handleEndAgenda() {\r\n        if (this.props.onEndAgenda) {\r\n            return () => this.props.onEndAgenda()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <AgendaForm\r\n                        selectedAgenda={this.props.selectedAgenda}\r\n                        onAgendaChange={this.props.onAgendaChange}\r\n                        playerDetails={this.props.playerDetails}\r\n                        onAvailableVotesClick={(e, playerString, delta) => this.props.onAvailableVotesClick(e, playerString, delta)}\r\n                        onSpentVotesClick={(e, playerString, delta) => this.props.onSpentVotesClick(e, playerString, delta)}\r\n                        onVoteTargetChange={(e, playerString) => this.props.onVoteTargetChange(e, playerString)}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handleNextAgenda()}>\r\n                            Next Agenda\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handleEndAgenda()}>\r\n                            End Agenda Phase\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction AgendaForm(props) {\r\n    let votePanel = props.selectedAgenda ? \r\n    <VotePanel\r\n        playerDetails={props.playerDetails}\r\n        selectedAgenda={props.selectedAgenda}\r\n        onAvailableVotesClick={(e, playerString, delta) => props.onAvailableVotesClick(e, playerString, delta)}\r\n        onSpentVotesClick={(e, playerString, delta) => props.onSpentVotesClick(e, playerString, delta)}\r\n        onVoteTargetChange={(e, playerString) => props.onVoteTargetChange(e, playerString)}\r\n    />\r\n    : null\r\n\r\n    let resultsPanel = props.selectedAgenda ? \r\n    <ResultsPanel\r\n        playerDetails={props.playerDetails}\r\n    />\r\n    : null\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <AgendaSelector\r\n                    selectedAgenda={props.selectedAgenda}\r\n                    onAgendaChange={props.onAgendaChange}\r\n                />\r\n            </Row>\r\n            <Row>\r\n                {votePanel}\r\n            </Row>\r\n            <Row>\r\n                {resultsPanel}\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass AgendaSelector extends React.Component {\r\n    getAgendaList() {\r\n        let agendaElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        agendaElements = agendaElements.concat(agenda_store.map((agenda) => \r\n            <option key={agenda.name} value={JSON.stringify(agenda)}>\r\n                {agenda.name}\r\n            </option>));\r\n\r\n        let selectedAgenda = this.props.selectedAgenda ? JSON.stringify(this.props.selectedAgenda) : undefined;\r\n\r\n        return <select \r\n            className=\"agendaName\"\r\n            id=\"agendas\" \r\n            required \r\n            defaultValue={selectedAgenda} \r\n            onChange={this.props.onAgendaChange}\r\n        >\r\n            {agendaElements}\r\n        </select>;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"agendaCard\">\r\n                <Row>\r\n                    {this.getAgendaList()}\r\n                </Row>\r\n                <Row>\r\n                    <AgendaCard\r\n                        agenda={this.props.selectedAgenda}\r\n                    />\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction VotePanel(props) {\r\n    const players = props.playerDetails.slice();\r\n    //First voter should be the player immediately after the speaker\r\n    var firstVoterIndex = 0;\r\n    for (let i = 0; i < players.length; i++) {\r\n        firstVoterIndex = players[i].isSpeaker ? (i + 1 % players.length) : firstVoterIndex;\r\n    }\r\n\r\n    let playerVotePanels = Array(players.length).fill(null);\r\n    for (let i = 0; i < players.length; i++) {\r\n        let destinationIndex = (((i - firstVoterIndex) % players.length) + players.length) % players.length;\r\n        playerVotePanels[destinationIndex] =\r\n        <PlayerVotePanel\r\n            key={i}\r\n            player={players[i]}\r\n            players={players}\r\n            selectedAgenda={props.selectedAgenda}\r\n            onAvailableVotesClick={(e, playerString, delta) => props.onAvailableVotesClick(e, playerString, delta)}\r\n            onSpentVotesClick={(e, playerString, delta) => props.onSpentVotesClick(e, playerString, delta)}\r\n            onVoteTargetChange={(e, playerString) => props.onVoteTargetChange(e, playerString)}\r\n        />\r\n    }\r\n        \r\n    return (\r\n        <Col>\r\n            <Row>\r\n                <Col xs={2} xl={1}/>\r\n                <Col xs={4} xl={3}/>\r\n                <Col xs={2} xl={2}>\r\n                    <p className=\"columnHeader\">\r\n                        Available\r\n                    </p>\r\n                </Col>\r\n                <Col xs={2} xl={2}>\r\n                    <p className=\"columnHeader\">\r\n                        Assigned\r\n                    </p>\r\n                </Col>\r\n            </Row>\r\n            {playerVotePanels}\r\n        </Col>\r\n    );\r\n}\r\n\r\nfunction PlayerVotePanel(props) {\r\n        \r\n    \r\n    return (\r\n        <Row>\r\n            <Col xs={2} xl={1}>\r\n                <button \r\n                    className={`speakerToken ${props.player.isSpeaker ? \"\" : \"invisible\"}`}\r\n                />\r\n            </Col>\r\n            <Col xs={4} xl={3}>\r\n                <input\r\n                    key=\"playerName\"\r\n                    type=\"text\"\r\n                    defaultValue={props.player.playerName}\r\n                    disabled\r\n                />\r\n            </Col>\r\n            <Col xs={2} xl={2}>\r\n                <ButtonGroup>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"tens\" \r\n                        className=\"digitButton tens\"\r\n                        onClick={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 10)}\r\n                        onContextMenu={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 10)}\r\n                    >\r\n                        {props.player.availableVotes >= 10 ? Math.floor(props.player.availableVotes / 10) : \"\"}\r\n                    </Button>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"ones\" \r\n                        className=\"digitButton ones\"\r\n                        onClick={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 1)}\r\n                        onContextMenu={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 1)}\r\n                    >\r\n                        {props.player.availableVotes % 10}\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n            <Col xs={2} xl={2}>\r\n                <ButtonGroup>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"tens\" \r\n                        className=\"digitButton tens\"\r\n                        onClick={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 10)}\r\n                        onContextMenu={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 10)}\r\n                    >\r\n                        {props.player.spentVotes >= 10 ? Math.floor(props.player.spentVotes / 10) : \"\"}\r\n                    </Button>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"ones\" \r\n                        className=\"digitButton ones\"\r\n                        onClick={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 1)}\r\n                        onContextMenu={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 1)}\r\n                    >\r\n                        {props.player.spentVotes % 10}\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n            <Col>\r\n                <VoteTargetSelector\r\n                    voteTarget={props.player.voteTarget}\r\n                    selectedAgenda={props.selectedAgenda}\r\n                    onVoteTargetChange={e => props.onVoteTargetChange(e, JSON.stringify(props.player))}\r\n                    players={props.players}\r\n                />\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction AgendaCard(props) {\r\n    let agenda = props.agenda;\r\n    let agendaCardDisplay = <div/>\r\n    if (agenda) {\r\n        agendaCardDisplay = <div className=\"agendaCardDisplay\">\r\n            <p className=\"agendaType\">\r\n                {agenda.type}\r\n            </p>\r\n            <p className=\"agendaElectionTarget\">\r\n                {agenda.electionTarget ? \"Elect \" + agenda.electionTarget : null}\r\n            </p>\r\n            <p className=\"agendaEffect\">\r\n                <b>\r\n                    {!agenda.electionTarget && \"For: \"}\r\n                </b>\r\n                {agenda.forEffect}\r\n            </p>\r\n            <p className=\"agendaEffect\">\r\n                <b>\r\n                    {!agenda.electionTarget && \"Against: \"}\r\n                </b>\r\n                {agenda.electionTarget ? \"\" : agenda.againstEffect ? agenda.againstEffect : \"No effect\"}\r\n            </p>\r\n        </div>\r\n    }\r\n    \r\n    return (\r\n        agendaCardDisplay\r\n    );\r\n}\r\n\r\nfunction VoteTargetSelector(props) {\r\n    let voteOptions = [\r\n        <option key=\"unselected\" value={null}/>,\r\n        <option key=\"Abstain\" value={\"Abstain\"}>\r\n            --Abstain\r\n        </option>\r\n    ]\r\n\r\n    if (props.selectedAgenda) {\r\n        switch (props.selectedAgenda.electionTargetType) {\r\n            case ELECTION_TARGET_PLAYER:\r\n                voteOptions = voteOptions.concat(getPlayerVoteOptions(props.players));\r\n                break;\r\n            case ELECTION_TARGET_PLANET:\r\n                voteOptions = voteOptions.concat(getPlanetVoteOptions());\r\n                break;\r\n            case ELECTION_TARGET_HAZARDOUS:\r\n            case ELECTION_TARGET_CULTURAL:\r\n            case ELECTION_TARGET_INDUSTRIAL:\r\n                voteOptions = voteOptions.concat(getPlanetVoteOptions(props.selectedAgenda.electionTargetType));\r\n                break;\r\n            default:\r\n                voteOptions = voteOptions.concat(getStandardVoteOptions());\r\n                break;\r\n        }\r\n    }\r\n\r\n    return <select \r\n        className=\"voteTargetSelector\"\r\n        required \r\n        defaultValue={props.voteTarget} \r\n        onChange={props.onVoteTargetChange}\r\n    >\r\n        {voteOptions}\r\n    </select>;\r\n}\r\n\r\nfunction getStandardVoteOptions() {\r\n    return standardVoteOptions.map((voteOption) => \r\n        <option key={voteOption} value={voteOption}>\r\n            {voteOption}\r\n        </option>);\r\n}\r\n\r\nfunction getPlayerVoteOptions(players) {\r\n    return players.map((player) => \r\n        <option key={player.playerName} value={player.playerName}>\r\n            {player.playerName}\r\n        </option>);\r\n}\r\n\r\nfunction getPlanetVoteOptions(electionTargetType) {\r\n    let planets = electionTargetType ? planets_store.filter((planet) => planet.trait === electionTargetType) : planets_store;\r\n\r\n    return planets.map((planet) => \r\n    <option key={planet.name} value={planet.name}>\r\n        {planet.name}\r\n    </option>);\r\n}\r\n\r\nfunction ResultsPanel(props) {\r\n    let players = props.playerDetails;\r\n    let resolutions = [];\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (players[i].voteTarget && players[i].spentVotes > 0) {\r\n            let existingResolution = null;\r\n            for (let j = 0; j < resolutions.length; j++) {\r\n                if (resolutions[j].resolution === players[i].voteTarget) {\r\n                    existingResolution = j;\r\n                }\r\n            }\r\n            if (existingResolution >= 0 && resolutions[existingResolution]) {\r\n                resolutions[existingResolution] = {\r\n                    resolution: resolutions[existingResolution].resolution,\r\n                    votes: resolutions[existingResolution].votes + players[i].spentVotes,\r\n                }\r\n            }\r\n            else {\r\n                resolutions.push({\r\n                    resolution: players[i].voteTarget, \r\n                    votes: players[i].spentVotes,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let votedResolutions = null;\r\n    if (resolutions.length > 0) {\r\n        resolutions.sort((a,b) => b.votes - a.votes);\r\n        votedResolutions = [];\r\n        for (let i = 0; i < resolutions.length; i++) {\r\n            votedResolutions.push(\r\n                <p className=\"votedResolution\" key={i}>\r\n                    {resolutions[i].resolution} - {resolutions[i].votes} votes\r\n                </p>\r\n            ); \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {votedResolutions}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayAgenda;","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport objective_store from './data/objectives.json';\r\n\r\nexport default function ObjectiveSelectModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let selectedObjectives = props.objectives.map((objective) => objective.isRevealed ? objective : null);\r\n    selectedObjectives = selectedObjectives.filter((objective) => objective !== null);\r\n\r\n    let availableObjectives = objective_store.filter((objective) => objective.stage === props.stage);\r\n    availableObjectives = availableObjectives.filter(\r\n        (objective) => !selectedObjectives.some(\r\n            function (selectedObjective) {\r\n                return objective.id === selectedObjective.id;\r\n            }\r\n       )\r\n    );\r\n\r\n    let objectiveElements = Array(1);\r\n    objectiveElements[0] = <option key=\"unselected\" className=\"nullOption\" value={null} hidden/>\r\n    objectiveElements = objectiveElements.concat(availableObjectives.map(\r\n        (objective) => <option key={objective.id} value={JSON.stringify(objective)}>\r\n            {objective.name}\r\n        </option>));\r\n    \r\n    let objectiveSelect = <select id=\"objectives\" required onChange={props.onObjectiveChange}>\r\n        {objectiveElements}\r\n    </select>;\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>Select Public Objective</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {objectiveSelect}\r\n                </div>\r\n                <div className=\"d-flex flex-column\">\r\n                    <br/>\r\n                    <p className=\"objectiveLongDescription\">\r\n                        {props.selectedObjectiveSelection ? props.selectedObjectiveSelection.longDescription : \"\"}\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedObjectiveSelection}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function ObjectivePanel(props) {\r\n    let objectiveBlocks = Array(props.objectives.length);\r\n\r\n    for (let i = 0; i < props.objectives.length; i++) {\r\n        const objective = props.objectives[i];\r\n        objectiveBlocks[i] = <ObjectiveCard \r\n            key={objective.order} \r\n            name={objective.name} \r\n            stage={objective.stage} \r\n            shortDescription={objective.shortDescription} \r\n            isRevealed={objective.isRevealed} \r\n            onObjectiveCardClick={() => props.onObjectiveCardClick(i)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {objectiveBlocks}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction ObjectiveCard(props) {\r\n    let cardDisplay = props.isRevealed ? props.shortDescription : props.stage;\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                type=\"button\" \r\n                className={`objectiveCard stage${props.stage} ${props.isRevealed ? \"revealed\" : \"\"}`} \r\n                onClick={props.onObjectiveCardClick}\r\n            >\r\n                {cardDisplay}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function SpeakerChangeModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let playerList = [<option key=\"unselected\" value={null} hidden/>];\r\n    for (let i = 0; i < props.playerDetails.length; i++) {\r\n        let player = props.playerDetails[i];\r\n        if (!player.isSpeaker) {\r\n            playerList.push(\r\n                <option key={player.playerNumber} value={player.playerNumber}>\r\n                    {player.playerName + \" - \" + player.faction.shortName}\r\n                </option>\r\n            );\r\n        }\r\n    }\r\n    let playerSelect = <select id=\"speakerCandidates\" required onChange={props.onSpeakerChange}>\r\n        {playerList}\r\n    </select>\r\n\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>Select New Speaker</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {playerSelect}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedSpeakerNumber}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PlayerSelect from './PlayerSelect';\r\nimport StrategySelect from './StrategySelect';\r\nimport StatusBoard from './StatusBoard';\r\nimport PlayAgenda from './PlayAgenda';\r\nimport TimerBlock from './TimerBlock';\r\nimport ObjectiveSelectModal from './ObjectiveSelectModal';\r\nimport ObjectivePanel from './ObjectivePanel';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport SpeakerChangeModal from './SpeakerChangeModal';\r\n\r\nimport './GameManager.css';\r\n\r\nconst MODE_PLAYER_SELECT = 1;\r\nconst MODE_STRATEGY = 2;\r\nconst MODE_STATUS_BOARD = 3;\r\nconst MODE_AGENDA = 4;\r\n\r\nconst NUMBER_STRATEGIES = 8;\r\nconst NUMBER_OBJECTIVES_STAGE_ONE = 5;\r\nconst NUMBER_OBJECTIVES_STAGE_TWO = 5;\r\n\r\nconst POLITICS_CARD_NUMBER = 3;\r\n\r\nconst LEFT_CLICK = 1; //native event constant for a left click\r\nconst RIGHT_CLICK = 3; //native event constant for the opening of the context menu (i.e. right click)\r\n\r\n\r\nclass GameManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //View controls\r\n            gameMode: MODE_PLAYER_SELECT,\r\n            showObjectiveSelectModal: false,\r\n            showSpeakerChangeModal: false,\r\n\r\n            //Temporary State\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null, //used for the objective select modal to record the current selection\r\n            selectedSpeakerNumber: null, //used for the speaker select modal to record the player selected\r\n            selectedAgenda: null,\r\n\r\n            //Game Details\r\n            playerDetails: null,\r\n            playerTimers: null,\r\n            roundNumber: 1,\r\n            naaluTelepathicActive: false,\r\n            totalGameTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            currentTurnTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            publicObjectives: this.fillPublicObjectives(),\r\n        };\r\n    }\r\n\r\n    //#region Lifecycle\r\n    componentDidMount() {\r\n        this.heartbeat = setInterval(() => this.recalculateTimers(), 500);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.heartbeat);\r\n    }\r\n    //#endregion\r\n\r\n    //#region Event Handlers\r\n    handleStartGame(playerDetails) {\r\n        let playerTimers = Array(playerDetails.length);\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            playerTimers[i] = {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            }\r\n        }\r\n\r\n        let naaluTelepathicActive = false;\r\n        for (let i = 0; i < playerDetails.length; i++) {\r\n            if (playerDetails[i].faction.naaluTelepathic) {\r\n                naaluTelepathicActive = true;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n            gameMode: MODE_STRATEGY,\r\n            naaluTelepathicActive: naaluTelepathicActive,\r\n        });\r\n\r\n        this.startGameTimer();\r\n    }\r\n\r\n    handlePlayerStrategyChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let newStrategy = {\r\n            strategyCard: JSON.parse(e.target.value),\r\n            isUsed: false,\r\n        }\r\n        playerDetails[playerNumber].strategy = newStrategy\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    //TODO Review the function name as it's likely to become confusing once strategy cards area added to the strategy select view\r\n    handleStrategyCardClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (player.isPassed) {\r\n            return; //can't toggle strategy card if already passed\r\n        }\r\n\r\n        let newStrategy = {...player.strategy};\r\n        newStrategy.isUsed = !newStrategy.isUsed;\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.strategy = newStrategy;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        \r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n        \r\n        if (newPlayer.strategy.strategyCard.number === POLITICS_CARD_NUMBER && newPlayer.strategy.isUsed) {\r\n            this.handleSpeakerButtonClicked();\r\n        }\r\n    }\r\n\r\n    handlePassButtonClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (!player.isPassed && !player.strategy.isUsed) {\r\n            return; //can't pass if strategy card is not yet played\r\n        }\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.isPassed = !newPlayer.isPassed;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartRound() {\r\n        let lowestInitiative = NUMBER_STRATEGIES;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            let playerInitiative = player.faction.naaluTelepathic ? 0 : player.strategy.strategyCard.number; \r\n            if (playerInitiative <= lowestInitiative) {\r\n                lowestInitiative = playerInitiative;\r\n            }\r\n        }\r\n\r\n        let newPlayerDetails = this.state.playerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            let playerInitiative = newPlayer.faction.naaluTelepathic ? 0 : newPlayer.strategy.strategyCard.number; \r\n            newPlayer.isActivePlayer = playerInitiative === lowestInitiative;\r\n            return newPlayer;\r\n        });\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n            gameMode: MODE_STATUS_BOARD,\r\n        });\r\n\r\n        this.startGameTimer();\r\n        this.startTurnTimers();\r\n    }\r\n\r\n    handlePlayAgenda() {\r\n        this.setState({\r\n            gameMode: MODE_AGENDA,\r\n        });\r\n    }\r\n\r\n    handleTurnTimerClicked() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startTurnTimers();\r\n            this.startGameTimer(); //if turn timers are running, the game timer should be as well\r\n        }\r\n    }\r\n\r\n    handleGameTimerClicked() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers(); //if the game timer is stopped, all timers should be stopped\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n        }\r\n    }\r\n\r\n    handleEndRound() {\r\n        let playerDetails = this.state.playerDetails.slice().map(\r\n            player => ({\r\n                ...player,\r\n                strategy: null,\r\n                isPassed: false,\r\n            })\r\n        );\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            roundNumber: this.state.roundNumber + 1,\r\n            playerDetails: playerDetails,\r\n        });\r\n\r\n        this.stopTurnTimers(true); //turns aren't occurring between rounds\r\n        this.startGameTimer(); //activity means the game timer should almost certainly be on\r\n    }\r\n\r\n    handleToggleTimers() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n            this.state.gameMode === MODE_STATUS_BOARD && this.startTurnTimers();\r\n        }\r\n    }\r\n\r\n    handleVictoryPointClick(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVictoryPoints = player.victoryPoints;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints + 1;\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints - 1;\r\n        }\r\n        \r\n        if (newVictoryPoints >= 0 && newVictoryPoints <= (this.state.maxVictoryPoints ? this.state.maxVictoryPoints : 10)) {\r\n            let newPlayer = {...player};\r\n            newPlayer.victoryPoints = newVictoryPoints;\r\n            newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handleAvailableVotesClick(e, playerString, delta) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newAvailableVotes = player.availableVotes;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newAvailableVotes = Math.min(99, player.availableVotes + delta);\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newAvailableVotes = Math.max(0, player.availableVotes - delta);\r\n        }\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.availableVotes = newAvailableVotes;\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleSpentVotesClick(e, playerString, delta) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newSpentVotes = player.spentVotes;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newSpentVotes = Math.min(player.availableVotes, player.spentVotes + delta);\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newSpentVotes = Math.max(0, player.spentVotes - delta);\r\n        }\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.spentVotes = newSpentVotes;\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleVoteTargetChange(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVoteTarget = e.target.value;\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.voteTarget = newVoteTarget;\r\n        if (newVoteTarget === \"Abstain\") {\r\n            newPlayer.spentVotes = 0;\r\n        }\r\n        \r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleEndTurn() {\r\n        this.startGameTimer();\r\n        this.restartTurnTimers();\r\n    }\r\n\r\n    handleObjectiveCardClicked(index) {\r\n        let objective = this.state.publicObjectives[index];\r\n        if (!objective.isRevealed && objective.order === this.nextUnrevealedObjective()) {\r\n            this.setState({ \r\n                showObjectiveSelectModal: true,\r\n                selectedObjective: objective,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleObjectiveChange(e) {\r\n        let newObjective = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedObjectiveSelection: newObjective,\r\n        });\r\n    }\r\n\r\n    handleCloseObjectiveSelectModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedObjectiveSelection && this.state.selectedObjective) {\r\n            let newObjective = {...this.state.selectedObjectiveSelection};\r\n            newObjective.isRevealed = true;\r\n            newObjective.order = this.state.selectedObjective.order;\r\n\r\n            let newPublicObjectives = this.state.publicObjectives.slice();\r\n            newPublicObjectives[this.state.selectedObjective.order] = newObjective;\r\n            \r\n            this.setState({\r\n                publicObjectives: newPublicObjectives,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            showObjectiveSelectModal: false,\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null,\r\n        });\r\n    }\r\n\r\n    handleAgendaChange(e) {\r\n        let newAgenda = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedAgenda: newAgenda,\r\n        });\r\n    }\r\n\r\n    handleNextAgenda() {\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        for (let i = 0; i < newPlayerDetails.length; i++) {\r\n            let player = {...newPlayerDetails[i]};\r\n            player.availableVotes = player.availableVotes - player.spentVotes;\r\n            player.spentVotes = 0;\r\n            player.voteTarget = null;\r\n            newPlayerDetails[i] = player;\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleEndAgenda() {\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        for (let i = 0; i < newPlayerDetails.length; i++) {\r\n            let player = {...newPlayerDetails[i]};\r\n            player.availableVotes = 0;\r\n            player.spentVotes = 0;\r\n            player.voteTarget = null;\r\n            newPlayerDetails[i] = player;\r\n        }\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            selectedAgenda: null,\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleSpeakerButtonClicked() {\r\n        this.setState({ \r\n            showSpeakerChangeModal: true,\r\n        });\r\n    }\r\n\r\n    handleSpeakerChange(e) {\r\n        let newSpeakerNumber = e.target.value;\r\n        this.setState({\r\n            selectedSpeakerNumber: newSpeakerNumber,\r\n        });\r\n    }\r\n\r\n    handleCloseSpeakerChangeModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedSpeakerNumber) {\r\n            let newPlayerDetails = this.state.playerDetails.slice();\r\n            let oldSpeaker = null;\r\n            for (let i = 0; i < newPlayerDetails.length; i++) {\r\n                if (newPlayerDetails[i].isSpeaker) {\r\n                    oldSpeaker = {...newPlayerDetails[i]}\r\n                    oldSpeaker.isSpeaker = false;\r\n                }\r\n            }\r\n\r\n            let newSpeaker = {...newPlayerDetails[this.state.selectedSpeakerNumber]};\r\n            newSpeaker.isSpeaker = true;\r\n            \r\n            newPlayerDetails[oldSpeaker.playerNumber] = oldSpeaker;\r\n            newPlayerDetails[newSpeaker.playerNumber] = newSpeaker;\r\n            \r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            showSpeakerChangeModal: false,\r\n            selectedSpeakerNumber: null,\r\n        });\r\n    }\r\n\r\n    handleTechClicked(techDefinition, player) {\r\n        let newPlayer = {...player};\r\n        let newTechSets = player.techs.slice();\r\n        for (let i = 0; i < newTechSets.length; i++) {\r\n            let newTechs = newTechSets[i].map(tech => {\r\n                if (tech.techDefinition === techDefinition) {\r\n                    let newTech = {...tech};\r\n                    newTech.isResearched = !newTech.isResearched;\r\n                    return newTech;\r\n                }\r\n                return tech;\r\n            })\r\n            newTechSets[i] = newTechs;\r\n        }\r\n        newPlayer.techs = newTechSets;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n    //#endregion\r\n\r\n    //#region Commands\r\n    fillPublicObjectives() {\r\n        let numberObjectives = NUMBER_OBJECTIVES_STAGE_ONE + NUMBER_OBJECTIVES_STAGE_TWO;\r\n        let objectives = Array(numberObjectives);\r\n        for (let i = 0; i < numberObjectives; i++) {\r\n            objectives[i] = {\r\n                id: null,\r\n                order: i,\r\n                stage: i < NUMBER_OBJECTIVES_STAGE_ONE ? 1 : 2,\r\n                name: null,\r\n                longDescription: null,\r\n                shortDescription: null,\r\n                isRevealed: false,\r\n            }\r\n        }\r\n        return objectives;\r\n    }\r\n\r\n    nextUnrevealedObjective() {\r\n        for (let i = 0; i < this.state.publicObjectives.length; i++) {\r\n            if (!this.state.publicObjectives[i].isRevealed) {\r\n                return this.state.publicObjectives[i].order;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    recalculateTimers() {\r\n        if (this.state.totalGameTimer && this.state.totalGameTimer.isCounting) {\r\n            this.recalculateGameTime();\r\n        }\r\n        if (this.state.currentTurnTimer && this.state.currentTurnTimer.isCounting) {\r\n            this.recalculateTurnTime();\r\n        }\r\n    }\r\n\r\n    recalculateGameTime() {\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        this.setState({\r\n            totalGameTimer: timer,\r\n        });\r\n    }\r\n\r\n    recalculateTurnTime() {\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.currentSeconds = playerTimer.baseSeconds + Math.floor((Date.now() - playerTimer.countStartTime) / 1000);\r\n        playerTimers[playerNumber] = playerTimer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        });\r\n    }\r\n\r\n    startTurnTimers() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            let playerTimer = {...playerTimers[i]};\r\n            playerTimer.isCounting = i === playerNumber;\r\n            playerTimer.countStartTime = Date.now();\r\n            playerTimers[i] = playerTimer;\r\n    \r\n        }\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    stopTurnTimers(resetCurrentTurn) {\r\n        if (!this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = false;\r\n        if (resetCurrentTurn) {\r\n            timer.baseSeconds = 0;\r\n            timer.currentSeconds = 0;\r\n        }\r\n        else {\r\n            timer.baseSeconds = timer.currentSeconds;\r\n        }\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.isCounting = false;\r\n        playerTimer.baseSeconds = playerTimer.currentSeconds;\r\n        playerTimers[playerNumber] = playerTimer;\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    restartTurnTimers() {\r\n        let timer = {\r\n            baseSeconds: 0,\r\n            currentSeconds: 0,\r\n            countStartTime: Date.now(),\r\n            isCounting: true,\r\n        };\r\n\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let playerTimers = this.state.playerTimers.slice();\r\n\r\n        let currentPlayer = {...this.getActivePlayer()};\r\n        let currentPlayerTimer = {...playerTimers[currentPlayer.playerNumber]};\r\n        currentPlayerTimer.isCounting = false;\r\n        currentPlayerTimer.baseSeconds = currentPlayerTimer.currentSeconds;\r\n        currentPlayer.isActivePlayer = false;\r\n        playerTimers[currentPlayer.playerNumber] = currentPlayerTimer;\r\n        playerDetails[currentPlayer.playerNumber] = currentPlayer;\r\n\r\n        let nextPlayer = this.getNextPlayer(currentPlayer)\r\n        let nextPlayerTimer = {...playerTimers[nextPlayer.playerNumber]};\r\n        nextPlayerTimer.isCounting = true;\r\n        nextPlayerTimer.countStartTime = Date.now();\r\n        nextPlayer.isActivePlayer = true;\r\n        playerTimers[nextPlayer.playerNumber] = nextPlayerTimer;\r\n        playerDetails[nextPlayer.playerNumber] = nextPlayer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    startGameTimer() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    stopGameTimer() {\r\n        if (!this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.baseSeconds = timer.currentSeconds;\r\n        timer.isCounting = false;\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    getActivePlayer() {\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isActivePlayer) {\r\n                return this.state.playerDetails[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getNextPlayer(activePlayer) {\r\n        let nextPlayer = activePlayer;\r\n        //TODO Make Naalu initiative account for it being held my non-Naalu players\r\n        let activePlayerInitiative = activePlayer.faction.naaluTelepathic ? 0 : activePlayer.strategy.strategyCard.number;\r\n        let initiativeRange = NUMBER_STRATEGIES + (this.state.naaluTelepathicActive ? 1 : 0);\r\n        // determine the highest initiative number that could possibly be next. Offset by the number of strategies to allow it to loop back;\r\n        let highestInitiativeNumber = activePlayerInitiative + initiativeRange - 1;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.isActivePlayer && !player.isPassed) {\r\n                // determine the player initiative number, offset by the number of strategies to allow it to loop back\r\n                let playerInitiativeNumber = player.faction.naaluTelepathic ? 0 : player.strategy.strategyCard.number;\r\n                if (playerInitiativeNumber < activePlayerInitiative) {\r\n                    playerInitiativeNumber += initiativeRange;\r\n                }\r\n                if (playerInitiativeNumber < highestInitiativeNumber) {\r\n                    highestInitiativeNumber = playerInitiativeNumber;\r\n                    nextPlayer = player;\r\n                }\r\n            }\r\n        }\r\n        return nextPlayer;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Rendering methods\r\n    renderGameComponent() {\r\n        switch (this.state.gameMode) {\r\n            case MODE_PLAYER_SELECT:\r\n                return this.renderPlayerSelect();\r\n            case MODE_STRATEGY:\r\n                return this.renderStrategy();\r\n            case MODE_STATUS_BOARD:\r\n                return this.renderStatusBoard();\r\n            case MODE_AGENDA:\r\n                return this.renderAgenda();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    renderPlayerSelect() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <PlayerSelect onStartGame={playerDetails => this.handleStartGame(playerDetails)} />\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStrategy() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <StrategySelect\r\n                            playerDetails={this.state.playerDetails}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onStartRound={() => this.handleStartRound()}\r\n                            onPlayAgenda={() => this.handlePlayAgenda()}\r\n                            onPlayerStrategyChange={(e, playerNumber) => this.handlePlayerStrategyChange(e, playerNumber)}\r\n                            onSpeakerButtonClick={() => this.handleSpeakerButtonClicked()}\r\n                            />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStatusBoard() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(true)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <StatusBoard\r\n                            roundNumber={this.state.roundNumber}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            players={this.state.playerDetails}\r\n                            playerTimers={this.state.playerTimers}\r\n                            onEndTurn={() => this.handleEndTurn()}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onVictoryPointsClick={(e, playerString) => this.handleVictoryPointClick(e, playerString)}\r\n                            onStrategyCardClick={(playerString) => this.handleStrategyCardClicked(playerString)}\r\n                            onPassButtonClick={(playerString) => this.handlePassButtonClicked(playerString)}\r\n                            onEndRound={() => this.handleEndRound()}\r\n                            onTechClick={(techDefinition, player) => this.handleTechClicked(techDefinition, player)}\r\n                            onSpeakerButtonClick={() => this.handleSpeakerButtonClicked()}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderAgenda() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <PlayAgenda\r\n                            playerDetails={this.state.playerDetails}\r\n                            selectedAgenda={this.state.selectedAgenda}\r\n                            onAgendaChange={e => this.handleAgendaChange(e)}\r\n                            onNextAgenda={() => this.handleNextAgenda()}\r\n                            onEndAgenda={() => this.handleEndAgenda()}\r\n                            onAvailableVotesClick={(e, playerString, delta) => this.handleAvailableVotesClick(e, playerString, delta)}\r\n                            onSpentVotesClick={(e, playerString, delta) => this.handleSpentVotesClick(e, playerString, delta)}\r\n                            onVoteTargetChange={(e, playerString) => this.handleVoteTargetChange(e, playerString)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderGameHeader(showTurnTimer) {\r\n        return <GameHeader\r\n            roundNumber={this.state.roundNumber}\r\n            totalGameTimer={this.state.totalGameTimer}\r\n            showTurnTimer={showTurnTimer}\r\n            currentTurnTimer={this.state.currentTurnTimer}\r\n            onTurnTimerClick={() => this.handleTurnTimerClicked()}\r\n            onGameTimerClick={() => this.handleGameTimerClicked()}\r\n        />\r\n    }\r\n\r\n\r\n    renderObjectivePanel() {\r\n        return <ObjectivePanel\r\n            className=\"objectivePanel\"\r\n            objectives={this.state.publicObjectives}\r\n            onObjectiveCardClick={(index) => this.handleObjectiveCardClicked(index)}\r\n        />\r\n    }\r\n    //#endregion\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderGameComponent()}\r\n                <ObjectiveSelectModal\r\n                    showModal={this.state.showObjectiveSelectModal}\r\n                    objectives={this.state.publicObjectives}\r\n                    stage={this.state.selectedObjective ? this.state.selectedObjective.stage : null}\r\n                    selectedObjectiveSelection={this.state.selectedObjectiveSelection}\r\n                    onConfirmModal={() => this.handleCloseObjectiveSelectModal(true)}\r\n                    onCloseModal={() => this.handleCloseObjectiveSelectModal()}\r\n                    onObjectiveChange={e => this.handleObjectiveChange(e)}\r\n                />\r\n                <SpeakerChangeModal\r\n                    showModal={this.state.showSpeakerChangeModal}\r\n                    playerDetails={this.state.playerDetails}\r\n                    selectedSpeakerNumber={this.state.selectedSpeakerNumber}\r\n                    onConfirmModal={() => this.handleCloseSpeakerChangeModal(true)}\r\n                    onCloseModal={() => this.handleCloseSpeakerChangeModal()}\r\n                    onSpeakerChange={e => this.handleSpeakerChange(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction GameHeader(props) {\r\n    let turnTimer = props.showTurnTimer ?\r\n        <TimerBlock\r\n            id=\"turnTimer\"\r\n            label=\"Turn Time\"\r\n            currentSeconds={props.currentTurnTimer.currentSeconds}\r\n            onClick={() => props.onTurnTimerClick()}\r\n        /> :\r\n        null;\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"timerLabel\">{\"Round: \" + props.roundNumber}</label>\r\n            {turnTimer}\r\n            <TimerBlock\r\n                id=\"turnTimer\"\r\n                label=\"Total Game Time\"\r\n                currentSeconds={props.totalGameTimer.currentSeconds}\r\n                onClick={() => props.onGameTimerClick()}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameManager;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GameManager from './GameManager';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './custom.scss';\r\n\r\ndocument.oncontextmenu = (e) => e.preventDefault();\r\n\r\nReactDOM.render(\r\n    <GameManager/>,\r\n    document.getElementById(\"root\")\r\n  );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}