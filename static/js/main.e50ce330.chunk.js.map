{"version":3,"sources":["DataHelper.js","PlayerSelect.js","StrategySelect.js","TimerBlock.js","Utils.js","TechPanel.js","StatusBoard.js","PlayAgenda.js","ObjectiveSelectModal.js","ObjectivePanel.js","TokenAssignModal.js","GameManager.js","serviceWorker.js","index.js"],"names":["colour_store","filterData","colour_file","faction_store","factions_file","planet_store","planets_file","tech_store","technologies_file","file","filter","item","setAdded","properties","expansions","includes","setRemoved","MAX_PLAYER_NUMBER","PlayerSelect","props","playerDetails","Array","i","createPlayer","state","selectedNumberOfPlayers","playerNumber","playerName","faction","testMode","colour","strategies","victoryPoints","isSpeaker","isActivePlayer","isPassed","isNaaluTelepathic","availableVotes","spentVotes","extraVotes","this","setState","playerNumberSelections","fill","e","slice","target","value","JSON","parse","finalPlayerDetails","initialiseTechnologies","onStartGame","map","player","newPlayer","techSets","push","createPlayerTechnologies","Biotic","Warfare","Propulsion","Cybernetic","shortName","Ship","Unit","Warsun","techs","techSet","techDefinition","isResearched","selectedFactions","selectedColours","selectedNames","description","determineSelection","Row","Col","xs","xl","span","offset","onClick","playerNumberButtonHandleClick","numberOfPlayers","onPlayerNameChange","handlePlayerNameChange","onPlayerFactionChange","handlePlayerFactionChange","onPlayerColourChange","handlePlayerColourChange","Button","type","disabled","isGameReady","handleStartGame","React","Component","PlayerNumberSelect","isSelected","PlayerNumberButton","key","selected","playerNumberButtons","length","renderPlayerNumberButton","generatePlayerNumberButtons","className","id","PlayerDetailForm","playerDetailEntries","playerDetail","onFactionChange","onColourChange","renderPlayerDetailEntries","PlayerDetailEntry","factionElements","hidden","concat","stringify","fullName","playerFaction","undefined","required","onChange","colourElements","playerColour","defaultValue","getFactionList","getColourList","StrategySelect","onStartRound","onPlayAgenda","strategiesPerPlayer","selectedStrategyCards","strategyIndex","strategyCard","number","onPlayerStrategyChange","strategyNumber","onSpeakerButtonClick","variant","onToggleTimers","isGameActive","handlePlayAgenda","isRoundReady","handleStartRound","PlayerStrategyForm","players","speakerIndex","playerStrategyEntries","destinationIndex","onStrategyChange","renderPlayerStrategyEntries","PlayerStrategyEntry","strategyLists","strategyElements","strategy_cards_file","strategy","name","getStrategyLists","Timer","time","TimerBlock","totalSeconds","hours","Math","floor","minutes","seconds","parseTime","currentSeconds","interactive","label","hasUnplayedStrategies","isUsed","TechPanel","techSetGroups","TechSetGroup","onTechClick","techButtons","TechButton","tech","text","PlayerCard","playerBackgroundColour","playerTextColour","textColour","playerButtons","style","backgroundColor","onStrategyCardClick","onNaaluInitiativeButtonClick","Card","onEndTurn","noGutters","color","onPassButtonClick","playerTimer","onVictoryPointsClick","onContextMenu","EndRoundConfirmModal","Modal","show","showModal","onHide","onCloseModal","centered","Body","Footer","onConfirmModal","StatusBoard","useState","showEndRoundModal","setShowEndRoundModal","sort","a","b","playerCards","playerTimers","strategyCardNumber","isAllPassed","isAllPlayersPassed","ButtonGroup","onEndRound","standardVoteOptions","PlayAgenda","onNextAgenda","onEndAgenda","AgendaForm","selectedAgenda","onAgendaChange","onAvailableVotesClick","playerString","delta","onSpentVotesClick","onExtraVotesClick","onVoteTargetChange","handleNextAgenda","handleEndAgenda","votePanel","VotePanel","resultsPanel","ResultsPanel","AgendaSelector","agendaElements","agenda_file","agenda","getAgendaList","AgendaCard","firstVoterIndex","argentZealIndex","isArgentZeal","playerVotePanels","PlayerVotePanel","VoteTargetSelector","voteTarget","agendaCardDisplay","electionTarget","forEffect","againstEffect","voteOptions","electionTargetType","getPlanetVoteOptions","voteOption","planet","trait","resolutions","existingResolution","j","resolution","votes","votedResolutions","ObjectiveSelectModal","selectedObjectives","objectives","objective","isRevealed","availableObjectives","objectives_file","stage","some","selectedObjective","objectiveElements","objectiveSelect","onObjectiveChange","Header","Title","selectedObjectiveSelection","longDescription","ObjectivePanel","objectiveBlocks","ObjectiveCard","order","shortDescription","onObjectiveCardClick","cardDisplay","TokenAssignModal","playerList","currentTokenOwnerNumber","playerSelect","onTokenOwnerChange","title","selectedTokenOwnerNumber","GameHeader","turnTimer","showTurnTimer","currentTurnTimer","onTurnTimerClick","roundNumber","totalGameTimer","onGameTimerClick","GameManager","gameMode","showObjectiveSelectModal","tokenAssignModalMode","tokenAssignModalTitle","isNaaluTelepathicActive","baseSeconds","countStartTime","Date","now","isCounting","publicObjectives","fillPublicObjectives","window","addEventListener","preventDefault","returnValue","heartbeat","setInterval","recalculateTimers","clearInterval","startGameTimer","newStrategy","isPlayingPolitics","newStrategies","newPlayerDetails","handleSpeakerButtonClicked","lowestInitiative","playerStrategies","playerInitiative","startTurnTimers","stopTurnTimers","stopGameTimer","newVictoryPoints","nativeEvent","which","maxVictoryPoints","newAvailableVotes","min","max","newSpentVotes","newExtraVotes","newVoteTarget","restartTurnTimers","index","nextUnrevealedObjective","newObjective","isConfirmed","newPublicObjectives","newAgenda","speakerNumber","naaluTelepathicPlayerNumber","newTokenOwnerNumber","oldOwner","newOwner","newTechSets","newTechs","newTech","NUMBER_OBJECTIVES_STAGE_ONE","recalculateGameTime","recalculateTurnTime","timer","getActivePlayer","resetCurrentTurn","currentPlayer","currentPlayerTimer","nextPlayer","getNextPlayer","nextPlayerTimer","activePlayer","activePlayerInitiative","initiativeRange","highestInitiativeNumber","playerInitiativeNumber","renderPlayerSelect","renderStrategy","renderStatusBoard","renderAgenda","Container","fluid","renderGameHeader","md","renderObjectivePanel","handleToggleTimers","handlePlayerStrategyChange","handleEndTurn","handleVictoryPointClick","handleStrategyCardClicked","handlePassButtonClicked","handleEndRound","handleTechClicked","handleNaaluInitiativeButtonClicked","handleAgendaChange","handleAvailableVotesClick","handleSpentVotesClick","handleExtraVotesClick","handleVoteTargetChange","handleTurnTimerClicked","handleGameTimerClicked","handleObjectiveCardClicked","renderGameComponent","handleCloseObjectiveSelectModal","handleObjectiveChange","handleCloseTokenAssignModal","handleTokenOwnerChange","Boolean","location","hostname","match","document","oncontextmenu","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e50ce330.chunk.js","sourcesContent":["import properties from './data/properties.json';\r\n\r\nimport agenda_file from './data/agendas.json';\r\nimport colour_file from './data/colours.json';\r\nimport factions_file from './data/factions.json';\r\nimport objectives_file from './data/objectives.json';\r\nimport planets_file from './data/planets.json';\r\nimport systems_file from './data/systems.json';\r\nimport technologies_file from './data/technologies.json';\r\nimport strategy_cards_file from './data/strategy-cards.json';\r\n\r\nexport const agenda_store = () => {\r\n    return filterData(agenda_file);\r\n}\r\n\r\nexport const colour_store = () => {\r\n    return filterData(colour_file);\r\n}\r\n\r\nexport const faction_store = () => {\r\n    return filterData(factions_file);\r\n}\r\n\r\nexport const objective_store = () => {\r\n    return filterData(objectives_file);\r\n}\r\n\r\nexport const planet_store = () => {\r\n    return filterData(planets_file);\r\n}\r\n\r\nexport const system_store = () => {\r\n    return filterData(systems_file);\r\n}\r\n\r\nexport const tech_store = () => {\r\n    return technologies_file;\r\n}\r\n\r\nexport const strategy_card_store = () => {\r\n    return strategy_cards_file;\r\n}\r\n\r\n\r\nfunction filterData(file) {\r\n    return file.filter((item) => \r\n        (!item.setAdded || properties.expansions.includes(item.setAdded)) && (!item.setRemoved || !properties.expansions.includes(item.setRemoved)));\r\n}\r\n\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport './PlayerSelect.css';\r\n\r\nimport properties from './data/properties.json';\r\nimport {colour_store, faction_store, tech_store} from './DataHelper.js';\r\n\r\nconst PLAYER_NUMBER_INDEX_OFFSET = 3; //player 3 is array index 0\r\n//TODO: this should instead come from a user controlled setting, not a properties file\r\nconst MAX_PLAYER_NUMBER = properties.expansions.includes(\"PoK\") ? 8 : 6;\r\n\r\nclass PlayerSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let playerDetails = Array(MAX_PLAYER_NUMBER);\r\n        for (let i = 0; i < MAX_PLAYER_NUMBER; i++) {\r\n            playerDetails[i] = this.createPlayer(i);\r\n        }\r\n\r\n        this.state = {\r\n            selectedNumberOfPlayers: MAX_PLAYER_NUMBER,\r\n            playerDetails: playerDetails,\r\n        };\r\n    }\r\n\r\n    createPlayer(playerNumber) {\r\n        let playerDetail = {\r\n            playerName: \"Player \" + (playerNumber + 1),\r\n            playerNumber: playerNumber,\r\n            faction: properties.testMode ? faction_store()[playerNumber] : null,\r\n            colour: properties.testMode ? colour_store()[playerNumber] : null,\r\n            strategies: [],\r\n            victoryPoints: 0,\r\n            isSpeaker: playerNumber === 0 ? true : false,\r\n            isActivePlayer: playerNumber === 0 ? true : false,\r\n            isPassed: false,\r\n            isNaaluTelepathic: false,\r\n            availableVotes: 0,\r\n            spentVotes: 0,\r\n            extraVotes: 0,\r\n        }\r\n        return playerDetail;\r\n    }\r\n\r\n    playerNumberButtonHandleClick(playerNumber) {\r\n        this.setState({\r\n            selectedNumberOfPlayers: playerNumber,\r\n        });\r\n    }\r\n\r\n    determineSelection() {\r\n        let playerNumberSelections = Array(MAX_PLAYER_NUMBER).fill(false);\r\n        if (this.state.selectedNumberOfPlayers !== null) {\r\n            playerNumberSelections[this.state.selectedNumberOfPlayers - PLAYER_NUMBER_INDEX_OFFSET] = true;\r\n        }\r\n\r\n        return playerNumberSelections;\r\n    }\r\n\r\n    handlePlayerNameChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].playerName = e.target.value;\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handlePlayerFactionChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].faction = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n    \r\n    handlePlayerColourChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].colour = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartGame() {\r\n        let finalPlayerDetails = this.state.playerDetails.slice(0, this.state.selectedNumberOfPlayers)\r\n        finalPlayerDetails = this.initialiseTechnologies(finalPlayerDetails);\r\n\r\n        return this.props.onStartGame(finalPlayerDetails);\r\n    }\r\n\r\n    initialiseTechnologies(finalPlayerDetails) {\r\n        let playerDetails = finalPlayerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            let techSets = [];\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Biotic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Warfare));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Propulsion));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Cybernetic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store()[newPlayer.faction.shortName]));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Ship));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Unit));\r\n            techSets.push(this.createPlayerTechnologies(tech_store().Warsun));\r\n            newPlayer.techs = techSets;\r\n            return newPlayer;\r\n        });\r\n\r\n        return playerDetails;\r\n    }\r\n\r\n    createPlayerTechnologies(techSet) {\r\n        let playerTechs = techSet.map((techDefinition) => {\r\n            return {\r\n                techDefinition: techDefinition,\r\n                isResearched: false,\r\n            };\r\n        });\r\n\r\n        return playerTechs;\r\n    }\r\n\r\n    isGameReady() {\r\n        if (!this.state.selectedNumberOfPlayers) {\r\n            return true;\r\n        }\r\n        \r\n        let selectedFactions = [];\r\n        let selectedColours = [];\r\n        let selectedNames = [];\r\n        for (let i = 0; i < this.state.selectedNumberOfPlayers; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.faction || !player.colour || !player.playerName ||\r\n                    selectedColours.includes(player.colour.description) ||\r\n                    selectedFactions.includes(player.faction.shortName) || \r\n                    selectedNames.includes(player.playerName)) {\r\n                return true;\r\n            }\r\n            selectedFactions[i] = player.faction.shortName;\r\n            selectedColours[i] = player.colour.description;\r\n            selectedNames[i] = player.playerName;\r\n        }\r\n\r\n\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        const playerNumberSelections = this.determineSelection();\r\n\r\n        return (\r\n            <Row>\r\n                <Col xs={12} xl={{span: 8, offset: 2}}> \r\n                    <div>\r\n                        <h1>Number of Players</h1>\r\n                        <PlayerNumberSelect \r\n                            playerNumberSelections={playerNumberSelections}\r\n                            onClick={playerNumber => this.playerNumberButtonHandleClick(playerNumber)}\r\n                        />\r\n                    </div>\r\n                    <form>\r\n                        <PlayerDetailForm \r\n                            numberOfPlayers={this.state.selectedNumberOfPlayers} \r\n                            playerDetails={this.state.playerDetails}\r\n                            onPlayerNameChange={(e, playerNumber) => this.handlePlayerNameChange(e, playerNumber)}\r\n                            onPlayerFactionChange={(e, playerNumber) => this.handlePlayerFactionChange(e, playerNumber)}\r\n                            onPlayerColourChange={(e, playerNumber) => this.handlePlayerColourChange(e, playerNumber)}\r\n                        />\r\n                        <Button type=\"button\" disabled= {this.isGameReady()} onClick={() => this.handleStartGame()}>\r\n                            Start Game\r\n                        </Button>\r\n                    </form>\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerNumberSelect extends React.Component {\r\n    renderPlayerNumberButton(playerNumber) {\r\n        const isSelected = this.props.playerNumberSelections[playerNumber - PLAYER_NUMBER_INDEX_OFFSET];\r\n\r\n        return (\r\n            <PlayerNumberButton\r\n                key={playerNumber} \r\n                value={playerNumber}\r\n                selected={isSelected}\r\n                onClick={() => this.props.onClick(playerNumber)}\r\n            />\r\n        );\r\n    }\r\n\r\n    generatePlayerNumberButtons() {\r\n        let playerNumberButtons = Array(MAX_PLAYER_NUMBER - PLAYER_NUMBER_INDEX_OFFSET + 1);\r\n        for (let i = 0; i < playerNumberButtons.length; i++) {\r\n            playerNumberButtons[i] = this.renderPlayerNumberButton(i + PLAYER_NUMBER_INDEX_OFFSET);\r\n        }\r\n        return playerNumberButtons;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                {this.generatePlayerNumberButtons()}\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerNumberButton(props) {\r\n    return (\r\n        <button \r\n            className={`playerNumButton ${props.selected ? \"selectedPlayerNumButton\" : \"\"}`} \r\n            id={`${props.value}Player`} \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nclass PlayerDetailForm extends React.Component {\r\n    renderPlayerDetailEntries() {\r\n        let playerDetailEntries = Array(this.props.numberOfPlayers);\r\n        for (let i = 0; i < this.props.numberOfPlayers; i++) {\r\n            playerDetailEntries[i] = <PlayerDetailEntry \r\n                key={i}\r\n                playerDetail={this.props.playerDetails[i]}\r\n                onPlayerNameChange={e => this.props.onPlayerNameChange(e, i)}\r\n                onFactionChange={e => this.props.onPlayerFactionChange(e, i)}\r\n                onColourChange={e => this.props.onPlayerColourChange(e, i)}\r\n            />;\r\n        }\r\n\r\n        return (<div>\r\n            {playerDetailEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerDetailEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerDetailEntry extends React.Component {\r\n    getFactionList() {\r\n        let factionElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        factionElements = factionElements.concat(faction_store().map((faction) => \r\n            <option key={faction.shortName} value={JSON.stringify(faction)}>\r\n                {faction.fullName}\r\n            </option>));\r\n\r\n        let playerFaction = this.props.playerDetail.faction ? JSON.stringify(this.props.playerDetail.faction) : undefined;\r\n\r\n        return <select \r\n            id=\"factions\" \r\n            required \r\n            value={playerFaction}\r\n            onChange={this.props.onFactionChange}\r\n        >\r\n            {factionElements}\r\n        </select>;\r\n    }\r\n\r\n    getColourList() {\r\n        let colourElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        colourElements = colourElements.concat(colour_store().map((colour) => {\r\n            return (\r\n                <option key={colour.description} value={JSON.stringify(colour)}>\r\n                    {colour.description}\r\n                </option>\r\n            )\r\n        }));\r\n\r\n        let playerColour = this.props.playerDetail.colour ? JSON.stringify(this.props.playerDetail.colour) : undefined;\r\n\r\n        return <select \r\n            id=\"colours\" \r\n            required \r\n            defaultValue={playerColour} \r\n            onChange={this.props.onColourChange}\r\n        >\r\n            {colourElements}\r\n        </select>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={{span: 2, offset: 0}} xl={{span: 1, offset: 1}}>\r\n                    <button className={`speakerToken ${this.props.playerDetail.isSpeaker ? \"\" : \"invisible\"} disabled`}/>\r\n                </Col>\r\n                <Col xs={4}>\r\n                    <input \r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.playerName} \r\n                        onChange={this.props.onPlayerNameChange}\r\n                    />\r\n                </Col>\r\n                <Col xs={4}>\r\n                    {this.getFactionList()}\r\n                </Col>\r\n                <Col xs={2}>\r\n                    {this.getColourList()}\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerSelect;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nimport {strategy_card_store} from './DataHelper.js';\r\n\r\nconst SECOND_STRATEGY_THRESHOLD = 4; //the maximum number of players (inclusive) before only a single strategy is picked per player \r\n\r\nclass StrategySelect extends React.Component {\r\n    handleStartRound() {\r\n        if (this.props.onStartRound) {\r\n            return () => this.props.onStartRound()\r\n        }\r\n    }\r\n\r\n    handlePlayAgenda() {\r\n        if (this.props.onPlayAgenda) {\r\n            return () => this.props.onPlayAgenda()\r\n        }\r\n    }\r\n\r\n    isRoundReady() {\r\n        let strategiesPerPlayer = this.props.playerDetails.length <= SECOND_STRATEGY_THRESHOLD ? 2 : 1;\r\n        let selectedStrategyCards = [];\r\n\r\n        for (let i = 0; i < this.props.playerDetails.length; i++) {\r\n            let player = this.props.playerDetails[i];\r\n            if (player.strategies.length < strategiesPerPlayer) {\r\n                return false;\r\n            }\r\n            for (let strategyIndex = 0; strategyIndex < player.strategies.length; strategyIndex++) {\r\n                if (selectedStrategyCards.includes(player.strategies[strategyIndex].strategyCard.number)) {\r\n                    return false;\r\n                }\r\n                selectedStrategyCards.push(player.strategies[strategyIndex].strategyCard.number);\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {/*TODO: add strategy cards */}\r\n                </Row>\r\n                <Row>\r\n                    <PlayerStrategyForm\r\n                        playerDetails={this.props.playerDetails}\r\n                        onPlayerStrategyChange={(e, playerNumber, strategyNumber) => this.props.onPlayerStrategyChange(e, playerNumber, strategyNumber)}\r\n                        onSpeakerButtonClick={this.props.onSpeakerButtonClick}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button variant=\"light\" type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                            {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handlePlayAgenda()}>\r\n                            Play Agenda\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" disabled={!this.isRoundReady()} onClick={this.handleStartRound()}>\r\n                            Start Round\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyForm extends React.Component {\r\n    renderPlayerStrategyEntries() {\r\n        const players = this.props.playerDetails.slice();\r\n        var speakerIndex = 0;\r\n        for (let i = 0; i < players.length; i++) {\r\n            speakerIndex = players[i].isSpeaker ? i : speakerIndex;\r\n        }\r\n\r\n        let strategiesPerPlayer = this.props.playerDetails.length <= SECOND_STRATEGY_THRESHOLD ? 2 : 1;\r\n\r\n        let playerStrategyEntries = Array(players.length).fill(null);\r\n        for (let i = 0; i < players.length; i++) {\r\n            let destinationIndex = (((i - speakerIndex) % players.length) + players.length) % players.length;\r\n            playerStrategyEntries[destinationIndex] =\r\n                <PlayerStrategyEntry\r\n                    key={players[i].playerNumber}\r\n                    playerDetail={players[i]}\r\n                    strategiesPerPlayer={strategiesPerPlayer}\r\n                    onStrategyChange={(e, strategyNumber) => this.props.onPlayerStrategyChange(e, players[i].playerNumber, strategyNumber)}\r\n                    onSpeakerButtonClick={this.props.onSpeakerButtonClick}\r\n                />\r\n        }\r\n            \r\n        return (<Col>\r\n            {playerStrategyEntries}\r\n        </Col>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.renderPlayerStrategyEntries()\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyEntry extends React.Component {\r\n    getStrategyLists() {\r\n        let strategyLists = [];\r\n        for (let i = 0; i < this.props.strategiesPerPlayer; i++) {\r\n            let strategyElements = [<option key=\"unselected\" value={null} hidden/>]\r\n            strategyElements = strategyElements.concat(strategy_card_store().map((strategy) => \r\n                <option key={strategy.name} value={JSON.stringify(strategy)}>\r\n                    {strategy.name}\r\n                </option>));\r\n\r\n            strategyLists[i] = <select \r\n                key={i}\r\n                required \r\n                onChange={(e) => this.props.onStrategyChange(e, i)}\r\n            >\r\n                {strategyElements}\r\n            </select>;   \r\n        }\r\n        return strategyLists;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col xs={2} xl={1}>\r\n                    <button \r\n                        className={`speakerToken ${this.props.playerDetail.isSpeaker ? \"\" : \"invisible\"}`}\r\n                        onClick={this.props.onSpeakerButtonClick} \r\n                    />\r\n                </Col>\r\n                <Col xs={10} xl={11}>\r\n                    <input\r\n                        key=\"playerName\"\r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.playerName}\r\n                        disabled\r\n                    />\r\n                {/* </Col> */}\r\n                {/* <Col xs={3}> */}\r\n                    <input\r\n                        key=\"playerFaction\"\r\n                        type=\"text\"\r\n                        defaultValue={this.props.playerDetail.faction && this.props.playerDetail.faction.fullName}\r\n                        disabled\r\n                    />\r\n                {/* </Col> */}\r\n                {/* <Col xs={4}> */}\r\n                    {this.getStrategyLists()}\r\n                </Col>\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default StrategySelect;","import React from 'react';\r\nimport './TimerBlock.css';\r\n\r\nconst secondsInMinute = 60;\r\nconst secondsInHour = 60 * 60;\r\n\r\nfunction Timer(props) {\r\n    return (\r\n        <button className=\"timer\" onClick={props.onClick} disabled={props.disabled}>\r\n            {props.time}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass TimerBlock extends React.Component {\r\n    render() {\r\n        const time = parseTime(this.props.currentSeconds);\r\n\r\n        let interactive = this.props.onClick;\r\n\r\n        return (\r\n            <span className=\"Timer\">\r\n                <label className=\"timerLabel\">{this.props.label}</label>\r\n                <Timer time={time} disabled={this.props.disabled} onClick={interactive ? () => this.props.onClick(this.props.currentSeconds) : null} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n//-------------------------------------------\r\n\r\nfunction parseTime(totalSeconds) {\r\n    if (!totalSeconds) {\r\n        return \"00:00\";\r\n    }\r\n\r\n    const hours = Math.floor(totalSeconds / secondsInHour);\r\n    const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\r\n    const seconds = totalSeconds % secondsInMinute;\r\n\r\n    var time = hours > 0 ? hours + \":\" : \"\";\r\n    time += (minutes < 10 ? \"0\" + minutes : minutes) + \":\";\r\n    time += seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return time;\r\n}\r\n\r\nexport default TimerBlock;","\r\n\r\nexport const hasUnplayedStrategies = (player) => {\r\n    for (let i = 0; i < player.strategies.length; i++) {\r\n        if (!player.strategies[i].isUsed) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n };","import React from 'react';\r\nimport {Row, Col} from 'react-bootstrap'\r\n\r\nimport './TechPanel.css';\r\n\r\n\r\nexport default function TechPanel(props) {\r\n    let techSetGroups = [];\r\n    for (let i = 0; i < props.techs.length; i++) {\r\n        techSetGroups[i] = <TechSetGroup \r\n            key={i} \r\n            techSet={props.techs[i]} \r\n            className=\"techSetGroup\" \r\n            onTechClick={(techDefinition) => props.onTechClick(techDefinition)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        techSetGroups\r\n    );\r\n}\r\n\r\n\r\nfunction TechSetGroup(props) {\r\n    let techButtons = [];\r\n    for (let i = 0; i < props.techSet.length; i++) {\r\n        let span = 12 / props.techSet.length;\r\n        techButtons[i] = \r\n            <Col key={i} xs={span}>\r\n                <TechButton \r\n                    key={props.techSet[i].techDefinition.name} \r\n                    tech={props.techSet[i]} \r\n                    onTechClick={() => props.onTechClick(props.techSet[i].techDefinition)} \r\n                />\r\n            </Col>\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {techButtons}\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction TechButton(props) {\r\n    return (\r\n        <button \r\n            className={`rounded techButton ${props.tech.techDefinition.type} ${props.tech.isResearched ? \"researched\" : \"\"} `}\r\n            onClick={props.onTechClick}\r\n        >\r\n            {props.tech.techDefinition.text}\r\n        </button> \r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport TimerBlock from './TimerBlock';\r\nimport Button from 'react-bootstrap/Button'\r\nimport ButtonGroup from 'react-bootstrap/ButtonGroup'\r\nimport Modal from 'react-bootstrap/Modal'\r\nimport {Row, Col} from 'react-bootstrap'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nimport {hasUnplayedStrategies} from './Utils';\r\n\r\nimport './StatusBoard.css';\r\nimport TechPanel from './TechPanel';\r\n\r\nconst USED_STRATEGY_COLOUR = \"grey\";\r\n\r\nfunction StatusBoard(props) {\r\n    const [showEndRoundModal, setShowEndRoundModal] = useState(false);\r\n\r\n    let players = props.players.slice();\r\n    players.sort((a, b) => \r\n        (a.isNaaluTelepathic ? 0 : a.strategies[0].strategyCard.number) - (b.isNaaluTelepathic ? 0 : b.strategies[0].strategyCard.number));\r\n\r\n    let playerCards = players.map(\r\n        (player) => \r\n        <Col key={player.playerNumber}>\r\n            <PlayerCard \r\n                key={player.playerNumber} \r\n                player={player}\r\n                playerTimer={props.playerTimers[player.playerNumber]}\r\n                onEndTurn={() => props.onEndTurn()}\r\n                onVictoryPointsClick={e => props.onVictoryPointsClick(e, JSON.stringify(player))}\r\n                onStrategyCardClick={(strategyCardNumber) => props.onStrategyCardClick(strategyCardNumber, JSON.stringify(player))}\r\n                onPassButtonClick={() => props.onPassButtonClick(JSON.stringify(player))}\r\n                onTechClick={(techDefinition) => props.onTechClick(techDefinition, player)}\r\n                onSpeakerButtonClick={props.onSpeakerButtonClick}\r\n                onNaaluInitiativeButtonClick={props.onNaaluInitiativeButtonClick}\r\n            />\r\n        </Col>\r\n    );\r\n\r\n    const isAllPassed = isAllPlayersPassed(players);\r\n\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n            <Row>\r\n                {playerCards}\r\n            </Row>\r\n            <Row>\r\n                <Col xs={{span:2, offset:1}}>\r\n                    <Button variant=\"light\" type=\"button\" onClick={() => props.onToggleTimers()}>\r\n                        {props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                    </Button>\r\n                </Col>\r\n                <Col xs={{span:3, offset:6}}>\r\n                    <ButtonGroup>\r\n                        <Button type=\"button\" disabled={isAllPassed} onClick={() => props.onEndTurn()}>\r\n                            End Turn\r\n                        </Button>\r\n                        <Button type=\"button\" disabled={!isAllPassed} onClick={() => setShowEndRoundModal(true)}>\r\n                            End Round\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Col>\r\n            </Row>\r\n            <EndRoundConfirmModal \r\n                showModal={showEndRoundModal}\r\n                onConfirmModal={() => props.onEndRound()}\r\n                onCloseModal={() => setShowEndRoundModal(false)}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction PlayerCard(props) {\r\n    const player = props.player;\r\n    let playerBackgroundColour = player.colour ? player.colour.colour : null;\r\n    let playerTextColour = player.colour ? player.colour.textColour : null;\r\n\r\n    let playerButtons = player.strategies.map((strategy) =>\r\n        <Col key={\"strategy\" + strategy.strategyCard.number + \"Col\"}>\r\n            <button\r\n            key={strategy.strategyCard.number} \r\n            className=\"strategyCardButton\" \r\n            type=\"button\"\r\n            style={{backgroundColor: strategy.isUsed ? USED_STRATEGY_COLOUR : strategy.strategyCard.colour,}}\r\n            onClick={() => props.onStrategyCardClick(strategy.strategyCard.number)}\r\n            >\r\n                {strategy.strategyCard.number}\r\n            </button>\r\n        </Col>\r\n    );\r\n\r\n    if (player.isSpeaker) {\r\n        playerButtons.push(\r\n            <Col key=\"speakerTokenCol\">\r\n                <button\r\n                    className=\"speakerToken\"\r\n                    onClick={props.onSpeakerButtonClick}\r\n                />\r\n            </Col>\r\n        )\r\n    }\r\n\r\n    if (player.isNaaluTelepathic) { \r\n        playerButtons.push(\r\n            <Col key=\"naaluInitiativeTokenCol\">\r\n                <button\r\n                    className=\"naaluInitiative\"\r\n                    onClick={props.onNaaluInitiativeButtonClick}\r\n                />\r\n            </Col>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Card className=\"border-0\">\r\n            <h6 \r\n                className={`rounded currentPlayerBlock ${player.isActivePlayer ? \"activePlayerBlock\" : player.isPassed ? \"passedPlayerBlock\" : \"\"}`}\r\n                onClick={props.onEndTurn}\r\n            >\r\n                {player.isActivePlayer ? \"Current Player\" : player.isPassed ? \"Passed\" : \"\"}\r\n            </h6>\r\n            <Card className=\"playerCard\">\r\n                <Row noGutters style={{ \r\n                    backgroundColor: playerBackgroundColour, \r\n                    color: playerTextColour,\r\n                }}>\r\n                    <Col xs={2}>\r\n                        {/* TODO: Add faction icon */}\r\n                    </Col>\r\n                    <Col>\r\n                        <div>{player.playerName}</div>\r\n                        <div>{player.faction && player.faction.shortName}</div>\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                        <button \r\n                            className={\r\n                                `rounded passButton \r\n                                ${hasUnplayedStrategies(player) ? \"invisible\" : \r\n                                player.isPassed ? \"passButtonPassed\" : \"\"}`\r\n                            }\r\n                            onClick={props.onPassButtonClick}\r\n                            disabled={hasUnplayedStrategies(player)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <TimerBlock currentSeconds={props.playerTimer.currentSeconds} disabled={true} />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        <button\r\n                            className=\"victoryPointButton\"\r\n                            type=\"button\"\r\n                            onClick={props.onVictoryPointsClick}\r\n                            onContextMenu={props.onVictoryPointsClick}\r\n                        >\r\n                            {player.victoryPoints}\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n                <Row noGutters>\r\n                    {playerButtons}\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n            <TechPanel techs={player.techs} onTechClick={(techDefinition) => props.onTechClick(techDefinition)}/>\r\n            </Card>\r\n        </Card>\r\n    )\r\n}\r\n\r\nfunction EndRoundConfirmModal(props) {\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Body>\r\n                <h3>End the round?</h3>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n\r\nexport default StatusBoard;\r\n\r\n//#region functions\r\n\r\nfunction isAllPlayersPassed(players) {\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (!players[i].isPassed) {\r\n            return false;\r\n        }\r\n    }\r\n    return true;\r\n}\r\n\r\n\r\n//#endregion\r\n","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col, ButtonGroup} from 'react-bootstrap';\r\n\r\nimport './PlayAgenda.css';\r\n\r\nimport {agenda_store, planet_store} from './DataHelper.js';\r\n\r\nconst ELECTION_TARGET_PLAYER = \"Player\";\r\nconst ELECTION_TARGET_PLANET = \"Planet\";\r\nconst ELECTION_TARGET_HAZARDOUS = \"Hazardous\";\r\nconst ELECTION_TARGET_CULTURAL = \"Cultural\";\r\nconst ELECTION_TARGET_INDUSTRIAL = \"Industrial\";\r\n\r\nconst standardVoteOptions = [\r\n    \"For\",\r\n    \"Against\"\r\n]\r\n\r\nclass PlayAgenda extends React.Component {\r\n    handleNextAgenda() {\r\n        if (this.props.onNextAgenda) {\r\n            return () => this.props.onNextAgenda()\r\n        }\r\n    }\r\n\r\n    handleEndAgenda() {\r\n        if (this.props.onEndAgenda) {\r\n            return () => this.props.onEndAgenda()\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <AgendaForm\r\n                        selectedAgenda={this.props.selectedAgenda}\r\n                        onAgendaChange={this.props.onAgendaChange}\r\n                        playerDetails={this.props.playerDetails}\r\n                        onAvailableVotesClick={(e, playerString, delta) => this.props.onAvailableVotesClick(e, playerString, delta)}\r\n                        onSpentVotesClick={(e, playerString, delta) => this.props.onSpentVotesClick(e, playerString, delta)}\r\n                        onExtraVotesClick={(e, playerString, delta) => this.props.onExtraVotesClick(e, playerString, delta)}\r\n                        onVoteTargetChange={(e, playerString) => this.props.onVoteTargetChange(e, playerString)}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handleNextAgenda()}>\r\n                            Next Agenda\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handleEndAgenda()}>\r\n                            End Agenda Phase\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction AgendaForm(props) {\r\n    let votePanel = props.selectedAgenda ? \r\n    <VotePanel\r\n        playerDetails={props.playerDetails}\r\n        selectedAgenda={props.selectedAgenda}\r\n        onAvailableVotesClick={(e, playerString, delta) => props.onAvailableVotesClick(e, playerString, delta)}\r\n        onSpentVotesClick={(e, playerString, delta) => props.onSpentVotesClick(e, playerString, delta)}\r\n        onExtraVotesClick={(e, playerString, delta) => props.onExtraVotesClick(e, playerString, delta)}\r\n        onVoteTargetChange={(e, playerString) => props.onVoteTargetChange(e, playerString)}\r\n    />\r\n    : null\r\n\r\n    let resultsPanel = props.selectedAgenda ? \r\n    <ResultsPanel\r\n        playerDetails={props.playerDetails}\r\n    />\r\n    : null\r\n\r\n    return (\r\n        <div>\r\n            <Row>\r\n                <AgendaSelector\r\n                    selectedAgenda={props.selectedAgenda}\r\n                    onAgendaChange={props.onAgendaChange}\r\n                />\r\n            </Row>\r\n            <Row>\r\n                {votePanel}\r\n            </Row>\r\n            <Row>\r\n                {resultsPanel}\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nclass AgendaSelector extends React.Component {\r\n    getAgendaList() {\r\n        let agendaElements = [<option key=\"unselected\" value={null} hidden/>]\r\n        agendaElements = agendaElements.concat(agenda_store().map((agenda) => \r\n            <option key={agenda.name} value={JSON.stringify(agenda)}>\r\n                {agenda.name}\r\n            </option>));\r\n\r\n        let selectedAgenda = this.props.selectedAgenda ? JSON.stringify(this.props.selectedAgenda) : undefined;\r\n\r\n        return <select \r\n            className=\"agendaName\"\r\n            id=\"agendas\" \r\n            required \r\n            defaultValue={selectedAgenda} \r\n            onChange={this.props.onAgendaChange}\r\n        >\r\n            {agendaElements}\r\n        </select>;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"agendaCard\">\r\n                <Row>\r\n                    {this.getAgendaList()}\r\n                </Row>\r\n                <Row>\r\n                    <AgendaCard\r\n                        agenda={this.props.selectedAgenda}\r\n                    />\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction VotePanel(props) {\r\n    const players = props.playerDetails.slice();\r\n\r\n    //First voter should be the player immediately after the speaker\r\n    var firstVoterIndex = 0;\r\n    var argentZealIndex = -1;\r\n    for (let i = 0; i < players.length; i++) {\r\n        firstVoterIndex = players[i].isSpeaker ? (i + 1 % players.length) : firstVoterIndex;\r\n        argentZealIndex = players[i].faction.isArgentZeal ? i : argentZealIndex;\r\n    }\r\n\r\n    let playerVotePanels = Array(players.length).fill(null);\r\n    for (let i = 0; i < players.length; i++) {\r\n        var destinationIndex = (((i - firstVoterIndex) % players.length) + players.length) % players.length;\r\n        if (i === argentZealIndex) {\r\n            destinationIndex = 0;\r\n        }\r\n        else {\r\n            destinationIndex++;\r\n        }\r\n\r\n        playerVotePanels[destinationIndex] =\r\n        <PlayerVotePanel\r\n            key={i}\r\n            player={players[i]}\r\n            players={players}\r\n            selectedAgenda={props.selectedAgenda}\r\n            onAvailableVotesClick={(e, playerString, delta) => props.onAvailableVotesClick(e, playerString, delta)}\r\n            onSpentVotesClick={(e, playerString, delta) => props.onSpentVotesClick(e, playerString, delta)}\r\n            onExtraVotesClick={(e, playerString, delta) => props.onExtraVotesClick(e, playerString, delta)}\r\n            onVoteTargetChange={(e, playerString) => props.onVoteTargetChange(e, playerString)}\r\n        />\r\n    }\r\n        \r\n    return (\r\n        <Col>\r\n            <Row>\r\n                <Col xs={2} xl={1}/>\r\n                <Col xs={4} xl={3}/>\r\n                <Col xs={2} xl={2}>\r\n                    <p className=\"columnHeader\">\r\n                        Available\r\n                    </p>\r\n                </Col>\r\n                <Col xs={2} xl={2}>\r\n                    <p className=\"columnHeader\">\r\n                        Assigned\r\n                    </p>\r\n                </Col>\r\n                <Col xs={2} xl={2}>\r\n                    <p className=\"columnHeader\">\r\n                        Extra\r\n                    </p>\r\n                </Col>\r\n            </Row>\r\n            {playerVotePanels}\r\n        </Col>\r\n    );\r\n}\r\n\r\nfunction PlayerVotePanel(props) {\r\n        \r\n    \r\n    return (\r\n        <Row>\r\n            <Col xs={2} xl={1}>\r\n                <button \r\n                    className={`speakerToken ${props.player.isSpeaker ? \"\" : \"invisible\"}`}\r\n                />\r\n            </Col>\r\n            <Col xs={4} xl={3}>\r\n                <input\r\n                    key=\"playerName\"\r\n                    type=\"text\"\r\n                    defaultValue={props.player.playerName}\r\n                    disabled\r\n                />\r\n            </Col>\r\n            <Col xs={2} xl={2}>\r\n                <ButtonGroup>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"tens\" \r\n                        className=\"digitButton tens\"\r\n                        onClick={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 10)}\r\n                        onContextMenu={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 10)}\r\n                    >\r\n                        {props.player.availableVotes >= 10 ? Math.floor(props.player.availableVotes / 10) : \"\"}\r\n                    </Button>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"ones\" \r\n                        className=\"digitButton ones\"\r\n                        onClick={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 1)}\r\n                        onContextMenu={e => props.onAvailableVotesClick(e, JSON.stringify(props.player), 1)}\r\n                    >\r\n                        {props.player.availableVotes % 10}\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n            <Col xs={2} xl={2}>\r\n                <ButtonGroup>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"tens\" \r\n                        className=\"digitButton tens\"\r\n                        onClick={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 10)}\r\n                        onContextMenu={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 10)}\r\n                    >\r\n                        {props.player.spentVotes >= 10 ? Math.floor(props.player.spentVotes / 10) : \"\"}\r\n                    </Button>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"ones\" \r\n                        className=\"digitButton ones\"\r\n                        onClick={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 1)}\r\n                        onContextMenu={e => props.onSpentVotesClick(e, JSON.stringify(props.player), 1)}\r\n                    >\r\n                        {props.player.spentVotes % 10}\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n            <Col xs={2} xl={2}>\r\n                <ButtonGroup>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"tens\" \r\n                        className=\"digitButton tens\"\r\n                        onClick={e => props.onExtraVotesClick(e, JSON.stringify(props.player), 10)}\r\n                        onContextMenu={e => props.onExtraVotesClick(e, JSON.stringify(props.player), 10)}\r\n                    >\r\n                        {props.player.extraVotes >= 10 ? Math.floor(props.player.extraVotes / 10) : \"\"}\r\n                    </Button>\r\n                    <Button \r\n                        variant=\"light\"\r\n                        key=\"ones\" \r\n                        className=\"digitButton ones\"\r\n                        onClick={e => props.onExtraVotesClick(e, JSON.stringify(props.player), 1)}\r\n                        onContextMenu={e => props.onExtraVotesClick(e, JSON.stringify(props.player), 1)}\r\n                    >\r\n                        {props.player.extraVotes % 10}\r\n                    </Button>\r\n                </ButtonGroup>\r\n            </Col>\r\n            <Col>\r\n                <VoteTargetSelector\r\n                    voteTarget={props.player.voteTarget}\r\n                    selectedAgenda={props.selectedAgenda}\r\n                    onVoteTargetChange={e => props.onVoteTargetChange(e, JSON.stringify(props.player))}\r\n                    players={props.players}\r\n                />\r\n            </Col>\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction AgendaCard(props) {\r\n    let agenda = props.agenda;\r\n    let agendaCardDisplay = <div/>\r\n    if (agenda) {\r\n        agendaCardDisplay = <div className=\"agendaCardDisplay\">\r\n            <p className=\"agendaType\">\r\n                {agenda.type}\r\n            </p>\r\n            <p className=\"agendaElectionTarget\">\r\n                {agenda.electionTarget ? \"Elect \" + agenda.electionTarget : null}\r\n            </p>\r\n            <p className=\"agendaEffect\">\r\n                <b>\r\n                    {!agenda.electionTarget && \"For: \"}\r\n                </b>\r\n                {agenda.forEffect}\r\n            </p>\r\n            <p className=\"agendaEffect\">\r\n                <b>\r\n                    {!agenda.electionTarget && \"Against: \"}\r\n                </b>\r\n                {agenda.electionTarget ? \"\" : agenda.againstEffect ? agenda.againstEffect : \"No effect\"}\r\n            </p>\r\n        </div>\r\n    }\r\n    \r\n    return (\r\n        agendaCardDisplay\r\n    );\r\n}\r\n\r\nfunction VoteTargetSelector(props) {\r\n    let voteOptions = [\r\n        <option key=\"unselected\" value={null}/>,\r\n        <option key=\"Abstain\" value={\"Abstain\"}>\r\n            --Abstain\r\n        </option>\r\n    ]\r\n\r\n    if (props.selectedAgenda) {\r\n        switch (props.selectedAgenda.electionTargetType) {\r\n            case ELECTION_TARGET_PLAYER:\r\n                voteOptions = voteOptions.concat(getPlayerVoteOptions(props.players));\r\n                break;\r\n            case ELECTION_TARGET_PLANET:\r\n                voteOptions = voteOptions.concat(getPlanetVoteOptions());\r\n                break;\r\n            case ELECTION_TARGET_HAZARDOUS:\r\n            case ELECTION_TARGET_CULTURAL:\r\n            case ELECTION_TARGET_INDUSTRIAL:\r\n                voteOptions = voteOptions.concat(getPlanetVoteOptions(props.selectedAgenda.electionTargetType));\r\n                break;\r\n            default:\r\n                voteOptions = voteOptions.concat(getStandardVoteOptions());\r\n                break;\r\n        }\r\n    }\r\n\r\n    return <select \r\n        className=\"voteTargetSelector\"\r\n        required \r\n        defaultValue={props.voteTarget} \r\n        onChange={props.onVoteTargetChange}\r\n    >\r\n        {voteOptions}\r\n    </select>;\r\n}\r\n\r\nfunction getStandardVoteOptions() {\r\n    return standardVoteOptions.map((voteOption) => \r\n        <option key={voteOption} value={voteOption}>\r\n            {voteOption}\r\n        </option>);\r\n}\r\n\r\nfunction getPlayerVoteOptions(players) {\r\n    return players.map((player) => \r\n        <option key={player.playerName} value={player.playerName}>\r\n            {player.playerName}\r\n        </option>);\r\n}\r\n\r\nfunction getPlanetVoteOptions(electionTargetType) {\r\n    let planets = electionTargetType ? planet_store().filter((planet) => planet.trait === electionTargetType) : planet_store();\r\n\r\n    return planets.map((planet) => \r\n    <option key={planet.name} value={planet.name}>\r\n        {planet.name}\r\n    </option>);\r\n}\r\n\r\nfunction ResultsPanel(props) {\r\n    let players = props.playerDetails;\r\n    let resolutions = [];\r\n    for (let i = 0; i < players.length; i++) {\r\n        if (players[i].voteTarget && (players[i].spentVotes > 0 || players[i].extraVotes > 0 )) {\r\n            let existingResolution = null;\r\n            for (let j = 0; j < resolutions.length; j++) {\r\n                if (resolutions[j].resolution === players[i].voteTarget) {\r\n                    existingResolution = j;\r\n                }\r\n            }\r\n            if (existingResolution >= 0 && resolutions[existingResolution]) {\r\n                resolutions[existingResolution] = {\r\n                    resolution: resolutions[existingResolution].resolution,\r\n                    votes: resolutions[existingResolution].votes + players[i].spentVotes,\r\n                    extraVotes: resolutions[existingResolution].extraVotes + players[i].extraVotes,\r\n                }\r\n            }\r\n            else {\r\n                resolutions.push({\r\n                    resolution: players[i].voteTarget, \r\n                    votes: players[i].spentVotes,\r\n                    extraVotes: players[i].extraVotes,\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    let votedResolutions = null;\r\n    if (resolutions.length > 0) {\r\n        resolutions.sort((a,b) => (b.votes + b.extraVotes) - (a.votes + a.extraVotes));\r\n        votedResolutions = [];\r\n        for (let i = 0; i < resolutions.length; i++) {\r\n            votedResolutions.push(\r\n                <p className=\"votedResolution\" key={i}>\r\n                    {resolutions[i].resolution} - {resolutions[i].votes + resolutions[i].extraVotes} votes ({resolutions[i].votes} + {resolutions[i].extraVotes})\r\n                </p>\r\n            ); \r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {votedResolutions}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PlayAgenda;","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport {objective_store} from './DataHelper.js';\r\n\r\n\r\nexport default function ObjectiveSelectModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let selectedObjectives = props.objectives.map((objective) => objective.isRevealed ? objective : null);\r\n    selectedObjectives = selectedObjectives.filter((objective) => objective !== null);\r\n\r\n    let availableObjectives = objective_store().filter((objective) => objective.stage === props.stage);\r\n    availableObjectives = availableObjectives.filter(\r\n        (objective) => !selectedObjectives.some(\r\n            function (selectedObjective) {\r\n                return objective.id === selectedObjective.id;\r\n            }\r\n       )\r\n    );\r\n\r\n    let objectiveElements = Array(1);\r\n    objectiveElements[0] = <option key=\"unselected\" className=\"nullOption\" value={null} hidden/>\r\n    objectiveElements = objectiveElements.concat(availableObjectives.map(\r\n        (objective) => <option key={objective.id} value={JSON.stringify(objective)}>\r\n            {objective.name}\r\n        </option>));\r\n    \r\n    let objectiveSelect = <select id=\"objectives\" required onChange={props.onObjectiveChange}>\r\n        {objectiveElements}\r\n    </select>;\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>Select Public Objective</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {objectiveSelect}\r\n                </div>\r\n                <div className=\"d-flex flex-column\">\r\n                    <br/>\r\n                    <p className=\"objectiveLongDescription\">\r\n                        {props.selectedObjectiveSelection ? props.selectedObjectiveSelection.longDescription : \"\"}\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedObjectiveSelection}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function ObjectivePanel(props) {\r\n    let objectiveBlocks = Array(props.objectives.length);\r\n\r\n    for (let i = 0; i < props.objectives.length; i++) {\r\n        const objective = props.objectives[i];\r\n        objectiveBlocks[i] = <ObjectiveCard \r\n            key={objective.order} \r\n            name={objective.name} \r\n            stage={objective.stage} \r\n            shortDescription={objective.shortDescription} \r\n            isRevealed={objective.isRevealed} \r\n            onObjectiveCardClick={() => props.onObjectiveCardClick(i)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {objectiveBlocks}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction ObjectiveCard(props) {\r\n    let cardDisplay = props.isRevealed ? props.shortDescription : props.stage;\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                type=\"button\" \r\n                className={`objectiveCard stage${props.stage} ${props.isRevealed ? \"revealed\" : \"\"}`} \r\n                onClick={props.onObjectiveCardClick}\r\n            >\r\n                {cardDisplay}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nexport default function TokenAssignModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let playerList = [<option key=\"unselected\" value={null} hidden/>];\r\n    for (let i = 0; i < props.players.length; i++) {\r\n        let player = props.players[i];\r\n        if (player.playerNumber !== props.currentTokenOwnerNumber) {\r\n            playerList.push(\r\n                <option key={player.playerNumber} value={player.playerNumber}>\r\n                    {player.playerName + \" - \" + player.faction.shortName}\r\n                </option>\r\n            );\r\n        }\r\n    }\r\n\r\n    let playerSelect = <select id=\"tokenOwnerCandidates\" required onChange={props.onTokenOwnerChange}>\r\n        {playerList}\r\n    </select>\r\n\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>{props.title}</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {playerSelect}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedTokenOwnerNumber}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PlayerSelect from './PlayerSelect';\r\nimport StrategySelect from './StrategySelect';\r\nimport StatusBoard from './StatusBoard';\r\nimport PlayAgenda from './PlayAgenda';\r\nimport TimerBlock from './TimerBlock';\r\nimport ObjectiveSelectModal from './ObjectiveSelectModal';\r\nimport ObjectivePanel from './ObjectivePanel';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Row, Col } from 'react-bootstrap';\r\nimport TokenAssignModal from './TokenAssignModal';\r\n\r\nimport {hasUnplayedStrategies} from './Utils';\r\n\r\nimport './GameManager.css';\r\n\r\n//game modes\r\nconst MODE_PLAYER_SELECT = 1;\r\nconst MODE_STRATEGY = 2;\r\nconst MODE_STATUS_BOARD = 3;\r\nconst MODE_AGENDA = 4;\r\n\r\n//assign token owner modes\r\nconst MODE_NO_ASSIGN = 0;\r\nconst MODE_ASSIGN_SPEAKER = 1;\r\nconst MODE_ASSIGN_NAALU_INITIATIVE = 2;\r\n\r\nconst NUMBER_STRATEGIES = 8;\r\nconst NUMBER_OBJECTIVES_STAGE_ONE = 5;\r\nconst NUMBER_OBJECTIVES_STAGE_TWO = 5;\r\n\r\nconst POLITICS_CARD_NUMBER = 3;\r\n\r\nconst LEFT_CLICK = 1; //native event constant for a left click\r\nconst RIGHT_CLICK = 3; //native event constant for the opening of the context menu (i.e. right click)\r\n\r\n\r\nclass GameManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //View controls\r\n            gameMode: MODE_PLAYER_SELECT,\r\n            showObjectiveSelectModal: false,\r\n            tokenAssignModalMode: MODE_NO_ASSIGN,\r\n\r\n            //Temporary State\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null, //used for the objective select modal to record the current selection\r\n            selectedTokenOwnerNumber: null, //used for the token assignment modal to record the new owner selected\r\n            currentTokenOwnerNumber: null, //used for the token assignment modal as an input identifying the current token owner\r\n            tokenAssignModalTitle: null, //used to set the title of the token assignment modal\r\n            selectedAgenda: null,\r\n\r\n            //Game Details\r\n            playerDetails: null,\r\n            playerTimers: null,\r\n            roundNumber: 1,\r\n            isNaaluTelepathicActive: false,\r\n            totalGameTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            currentTurnTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            publicObjectives: this.fillPublicObjectives(),\r\n        };\r\n\r\n        window.addEventListener('beforeunload', (e) => {\r\n            e.preventDefault();\r\n            e.returnValue = '';\r\n        });\r\n    }\r\n\r\n    //#region Lifecycle\r\n    componentDidMount() {\r\n        this.heartbeat = setInterval(() => this.recalculateTimers(), 500);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.heartbeat);\r\n    }\r\n    //#endregion\r\n\r\n    //#region Event Handlers\r\n    handleStartGame(playerDetails) {\r\n        let playerTimers = Array(playerDetails.length);\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            playerTimers[i] = {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            }\r\n        }\r\n\r\n        let isNaaluTelepathicActive = false;\r\n        for (let i = 0; i < playerDetails.length; i++) {\r\n            if (playerDetails[i].faction.isNaaluTelepathic) {\r\n                isNaaluTelepathicActive = true;\r\n                playerDetails[i].isNaaluTelepathic = true;\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n            gameMode: MODE_STRATEGY,\r\n            isNaaluTelepathicActive: isNaaluTelepathicActive,\r\n        });\r\n\r\n        this.startGameTimer();\r\n    }\r\n\r\n    handlePlayerStrategyChange(e, playerNumber, strategyNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let newStrategy = {\r\n            strategyCard: JSON.parse(e.target.value),\r\n            isUsed: false,\r\n        }\r\n        playerDetails[playerNumber].strategies[strategyNumber] = newStrategy\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    //TODO Review the function name as it's likely to become confusing once strategy cards area added to the strategy select view. \r\n    // This one relates to clicking the card on the Status Board to indicate that the strategy has been played\r\n    handleStrategyCardClicked(strategyCardNumber, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (player.isPassed) {\r\n            return; //can't toggle strategy card if already passed\r\n        }\r\n\r\n        let isPlayingPolitics = false;\r\n\r\n        let newStrategies = [];\r\n        for (let i = 0; i < player.strategies.length; i++) {\r\n            newStrategies[i] = {...player.strategies[i]};\r\n            if (newStrategies[i].strategyCard.number === strategyCardNumber) {\r\n                newStrategies[i].isUsed = !newStrategies[i].isUsed;\r\n                if (strategyCardNumber === POLITICS_CARD_NUMBER && newStrategies[i].isUsed) {\r\n                    isPlayingPolitics = true;\r\n                }\r\n            }\r\n        }\r\n        \r\n        let newPlayer = {...player}; \r\n        newPlayer.strategies = newStrategies;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        \r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n        \r\n        if (isPlayingPolitics) {\r\n            this.handleSpeakerButtonClicked();\r\n        }\r\n    }\r\n\r\n    handlePassButtonClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (!player.isPassed && hasUnplayedStrategies(player)) {\r\n            return; //can't pass if strategy card is not yet played\r\n        }\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.isPassed = !newPlayer.isPassed;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartRound() {\r\n        let lowestInitiative = NUMBER_STRATEGIES;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            let playerStrategies = player.strategies.sort((a, b) => a.strategyCard.number - b.strategyCard.number);\r\n            let playerInitiative = player.isNaaluTelepathic ? 0 : playerStrategies[0].strategyCard.number; \r\n            if (playerInitiative <= lowestInitiative) {\r\n                lowestInitiative = playerInitiative;\r\n            }\r\n        }\r\n\r\n        let newPlayerDetails = this.state.playerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            newPlayer.strategies = player.strategies.sort((a, b) => a.strategyCard.number - b.strategyCard.number);\r\n            let playerInitiative = newPlayer.isNaaluTelepathic ? 0 : newPlayer.strategies[0].strategyCard.number; \r\n            newPlayer.isActivePlayer = playerInitiative === lowestInitiative;\r\n            return newPlayer;\r\n        });\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n            gameMode: MODE_STATUS_BOARD,\r\n        });\r\n\r\n        this.startGameTimer();\r\n        this.startTurnTimers();\r\n    }\r\n\r\n    handlePlayAgenda() {\r\n        this.setState({\r\n            gameMode: MODE_AGENDA,\r\n        });\r\n    }\r\n\r\n    handleTurnTimerClicked() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startTurnTimers();\r\n            this.startGameTimer(); //if turn timers are running, the game timer should be as well\r\n        }\r\n    }\r\n\r\n    handleGameTimerClicked() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers(); //if the game timer is stopped, all timers should be stopped\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n        }\r\n    }\r\n\r\n    handleEndRound() {\r\n        let playerDetails = this.state.playerDetails.slice().map(\r\n            player => ({\r\n                ...player,\r\n                strategies: [],\r\n                isPassed: false,\r\n            })\r\n        );\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            roundNumber: this.state.roundNumber + 1,\r\n            playerDetails: playerDetails,\r\n        });\r\n\r\n        this.stopTurnTimers(true); //turns aren't occurring between rounds\r\n        this.startGameTimer(); //activity means the game timer should almost certainly be on\r\n    }\r\n\r\n    handleToggleTimers() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n            this.state.gameMode === MODE_STATUS_BOARD && this.startTurnTimers();\r\n        }\r\n    }\r\n\r\n    handleVictoryPointClick(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVictoryPoints = player.victoryPoints;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints + 1;\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints - 1;\r\n        }\r\n        \r\n        if (newVictoryPoints >= 0 && newVictoryPoints <= (this.state.maxVictoryPoints ? this.state.maxVictoryPoints : 10)) {\r\n            let newPlayer = {...player};\r\n            newPlayer.victoryPoints = newVictoryPoints;\r\n            newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    handleAvailableVotesClick(e, playerString, delta) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newAvailableVotes = player.availableVotes;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newAvailableVotes = Math.min(99, player.availableVotes + delta);\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newAvailableVotes = Math.max(0, player.availableVotes - delta);\r\n        }\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.availableVotes = newAvailableVotes;\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleSpentVotesClick(e, playerString, delta) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newSpentVotes = player.spentVotes;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newSpentVotes = Math.min(player.availableVotes, player.spentVotes + delta);\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newSpentVotes = Math.max(0, player.spentVotes - delta);\r\n        }\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.spentVotes = newSpentVotes;\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleExtraVotesClick(e, playerString, delta) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newExtraVotes = player.extraVotes;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newExtraVotes = Math.min(99, player.extraVotes + delta);\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newExtraVotes = Math.max(0, player.extraVotes - delta);\r\n        }\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.extraVotes = newExtraVotes;\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleVoteTargetChange(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVoteTarget = e.target.value;\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.voteTarget = newVoteTarget;\r\n        if (newVoteTarget === \"Abstain\") {\r\n            newPlayer.spentVotes = 0;\r\n        }\r\n        \r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleEndTurn() {\r\n        this.startGameTimer();\r\n        this.restartTurnTimers();\r\n    }\r\n\r\n    handleObjectiveCardClicked(index) {\r\n        let objective = this.state.publicObjectives[index];\r\n        if (!objective.isRevealed && objective.order === this.nextUnrevealedObjective()) {\r\n            this.setState({ \r\n                showObjectiveSelectModal: true,\r\n                selectedObjective: objective,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleObjectiveChange(e) {\r\n        let newObjective = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedObjectiveSelection: newObjective,\r\n        });\r\n    }\r\n\r\n    handleCloseObjectiveSelectModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedObjectiveSelection && this.state.selectedObjective) {\r\n            let newObjective = {...this.state.selectedObjectiveSelection};\r\n            newObjective.isRevealed = true;\r\n            newObjective.order = this.state.selectedObjective.order;\r\n\r\n            let newPublicObjectives = this.state.publicObjectives.slice();\r\n            newPublicObjectives[this.state.selectedObjective.order] = newObjective;\r\n            \r\n            this.setState({\r\n                publicObjectives: newPublicObjectives,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            showObjectiveSelectModal: false,\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null,\r\n        });\r\n    }\r\n\r\n    handleAgendaChange(e) {\r\n        let newAgenda = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedAgenda: newAgenda,\r\n        });\r\n    }\r\n\r\n    handleNextAgenda() {\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        for (let i = 0; i < newPlayerDetails.length; i++) {\r\n            let player = {...newPlayerDetails[i]};\r\n            player.availableVotes = player.availableVotes - player.spentVotes;\r\n            player.spentVotes = 0;\r\n            player.extraVotes = 0;\r\n            player.voteTarget = null;\r\n            newPlayerDetails[i] = player;\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleEndAgenda() {\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        for (let i = 0; i < newPlayerDetails.length; i++) {\r\n            let player = {...newPlayerDetails[i]};\r\n            player.availableVotes = 0;\r\n            player.spentVotes = 0;\r\n            player.extraVotes = 0;\r\n            player.voteTarget = null;\r\n            newPlayerDetails[i] = player;\r\n        }\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            selectedAgenda: null,\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleSpeakerButtonClicked() {\r\n        let speakerNumber = null;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isSpeaker) {\r\n                speakerNumber = this.state.playerDetails[i].playerNumber;\r\n            }\r\n        }\r\n        this.setState({ \r\n            tokenAssignModalMode: MODE_ASSIGN_SPEAKER,\r\n            currentTokenOwnerNumber: speakerNumber,\r\n            tokenAssignModalTitle: \"Select new speaker\",\r\n        });\r\n    }\r\n\r\n    handleNaaluInitiativeButtonClicked() {\r\n        let naaluTelepathicPlayerNumber = null;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isNaaluTelepathic) {\r\n                naaluTelepathicPlayerNumber = this.state.playerDetails[i].playerNumber;\r\n            }\r\n        }\r\n        this.setState({ \r\n            tokenAssignModalMode: MODE_ASSIGN_NAALU_INITIATIVE,\r\n            currentTokenOwnerNumber: naaluTelepathicPlayerNumber,\r\n            tokenAssignModalTitle: \"Select new telepath\",\r\n        });\r\n    }\r\n\r\n    handleTokenOwnerChange(e) {\r\n        let newTokenOwnerNumber = e.target.value;\r\n        this.setState({\r\n            selectedTokenOwnerNumber: newTokenOwnerNumber,\r\n        });\r\n    }\r\n\r\n    handleCloseTokenAssignModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedTokenOwnerNumber) {\r\n            let newPlayerDetails = this.state.playerDetails.slice();\r\n            let oldOwner = {...newPlayerDetails[this.state.currentTokenOwnerNumber]}\r\n            let newOwner = {...newPlayerDetails[this.state.selectedTokenOwnerNumber]};\r\n\r\n            switch (this.state.tokenAssignModalMode) {\r\n                case MODE_ASSIGN_SPEAKER:\r\n                    oldOwner.isSpeaker = false;\r\n                    newOwner.isSpeaker = true;\r\n                    break;\r\n                case MODE_ASSIGN_NAALU_INITIATIVE:\r\n                    oldOwner.isNaaluTelepathic = false;\r\n                    newOwner.isNaaluTelepathic = true;\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n\r\n            newPlayerDetails[oldOwner.playerNumber] = oldOwner;\r\n            newPlayerDetails[newOwner.playerNumber] = newOwner;\r\n\r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            tokenAssignModalMode: MODE_NO_ASSIGN,\r\n            selectedTokenOwnerNumber: null,\r\n            currentTokenOwnerNumber: null,\r\n            tokenAssignModalTitle: null,\r\n        });\r\n    }\r\n\r\n    handleTechClicked(techDefinition, player) {\r\n        let newPlayer = {...player};\r\n        let newTechSets = player.techs.slice();\r\n        for (let i = 0; i < newTechSets.length; i++) {\r\n            let newTechs = newTechSets[i].map(tech => {\r\n                if (tech.techDefinition === techDefinition) {\r\n                    let newTech = {...tech};\r\n                    newTech.isResearched = !newTech.isResearched;\r\n                    return newTech;\r\n                }\r\n                return tech;\r\n            })\r\n            newTechSets[i] = newTechs;\r\n        }\r\n        newPlayer.techs = newTechSets;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n    //#endregion\r\n\r\n    //#region Commands\r\n    fillPublicObjectives() {\r\n        let numberObjectives = NUMBER_OBJECTIVES_STAGE_ONE + NUMBER_OBJECTIVES_STAGE_TWO;\r\n        let objectives = Array(numberObjectives);\r\n        for (let i = 0; i < numberObjectives; i++) {\r\n            objectives[i] = {\r\n                id: null,\r\n                order: i,\r\n                stage: i < NUMBER_OBJECTIVES_STAGE_ONE ? 1 : 2,\r\n                name: null,\r\n                longDescription: null,\r\n                shortDescription: null,\r\n                isRevealed: false,\r\n            }\r\n        }\r\n        return objectives;\r\n    }\r\n\r\n    nextUnrevealedObjective() {\r\n        for (let i = 0; i < this.state.publicObjectives.length; i++) {\r\n            if (!this.state.publicObjectives[i].isRevealed) {\r\n                return this.state.publicObjectives[i].order;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    recalculateTimers() {\r\n        if (this.state.totalGameTimer && this.state.totalGameTimer.isCounting) {\r\n            this.recalculateGameTime();\r\n        }\r\n        if (this.state.currentTurnTimer && this.state.currentTurnTimer.isCounting) {\r\n            this.recalculateTurnTime();\r\n        }\r\n    }\r\n\r\n    recalculateGameTime() {\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        this.setState({\r\n            totalGameTimer: timer,\r\n        });\r\n    }\r\n\r\n    recalculateTurnTime() {\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.currentSeconds = playerTimer.baseSeconds + Math.floor((Date.now() - playerTimer.countStartTime) / 1000);\r\n        playerTimers[playerNumber] = playerTimer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        });\r\n    }\r\n\r\n    startTurnTimers() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            let playerTimer = {...playerTimers[i]};\r\n            playerTimer.isCounting = i === playerNumber;\r\n            playerTimer.countStartTime = Date.now();\r\n            playerTimers[i] = playerTimer;\r\n    \r\n        }\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    stopTurnTimers(resetCurrentTurn) {\r\n        if (!this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = false;\r\n        if (resetCurrentTurn) {\r\n            timer.baseSeconds = 0;\r\n            timer.currentSeconds = 0;\r\n        }\r\n        else {\r\n            timer.baseSeconds = timer.currentSeconds;\r\n        }\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.isCounting = false;\r\n        playerTimer.baseSeconds = playerTimer.currentSeconds;\r\n        playerTimers[playerNumber] = playerTimer;\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    restartTurnTimers() {\r\n        let timer = {\r\n            baseSeconds: 0,\r\n            currentSeconds: 0,\r\n            countStartTime: Date.now(),\r\n            isCounting: true,\r\n        };\r\n\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let playerTimers = this.state.playerTimers.slice();\r\n\r\n        let currentPlayer = {...this.getActivePlayer()};\r\n        let currentPlayerTimer = {...playerTimers[currentPlayer.playerNumber]};\r\n        currentPlayerTimer.isCounting = false;\r\n        currentPlayerTimer.baseSeconds = currentPlayerTimer.currentSeconds;\r\n        currentPlayer.isActivePlayer = false;\r\n        playerTimers[currentPlayer.playerNumber] = currentPlayerTimer;\r\n        playerDetails[currentPlayer.playerNumber] = currentPlayer;\r\n\r\n        let nextPlayer = this.getNextPlayer(currentPlayer)\r\n        let nextPlayerTimer = {...playerTimers[nextPlayer.playerNumber]};\r\n        nextPlayerTimer.isCounting = true;\r\n        nextPlayerTimer.countStartTime = Date.now();\r\n        nextPlayer.isActivePlayer = true;\r\n        playerTimers[nextPlayer.playerNumber] = nextPlayerTimer;\r\n        playerDetails[nextPlayer.playerNumber] = nextPlayer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    startGameTimer() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    stopGameTimer() {\r\n        if (!this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.baseSeconds = timer.currentSeconds;\r\n        timer.isCounting = false;\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    getActivePlayer() {\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isActivePlayer) {\r\n                return this.state.playerDetails[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getNextPlayer(activePlayer) {\r\n        let nextPlayer = activePlayer;\r\n        //TODO Make Naalu initiative account for it being held my non-Naalu players\r\n        let activePlayerInitiative = activePlayer.isNaaluTelepathic ? 0 : activePlayer.strategies[0].strategyCard.number;\r\n        let initiativeRange = NUMBER_STRATEGIES + (this.state.isNaaluTelepathicActive ? 1 : 0);\r\n        // determine the highest initiative number that could possibly be next. Offset by the number of strategies to allow it to loop back;\r\n        let highestInitiativeNumber = activePlayerInitiative + initiativeRange - 1;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.isActivePlayer && !player.isPassed) {\r\n                // determine the player initiative number, offset by the number of strategies to allow it to loop back\r\n                let playerInitiativeNumber = player.isNaaluTelepathic ? 0 : player.strategies[0].strategyCard.number;\r\n                if (playerInitiativeNumber < activePlayerInitiative) {\r\n                    playerInitiativeNumber += initiativeRange;\r\n                }\r\n                if (playerInitiativeNumber < highestInitiativeNumber) {\r\n                    highestInitiativeNumber = playerInitiativeNumber;\r\n                    nextPlayer = player;\r\n                }\r\n            }\r\n        }\r\n        return nextPlayer;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Rendering methods\r\n    renderGameComponent() {\r\n        switch (this.state.gameMode) {\r\n            case MODE_PLAYER_SELECT:\r\n                return this.renderPlayerSelect();\r\n            case MODE_STRATEGY:\r\n                return this.renderStrategy();\r\n            case MODE_STATUS_BOARD:\r\n                return this.renderStatusBoard();\r\n            case MODE_AGENDA:\r\n                return this.renderAgenda();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    renderPlayerSelect() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <PlayerSelect onStartGame={playerDetails => this.handleStartGame(playerDetails)} />\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStrategy() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <StrategySelect\r\n                            playerDetails={this.state.playerDetails}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onStartRound={() => this.handleStartRound()}\r\n                            onPlayAgenda={() => this.handlePlayAgenda()}\r\n                            onPlayerStrategyChange={(e, playerNumber, strategyNumber) => this.handlePlayerStrategyChange(e, playerNumber, strategyNumber)}\r\n                            onSpeakerButtonClick={() => this.handleSpeakerButtonClicked()}\r\n                            />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStatusBoard() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(true)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <StatusBoard\r\n                            roundNumber={this.state.roundNumber}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            players={this.state.playerDetails}\r\n                            playerTimers={this.state.playerTimers}\r\n                            onEndTurn={() => this.handleEndTurn()}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onVictoryPointsClick={(e, playerString) => this.handleVictoryPointClick(e, playerString)}\r\n                            onStrategyCardClick={(strategyCardNumber, playerString) => this.handleStrategyCardClicked(strategyCardNumber, playerString)}\r\n                            onPassButtonClick={(playerString) => this.handlePassButtonClicked(playerString)}\r\n                            onEndRound={() => this.handleEndRound()}\r\n                            onTechClick={(techDefinition, player) => this.handleTechClicked(techDefinition, player)}\r\n                            onSpeakerButtonClick={() => this.handleSpeakerButtonClicked()}\r\n                            onNaaluInitiativeButtonClick={() => this.handleNaaluInitiativeButtonClicked()}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderAgenda() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    <Col xs={4} md={2} xl={1}>\r\n                        {this.renderObjectivePanel()}\r\n                    </Col>\r\n                    <Col>\r\n                        <PlayAgenda\r\n                            playerDetails={this.state.playerDetails}\r\n                            selectedAgenda={this.state.selectedAgenda}\r\n                            onAgendaChange={e => this.handleAgendaChange(e)}\r\n                            onNextAgenda={() => this.handleNextAgenda()}\r\n                            onEndAgenda={() => this.handleEndAgenda()}\r\n                            onAvailableVotesClick={(e, playerString, delta) => this.handleAvailableVotesClick(e, playerString, delta)}\r\n                            onSpentVotesClick={(e, playerString, delta) => this.handleSpentVotesClick(e, playerString, delta)}\r\n                            onExtraVotesClick={(e, playerString, delta) => this.handleExtraVotesClick(e, playerString, delta)}\r\n                            onVoteTargetChange={(e, playerString) => this.handleVoteTargetChange(e, playerString)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderGameHeader(showTurnTimer) {\r\n        return <GameHeader\r\n            roundNumber={this.state.roundNumber}\r\n            totalGameTimer={this.state.totalGameTimer}\r\n            showTurnTimer={showTurnTimer}\r\n            currentTurnTimer={this.state.currentTurnTimer}\r\n            onTurnTimerClick={() => this.handleTurnTimerClicked()}\r\n            onGameTimerClick={() => this.handleGameTimerClicked()}\r\n        />\r\n    }\r\n\r\n\r\n    renderObjectivePanel() {\r\n        return <ObjectivePanel\r\n            className=\"objectivePanel\"\r\n            objectives={this.state.publicObjectives}\r\n            onObjectiveCardClick={(index) => this.handleObjectiveCardClicked(index)}\r\n        />\r\n    }\r\n    //#endregion\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderGameComponent()}\r\n                <ObjectiveSelectModal\r\n                    showModal={this.state.showObjectiveSelectModal}\r\n                    objectives={this.state.publicObjectives}\r\n                    stage={this.state.selectedObjective ? this.state.selectedObjective.stage : null}\r\n                    selectedObjectiveSelection={this.state.selectedObjectiveSelection}\r\n                    onConfirmModal={() => this.handleCloseObjectiveSelectModal(true)}\r\n                    onCloseModal={() => this.handleCloseObjectiveSelectModal()}\r\n                    onObjectiveChange={e => this.handleObjectiveChange(e)}\r\n                />\r\n                <TokenAssignModal\r\n                    showModal={this.state.tokenAssignModalMode !== MODE_NO_ASSIGN}\r\n                    title={this.state.tokenAssignModalTitle}\r\n                    players={this.state.playerDetails}\r\n                    currentTokenOwnerNumber={this.state.currentTokenOwnerNumber}\r\n                    selectedTokenOwnerNumber={this.state.selectedTokenOwnerNumber}\r\n                    onConfirmModal={() => this.handleCloseTokenAssignModal(true)}\r\n                    onCloseModal={() => this.handleCloseTokenAssignModal()}\r\n                    onTokenOwnerChange={e => this.handleTokenOwnerChange(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction GameHeader(props) {\r\n    let turnTimer = props.showTurnTimer ?\r\n        <TimerBlock\r\n            id=\"turnTimer\"\r\n            label=\"Turn Time\"\r\n            currentSeconds={props.currentTurnTimer.currentSeconds}\r\n            onClick={() => props.onTurnTimerClick()}\r\n        /> :\r\n        null;\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"timerLabel\">{\"Round: \" + props.roundNumber}</label>\r\n            {turnTimer}\r\n            <TimerBlock\r\n                id=\"turnTimer\"\r\n                label=\"Total Game Time\"\r\n                currentSeconds={props.totalGameTimer.currentSeconds}\r\n                onClick={() => props.onGameTimerClick()}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameManager;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GameManager from './GameManager';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './custom.scss';\r\n\r\ndocument.oncontextmenu = (e) => e.preventDefault();\r\n\r\nReactDOM.render(\r\n    <GameManager/>,\r\n    document.getElementById(\"root\")\r\n  );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}