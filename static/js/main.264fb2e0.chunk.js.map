{"version":3,"sources":["PlayerSelect.js","StrategySelect.js","TimerBlock.js","TechPanel.js","StatusBoard.js","ObjectiveSelectModal.js","ObjectivePanel.js","GameManager.js","serviceWorker.js","index.js"],"names":["COLOURS","description","colour","PlayerSelect","props","playerDetails","Array","i","createPlayer","state","selectedNumberOfPlayers","playerNumber","playerName","faction","victoryPoints","isSpeaker","isActivePlayer","isPassed","deselected","this","setState","playerNumberSelections","fill","e","slice","target","value","JSON","parse","finalPlayerDetails","initialiseTechnologies","onStartGame","map","player","newPlayer","techSets","push","createPlayerTechnologies","tech_store","Biotic","Warfare","Propulsion","Cybernetic","shortName","Ship","Unit","Warsun","techs","techSet","techDefinition","isResearched","determineSelection","onClick","playerNumberButtonHandleClick","numberOfPlayers","onPlayerNameChange","handlePlayerNameChange","onPlayerFactionChange","handlePlayerFactionChange","onPlayerColourChange","handlePlayerColourChange","Button","type","handleStartGame","React","Component","PlayerNumberSelect","isSelected","PlayerNumberButton","selected","renderPlayerNumberButton","className","id","PlayerDetailForm","playerDetailEntries","key","playerDetail","onFactionChange","onColourChange","renderPlayerDetailEntries","PlayerDetailEntry","factionElements","hidden","concat","faction_store","stringify","fullName","required","defaultValue","onChange","colourElements","playerColour","getFactionList","getColourList","STRATEGIES","name","number","StrategySelect","onStartRound","Row","onPlayerStrategyChange","Col","variant","onToggleTimers","isGameActive","handleStartRound","PlayerStrategyForm","players","speakerIndex","length","playerStrategyEntries","destinationIndex","onStrategyChange","renderPlayerStrategyEntries","PlayerStrategyEntry","strategyElements","strategy","playerStrategy","disabled","getStrategyList","Timer","time","TimerBlock","totalSeconds","hours","Math","floor","minutes","seconds","parseTime","currentSeconds","interactive","label","TechPanel","techSetGroups","TechSetGroup","onTechClick","techButtons","span","xs","TechButton","tech","text","PlayerCard","playerStrategyButton","style","backgroundColor","isUsed","onStrategyCardClick","Card","onEndTurn","noGutters","onPassButtonClick","playerTimer","onVictoryPointsClick","onContextMenu","StatusBoard","sort","a","b","playerCards","playerTimers","offset","onEndRound","ObjectiveSelectModal","showModal","selectedObjectives","objectives","objective","isRevealed","filter","availableObjectives","objective_store","stage","some","selectedObjective","objectiveElements","objectiveSelect","onObjectiveChange","Modal","show","onHide","onCloseModal","centered","Header","Title","Body","selectedObjectiveSelection","longDescription","Footer","onConfirmModal","ObjectivePanel","objectiveBlocks","ObjectiveCard","order","shortDescription","onObjectiveCardClick","cardDisplay","GameHeader","turnTimer","showTurnTimer","currentTurnTimer","onTurnTimerClick","roundNumber","totalGameTimer","onGameTimerClick","GameManager","gameMode","showObjectiveSelectModal","baseSeconds","countStartTime","Date","now","isCounting","publicObjectives","fillPublicObjectives","heartbeat","setInterval","recalculateTimers","clearInterval","startGameTimer","newStrategy","playerString","newPlayerDetails","lowestInitiative","startTurnTimers","stopTurnTimers","stopGameTimer","newVictoryPoints","nativeEvent","which","maxVictoryPoints","restartTurnTimers","index","nextUnrevealedObjective","newObjective","isConfirmed","newPublicObjectives","newTechSets","newTechs","newTech","NUMBER_OBJECTIVES_STAGE_ONE","recalculateGameTime","recalculateTurnTime","timer","getActivePlayer","resetCurrentTurn","currentPlayer","currentPlayerTimer","nextPlayer","getNextPlayer","nextPlayerTimer","activePlayer","highestInitiativeNumber","playerInitiativeNumber","renderPlayerSelect","renderStrategy","renderStatusBoard","Container","fluid","renderGameHeader","renderObjectivePanel","handleToggleTimers","handlePlayerStrategyChange","handleEndTurn","handleVictoryPointClick","handleStrategyCardClicked","handlePassButtonClicked","handleEndRound","handleTechClicked","handleTurnTimerClicked","handleGameTimerClicked","handleObjectiveCardClicked","renderGameComponent","handleCloseObjectiveSelectModal","handleObjectiveChange","Boolean","window","location","hostname","match","document","oncontextmenu","preventDefault","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.264fb2e0.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport './PlayerSelect.css';\r\n\r\nimport faction_store from './data/factions.json';\r\nimport tech_store from './data/technologies.json';\r\n\r\nconst PLAYER_NUMBER_INDEX_OFFSET = 3; //player 3 is array index 0\r\nconst MAX_PLAYER_NUMBER = 6;\r\n\r\nconst COLOURS = [\r\n    {description: null, colour: null},\r\n    {description: \"Red\", colour: \"red\"},\r\n    {description: \"Blue\", colour: \"blue\"},\r\n    {description: \"Green\", colour: \"green\"},\r\n    {description: \"Yellow\", colour: \"yellow\"},\r\n    {description: \"Purple\", colour: \"purple\"},\r\n    {description: \"Black\", colour: \"black\"},\r\n]\r\n\r\nclass PlayerSelect extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        let playerDetails = Array(MAX_PLAYER_NUMBER);\r\n        for (let i = 0; i < MAX_PLAYER_NUMBER; i++) {\r\n            playerDetails[i] = this.createPlayer(i);\r\n        }\r\n\r\n        this.state = {\r\n            selectedNumberOfPlayers: null,\r\n            playerDetails: playerDetails,\r\n        };\r\n    }\r\n\r\n    createPlayer(playerNumber) {\r\n        var playerDetail = {\r\n            playerName: \"Player \" + (playerNumber + 1),\r\n            playerNumber: playerNumber,\r\n            faction: null,\r\n            colour: null,\r\n            victoryPoints: 0,\r\n            isSpeaker: playerNumber === 0 ? true : false,\r\n            isActivePlayer: playerNumber === 0 ? true : false,\r\n            isPassed: false,\r\n        }\r\n        return playerDetail;\r\n    }\r\n\r\n    playerNumberButtonHandleClick(playerNumber) {\r\n        //if the existing option is selected, deselect it\r\n        let deselected = this.state.selectedNumberOfPlayers === playerNumber\r\n\r\n        this.setState({\r\n            selectedNumberOfPlayers: deselected ? null : playerNumber,\r\n        });\r\n    }\r\n\r\n    determineSelection() {\r\n        let playerNumberSelections = Array(MAX_PLAYER_NUMBER).fill(false);\r\n        if (this.state.selectedNumberOfPlayers !== null) {\r\n            playerNumberSelections[this.state.selectedNumberOfPlayers - PLAYER_NUMBER_INDEX_OFFSET] = true;\r\n        }\r\n\r\n        return playerNumberSelections;\r\n    }\r\n\r\n    handlePlayerNameChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].playerName = e.target.value;\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handlePlayerFactionChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].faction = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n    \r\n    handlePlayerColourChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        playerDetails[playerNumber].colour = JSON.parse(e.target.value);\r\n        this.setState ({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartGame() {\r\n        let finalPlayerDetails = this.state.playerDetails.slice(0, this.state.selectedNumberOfPlayers)\r\n        finalPlayerDetails = this.initialiseTechnologies(finalPlayerDetails);\r\n\r\n        return this.props.onStartGame(finalPlayerDetails);\r\n    }\r\n\r\n    initialiseTechnologies(finalPlayerDetails) {\r\n        let playerDetails = finalPlayerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            let techSets = [];\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Biotic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Warfare));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Propulsion));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Cybernetic));\r\n            techSets.push(this.createPlayerTechnologies(tech_store[newPlayer.faction.shortName]));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Ship));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Unit));\r\n            techSets.push(this.createPlayerTechnologies(tech_store.Warsun));\r\n            newPlayer.techs = techSets;\r\n            return newPlayer;\r\n        });\r\n\r\n        return playerDetails;\r\n    }\r\n\r\n    createPlayerTechnologies(techSet) {\r\n        let playerTechs = techSet.map((techDefinition) => {\r\n            return {\r\n                techDefinition: techDefinition,\r\n                isResearched: false,\r\n            };\r\n        });\r\n\r\n        return playerTechs;\r\n    }\r\n\r\n    render() {\r\n        const playerNumberSelections = this.determineSelection();\r\n\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <h1>Number of Players</h1>\r\n                    <PlayerNumberSelect \r\n                        playerNumberSelections={playerNumberSelections}\r\n                        onClick={playerNumber => this.playerNumberButtonHandleClick(playerNumber)}\r\n                    />\r\n                </div>\r\n                <form>\r\n                    <PlayerDetailForm \r\n                        numberOfPlayers={this.state.selectedNumberOfPlayers} \r\n                        playerDetails={this.state.playerDetails}\r\n                        onPlayerNameChange={(e, playerNumber) => this.handlePlayerNameChange(e, playerNumber)}\r\n                        onPlayerFactionChange={(e, playerNumber) => this.handlePlayerFactionChange(e, playerNumber)}\r\n                        onPlayerColourChange={(e, playerNumber) => this.handlePlayerColourChange(e, playerNumber)}\r\n                    />\r\n                    <Button type=\"button\" onClick={() => this.handleStartGame()}>\r\n                        Start Game\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerNumberSelect extends React.Component {\r\n    renderPlayerNumberButton(playerNumber) {\r\n        const isSelected = this.props.playerNumberSelections[playerNumber - PLAYER_NUMBER_INDEX_OFFSET];\r\n\r\n        return (<PlayerNumberButton\r\n            value={playerNumber}\r\n            selected={isSelected}\r\n            onClick={() => this.props.onClick(playerNumber)}\r\n        />);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.renderPlayerNumberButton(3) }\r\n                { this.renderPlayerNumberButton(4) }\r\n                { this.renderPlayerNumberButton(5) }\r\n                { this.renderPlayerNumberButton(6) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerNumberButton(props) {\r\n    return (\r\n        <button \r\n            className={`playerNumButton ${props.selected ? \"selectedPlayerNumButton\" : \"\"}`} \r\n            id={`${props.value}Player`} \r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\n\r\nclass PlayerDetailForm extends React.Component {\r\n    renderPlayerDetailEntries() {\r\n        let playerDetailEntries = Array(this.props.numberOfPlayers);\r\n        for (let i = 0; i < this.props.numberOfPlayers; i++) {\r\n            playerDetailEntries[i] = <PlayerDetailEntry \r\n                key={i}\r\n                playerDetail={this.props.playerDetails[i]}\r\n                onPlayerNameChange={e => this.props.onPlayerNameChange(e, i)}\r\n                onFactionChange={e => this.props.onPlayerFactionChange(e, i)}\r\n                onColourChange={e => this.props.onPlayerColourChange(e, i)}\r\n            />;\r\n        }\r\n\r\n        return (<div>\r\n            {playerDetailEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerDetailEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerDetailEntry extends React.Component {\r\n    //TODO: could have a list of unselected factions passed down to prevent duplicates\r\n    //TODO: work out a better way of recording all the faction details (enum equivalent?)\r\n    getFactionList() {\r\n        let factionElements = Array(1);\r\n        factionElements[0] = <option key=\"unselected\" value={null} hidden/>\r\n        \r\n        factionElements = factionElements.concat(faction_store.map((faction) => \r\n            <option key={faction.shortName} value={JSON.stringify(faction)}>\r\n                {faction.fullName}\r\n            </option>));\r\n\r\n        //TODO: consider a datalist instead. Allows type-ahead but clearing is clunky\r\n        return <select \r\n            id=\"factions\" \r\n            required \r\n            defaultValue={this.props.playerDetail.faction}\r\n            onChange={this.props.onFactionChange}\r\n        >\r\n            {factionElements}\r\n        </select>;\r\n    }\r\n\r\n    getColourList() {\r\n        let colourElements = COLOURS.map((colour) => \r\n        <option key={colour.description} value={JSON.stringify(colour)}>\r\n            {colour.description}\r\n        </option>);\r\n\r\n        let playerColour = this.props.playerDetail.colour ? this.props.playerDetail.colour.colour : null;\r\n\r\n        return <select \r\n            id=\"colours\" \r\n            required \r\n            defaultValue={playerColour} \r\n            onChange={this.props.onColourChange}\r\n        >\r\n            {colourElements}\r\n        </select>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input \r\n                    type=\"text\"\r\n                    defaultValue={this.props.playerDetail.playerName} \r\n                    onChange={this.props.onPlayerNameChange}\r\n                />\r\n                {this.getFactionList()}\r\n                {this.getColourList()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PlayerSelect;","import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\nimport {Row, Col} from 'react-bootstrap';\r\n\r\nconst STRATEGIES = [\r\n    {name: \"\", number: null, colour: null},\r\n    {name: \"Leadership\", number: 1, colour: \"red\"},\r\n    {name: \"Diplomacy\", number: 2, colour: \"orange\"},\r\n    {name: \"Politics\", number: 3, colour: \"yellow\"},\r\n    {name: \"Construction\", number: 4, colour: \"#307843\"},\r\n    {name: \"Trade\", number: 5, colour: \"#58e87e\"},\r\n    {name: \"Warfare\", number: 6, colour: \"cyan\"},\r\n    {name: \"Technology\", number: 7, colour: \"#084bc9\"},\r\n    {name: \"Imperial\", number: 8, colour: \"purple\"},\r\n];\r\n\r\nclass StrategySelect extends React.Component {\r\n    handleStartRound() {\r\n        if (this.props.onStartRound) {\r\n            return () => this.props.onStartRound()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    {/*TODO: add strategy cards */}\r\n                </Row>\r\n                <Row>\r\n                    <PlayerStrategyForm\r\n                        playerDetails={this.props.playerDetails}\r\n                        onPlayerStrategyChange={(e, playerNumber) => this.props.onPlayerStrategyChange(e, playerNumber)}\r\n                    />\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Button variant=\"light\" type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                            {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col>\r\n                        <Button type=\"button\" onClick={this.handleStartRound()}>\r\n                            Start Round\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyForm extends React.Component {\r\n    renderPlayerStrategyEntries() {\r\n        const players = this.props.playerDetails.slice();\r\n        var speakerIndex = 0;\r\n        for (let i = 0; i < players.length; i++) {\r\n            speakerIndex = players[i].isSpeaker ? i : speakerIndex;\r\n        }\r\n\r\n        let playerStrategyEntries = Array(players.length).fill(null);\r\n        for (let i = 0; i < players.length; i++) {\r\n            let destinationIndex = (((i - speakerIndex) % players.length) + players.length) % players.length;\r\n            playerStrategyEntries[destinationIndex] =\r\n                <PlayerStrategyEntry\r\n                    key={players[i].playerNumber}\r\n                    playerDetail={players[i]}\r\n                    onStrategyChange={e => this.props.onPlayerStrategyChange(e, players[i].playerNumber)}\r\n                />\r\n        }\r\n            \r\n        return (<div>\r\n            {playerStrategyEntries}\r\n        </div>);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderPlayerStrategyEntries()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass PlayerStrategyEntry extends React.Component {\r\n    getStrategyList() {\r\n        let strategyElements = STRATEGIES.map((strategy) => \r\n            <option key={strategy.name} value={JSON.stringify(strategy)}>\r\n                {strategy.name}\r\n            </option>);\r\n\r\n        let playerStrategy = this.props.playerDetail.strategy ? this.props.playerDetail.strategy.description : null;\r\n\r\n        return <select \r\n            id=\"strategies\" \r\n            required \r\n            defaultValue={playerStrategy} \r\n            onChange={this.props.onStrategyChange}\r\n        >\r\n            {strategyElements}\r\n        </select>;\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input \r\n                    key=\"playerName\"\r\n                    type=\"text\"\r\n                    defaultValue={this.props.playerDetail.playerName} \r\n                    disabled\r\n                />\r\n                <input \r\n                    key=\"playerFaction\"\r\n                    type=\"text\"\r\n                    defaultValue={this.props.playerDetail.faction && this.props.playerDetail.faction.fullName} \r\n                    disabled\r\n                />\r\n                {this.getStrategyList()}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default StrategySelect;","import React from 'react';\r\nimport './TimerBlock.css';\r\n\r\nconst secondsInMinute = 60;\r\nconst secondsInHour = 60 * 60;\r\n\r\nfunction Timer(props) {\r\n    return (\r\n        <button className=\"timer\" onClick={props.onClick} disabled={props.disabled}>\r\n            {props.time}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass TimerBlock extends React.Component {\r\n    render() {\r\n        const time = parseTime(this.props.currentSeconds);\r\n\r\n        let interactive = this.props.onClick;\r\n\r\n        return (\r\n            <span className=\"Timer\">\r\n                <label className=\"timerLabel\">{this.props.label}</label>\r\n                <Timer time={time} disabled={this.props.disabled} onClick={interactive ? () => this.props.onClick(this.props.currentSeconds) : null} />\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\n//-------------------------------------------\r\n\r\nfunction parseTime(totalSeconds) {\r\n    if (!totalSeconds) {\r\n        return \"00:00\";\r\n    }\r\n\r\n    const hours = Math.floor(totalSeconds / secondsInHour);\r\n    const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\r\n    const seconds = totalSeconds % secondsInMinute;\r\n\r\n    var time = hours > 0 ? hours + \":\" : \"\";\r\n    time += (minutes < 10 ? \"0\" + minutes : minutes) + \":\";\r\n    time += seconds < 10 ? \"0\" + seconds : seconds;\r\n\r\n    return time;\r\n}\r\n\r\nexport default TimerBlock;","import React from 'react';\r\nimport {Row, Col} from 'react-bootstrap'\r\n\r\nimport './TechPanel.css';\r\n\r\n\r\nexport default function TechPanel(props) {\r\n    let techSetGroups = [];\r\n    for (let i = 0; i < props.techs.length; i++) {\r\n        techSetGroups[i] = <TechSetGroup \r\n            key={i} \r\n            techSet={props.techs[i]} \r\n            className=\"techSetGroup\" \r\n            onTechClick={(techDefinition) => props.onTechClick(techDefinition)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        techSetGroups\r\n    );\r\n}\r\n\r\n\r\nfunction TechSetGroup(props) {\r\n    let techButtons = [];\r\n    for (let i = 0; i < props.techSet.length; i++) {\r\n        let span = 12 / props.techSet.length;\r\n        techButtons[i] = \r\n            <Col key={i} xs={span}>\r\n                <TechButton \r\n                    key={props.techSet[i].techDefinition.name} \r\n                    tech={props.techSet[i]} \r\n                    onTechClick={() => props.onTechClick(props.techSet[i].techDefinition)} \r\n                />\r\n            </Col>\r\n    }\r\n\r\n    return (\r\n        <Row>\r\n            {techButtons}\r\n        </Row>\r\n    );\r\n}\r\n\r\n\r\nfunction TechButton(props) {\r\n    return (\r\n        <button \r\n            className={`rounded techButton ${props.tech.techDefinition.type} ${props.tech.isResearched ? \"researched\" : \"\"} `}\r\n            onClick={props.onTechClick}\r\n        >\r\n            {props.tech.techDefinition.text}\r\n        </button> \r\n    );\r\n}\r\n","import React from 'react';\r\nimport TimerBlock from './TimerBlock';\r\nimport Button from 'react-bootstrap/Button'\r\nimport {Row, Col} from 'react-bootstrap'\r\nimport Card from 'react-bootstrap/Card'\r\n\r\nimport './StatusBoard.css';\r\nimport TechPanel from './TechPanel';\r\n\r\nclass StatusBoard extends React.Component {\r\n    render() {\r\n        let players = this.props.players.slice();\r\n        players.sort((a, b) => a.strategy.number - b.strategy.number);\r\n\r\n        let playerCards = players.map(\r\n            (player) => \r\n            <Col key={player.playerNumber}>\r\n                <PlayerCard \r\n                    key={player.playerNumber} \r\n                    player={player}\r\n                    playerTimer={this.props.playerTimers[player.playerNumber]}\r\n                    onEndTurn={() => this.props.onEndTurn()}\r\n                    onVictoryPointsClick={e => this.props.onVictoryPointsClick(e, JSON.stringify(player))}\r\n                    onStrategyCardClick={() => this.props.onStrategyCardClick(JSON.stringify(player))}\r\n                    onPassButtonClick={() => this.props.onPassButtonClick(JSON.stringify(player))}\r\n                    onTechClick={(techDefinition) => this.props.onTechClick(techDefinition, player)}\r\n                />\r\n            </Col>\r\n        );\r\n\r\n        return (\r\n            <Row className=\"d-flex flex-column\">\r\n                <Row>\r\n                    {playerCards}\r\n                </Row>\r\n                <Row className=\"d-flex align-items-end\">\r\n                    <Col xs={{ span: 3, offset: 1}}>\r\n                        <Button variant=\"success\" type=\"button\" onClick={() => this.props.onEndTurn()}>\r\n                            End Turn\r\n                        </Button>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1}}>\r\n                        <Button variant=\"light\" type=\"button\" onClick={() => this.props.onToggleTimers()}>\r\n                            {this.props.isGameActive ? \"Pause Game\" : \"Resume Game\"}\r\n                        </Button>\r\n                    </Col>\r\n                    <Col xs={{ span: 3, offset: 1}}>\r\n                        <Button type=\"button\" onClick={() => this.props.onEndRound()}>\r\n                            End Round\r\n                        </Button>\r\n                    </Col>\r\n                </Row>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nfunction PlayerCard(props) {\r\n    const player = props.player;\r\n    let playerColour = player.colour ? player.colour.colour : null;\r\n    let playerStrategy = player.strategy;\r\n    let playerStrategyButton = playerStrategy ? \r\n        <button \r\n            className=\"strategyCardButton\" \r\n            type=\"button\"\r\n            style={{backgroundColor: playerStrategy.isUsed ? \"grey\" : playerStrategy.colour,}}\r\n            onClick={props.onStrategyCardClick}\r\n        >\r\n            {playerStrategy.number}\r\n        </button> : \r\n        null;\r\n\r\n    return (\r\n        <Card className=\"border-0\">\r\n            <h6 \r\n                className={`rounded currentPlayerBlock ${player.isActivePlayer ? \"activePlayerBlock\" : player.isPassed ? \"passedPlayerBlock\" : \"\"}`}\r\n                onClick={props.onEndTurn}\r\n            >\r\n                {player.isActivePlayer ? \"Current Player\" : player.isPassed ? \"Passed\" : \"\"}\r\n            </h6>\r\n            <Card className=\"playerCard\">\r\n                <Row noGutters style={{ backgroundColor: playerColour, }}>\r\n                    <Col xs={2}>\r\n                        {/* TODO: Add faction icon */}\r\n                    </Col>\r\n                    <Col>\r\n                        <div>{player.playerName}</div>\r\n                        <div>{player.faction && player.faction.shortName}</div>\r\n                    </Col>\r\n                    <Col xs={2}>\r\n                        <button \r\n                            className={\r\n                                `rounded passButton \r\n                                ${!player.strategy.isUsed ? \"invisible\" : \r\n                                player.isPassed ? \"passButtonPassed\" : \"\"}`\r\n                            }\r\n                            onClick={props.onPassButtonClick}\r\n                            disabled={!player.strategy.isUsed}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <TimerBlock currentSeconds={props.playerTimer.currentSeconds} disabled={true} />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        <button\r\n                            className=\"victoryPointButton\"\r\n                            type=\"button\"\r\n                            onClick={props.onVictoryPointsClick}\r\n                            onContextMenu={props.onVictoryPointsClick}\r\n                        >\r\n                            {player.victoryPoints}\r\n                        </button>\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n                <Row noGutters>\r\n                    <Col>\r\n                        {playerStrategyButton}\r\n                    </Col>\r\n                </Row>\r\n                <Row noGutters className=\"flex-column\">\r\n                    <hr className=\"playerCardDivider\" />\r\n                </Row>\r\n            <TechPanel techs={player.techs} onTechClick={(techDefinition) => props.onTechClick(techDefinition)}/>\r\n            </Card>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default StatusBoard;","import React from 'react';\r\nimport Modal from 'react-bootstrap/Modal';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nimport objective_store from './data/objectives.json';\r\n\r\nexport default function ObjectiveSelectModal(props) {\r\n    if (!props.showModal) {\r\n        return null;\r\n    }\r\n\r\n    let selectedObjectives = props.objectives.map((objective) => objective.isRevealed ? objective : null);\r\n    selectedObjectives = selectedObjectives.filter((objective) => objective !== null);\r\n\r\n    let availableObjectives = objective_store.filter((objective) => objective.stage === props.stage);\r\n    availableObjectives = availableObjectives.filter(\r\n        (objective) => !selectedObjectives.some(\r\n            function (selectedObjective) {\r\n                return objective.id === selectedObjective.id;\r\n            }\r\n       )\r\n    );\r\n\r\n    let objectiveElements = Array(1);\r\n    objectiveElements[0] = <option key=\"unselected\" className=\"nullOption\" value={null} hidden/>\r\n    objectiveElements = objectiveElements.concat(availableObjectives.map(\r\n        (objective) => <option key={objective.id} value={JSON.stringify(objective)}>\r\n            {objective.name}\r\n        </option>));\r\n    \r\n    let objectiveSelect = <select id=\"objectives\" required onChange={props.onObjectiveChange}>\r\n        {objectiveElements}\r\n    </select>;\r\n\r\n    return (\r\n        <Modal show={props.showModal} onHide={props.onCloseModal} centered>\r\n            <Modal.Header>\r\n                <Modal.Title>Select Public Objective</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <div className=\"d-flex flex-column\">\r\n                    {objectiveSelect}\r\n                </div>\r\n                <div className=\"d-flex flex-column\">\r\n                    <br/>\r\n                    <p className=\"objectiveLongDescription\">\r\n                        {props.selectedObjectiveSelection ? props.selectedObjectiveSelection.longDescription : \"\"}\r\n                    </p>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={props.onCloseModal}>\r\n                    Cancel\r\n                </Button>\r\n                <Button variant=\"primary\" onClick={props.onConfirmModal} disabled={!props.selectedObjectiveSelection}>\r\n                    Confirm\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n    );\r\n}\r\n","import React from 'react';\r\n\r\nexport default function ObjectivePanel(props) {\r\n    let objectiveBlocks = Array(props.objectives.length);\r\n\r\n    for (let i = 0; i < props.objectives.length; i++) {\r\n        const objective = props.objectives[i];\r\n        objectiveBlocks[i] = <ObjectiveCard \r\n            key={objective.order} \r\n            name={objective.name} \r\n            stage={objective.stage} \r\n            shortDescription={objective.shortDescription} \r\n            isRevealed={objective.isRevealed} \r\n            onObjectiveCardClick={() => props.onObjectiveCardClick(i)} \r\n        />;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {objectiveBlocks}\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nfunction ObjectiveCard(props) {\r\n    let cardDisplay = props.isRevealed ? props.shortDescription : props.stage;\r\n\r\n    return (\r\n        <div>\r\n            <button \r\n                type=\"button\" \r\n                className={`objectiveCard stage${props.stage} ${props.isRevealed ? \"revealed\" : \"\"}`} \r\n                onClick={props.onObjectiveCardClick}\r\n            >\r\n                {cardDisplay}\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport PlayerSelect from './PlayerSelect';\r\nimport StrategySelect from './StrategySelect';\r\nimport StatusBoard from './StatusBoard';\r\nimport TimerBlock from './TimerBlock';\r\nimport ObjectiveSelectModal from './ObjectiveSelectModal';\r\nimport ObjectivePanel from './ObjectivePanel';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nimport './GameManager.css';\r\n\r\nconst MODE_PLAYER_SELECT = 1;\r\nconst MODE_STRATEGY = 2;\r\nconst MODE_STATUS_BOARD = 3;\r\n\r\nconst NUMBER_STRATEGIES = 8;\r\nconst NUMBER_OBJECTIVES_STAGE_ONE = 5;\r\nconst NUMBER_OBJECTIVES_STAGE_TWO = 5;\r\n\r\nconst LEFT_CLICK = 1; //native event constant for a left click\r\nconst RIGHT_CLICK = 3; //native event constant for the opening of the context menu (i.e. right click)\r\n\r\n\r\nclass GameManager extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            //View controls\r\n            gameMode: MODE_PLAYER_SELECT,\r\n            showObjectiveSelectModal: false,\r\n\r\n            //Temporary State\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null, //used for the objective select modal to record the current selection\r\n\r\n            //Game Details\r\n            playerDetails: null,\r\n            playerTimers: null,\r\n            roundNumber: 1,\r\n            totalGameTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            currentTurnTimer: {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            },\r\n            publicObjectives: this.fillPublicObjectives(),\r\n        };\r\n    }\r\n\r\n    //#region Lifecycle\r\n    componentDidMount() {\r\n        this.heartbeat = setInterval(() => this.recalculateTimers(), 500);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.heartbeat);\r\n    }\r\n    //#endregion\r\n\r\n    //#region Event Handlers\r\n    handleStartGame(playerDetails) {\r\n        let playerTimers = Array(playerDetails.length);\r\n        for (let i = 0; i < playerTimers.length; i++) {\r\n            playerTimers[i] = {\r\n                baseSeconds: 0,\r\n                currentSeconds: 0,\r\n                countStartTime: Date.now(),\r\n                isCounting: false,\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n            gameMode: MODE_STRATEGY,\r\n        });\r\n\r\n        this.startGameTimer();\r\n    }\r\n\r\n    handlePlayerStrategyChange(e, playerNumber) {\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let newStrategy = JSON.parse(e.target.value);\r\n        newStrategy.isUsed = false;\r\n        playerDetails[playerNumber].strategy = newStrategy\r\n\r\n        this.setState({\r\n            playerDetails: playerDetails,\r\n        });\r\n    }\r\n\r\n    //TODO Review the function name as it's likely to become confusing once strategy cards area added to the strategy select view\r\n    handleStrategyCardClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (player.isPassed) {\r\n            return; //can't toggle strategy card if already passed\r\n        }\r\n\r\n        let newStrategy = {...player.strategy};\r\n        newStrategy.isUsed = !newStrategy.isUsed;\r\n        \r\n        let newPlayer = {...player};\r\n        newPlayer.strategy = newStrategy;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handlePassButtonClicked(playerString) {\r\n        let player = JSON.parse(playerString);\r\n        if (!player.isPassed && !player.strategy.isUsed) {\r\n            return; //can't pass if strategy card is not yet played\r\n        }\r\n\r\n        let newPlayer = {...player};\r\n        newPlayer.isPassed = !newPlayer.isPassed;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n\r\n    handleStartRound() {\r\n        let lowestInitiative = NUMBER_STRATEGIES;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].strategy.number <= lowestInitiative) {\r\n                lowestInitiative = this.state.playerDetails[i].strategy.number;\r\n            }\r\n        }\r\n\r\n        let newPlayerDetails = this.state.playerDetails.map((player) => {\r\n            let newPlayer = {...player};\r\n            newPlayer.isActivePlayer = newPlayer.strategy.number === lowestInitiative;\r\n            return newPlayer;\r\n        });\r\n\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n            gameMode: MODE_STATUS_BOARD,\r\n        });\r\n\r\n        this.startGameTimer();\r\n        this.startTurnTimers();\r\n    }\r\n\r\n    handleTurnTimerClicked() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startTurnTimers();\r\n            this.startGameTimer(); //if turn timers are running, the game timer should be as well\r\n        }\r\n    }\r\n\r\n    handleGameTimerClicked() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers(); //if the game timer is stopped, all timers should be stopped\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n        }\r\n    }\r\n\r\n    handleEndRound() {\r\n        let playerDetails = this.state.playerDetails.slice().map(\r\n            player => ({\r\n                ...player,\r\n                strategy: null,\r\n                isPassed: false,\r\n            })\r\n        );\r\n\r\n        this.setState({\r\n            gameMode: MODE_STRATEGY,\r\n            roundNumber: this.state.roundNumber + 1,\r\n            playerDetails: playerDetails,\r\n        });\r\n\r\n        this.stopTurnTimers(true); //turns aren't occurring between rounds\r\n        this.startGameTimer(); //activity means the game timer should almost certainly be on\r\n    }\r\n\r\n    handleToggleTimers() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            this.stopGameTimer();\r\n            this.stopTurnTimers();\r\n        }\r\n        else {\r\n            this.startGameTimer();\r\n            this.state.gameMode === MODE_STATUS_BOARD && this.startTurnTimers();\r\n        }\r\n    }\r\n\r\n    handleVictoryPointClick(e, playerString) {\r\n        let player = JSON.parse(playerString);\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        let newVictoryPoints = player.victoryPoints;\r\n\r\n        if (e.nativeEvent.which === LEFT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints + 1;\r\n        }\r\n        else if (e.nativeEvent.which === RIGHT_CLICK) {\r\n            newVictoryPoints = player.victoryPoints - 1;\r\n        }\r\n        \r\n        if (newVictoryPoints >= 0 && newVictoryPoints <= (this.state.maxVictoryPoints ? this.state.maxVictoryPoints : 10)) {\r\n            let newPlayer = {...player};\r\n            newPlayer.victoryPoints = newVictoryPoints;\r\n            newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n            this.setState({\r\n                playerDetails: newPlayerDetails,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleEndTurn() {\r\n        this.startGameTimer();\r\n        this.restartTurnTimers();\r\n    }\r\n\r\n    handleObjectiveCardClicked(index) {\r\n        let objective = this.state.publicObjectives[index];\r\n        if (!objective.isRevealed && objective.order === this.nextUnrevealedObjective()) {\r\n            this.setState({ \r\n                showObjectiveSelectModal: true,\r\n                selectedObjective: objective,\r\n            });\r\n        }\r\n    }\r\n\r\n    handleObjectiveChange(e) {\r\n        let newObjective = JSON.parse(e.target.value);\r\n        this.setState({\r\n            selectedObjectiveSelection: newObjective,\r\n        });\r\n    }\r\n\r\n    handleCloseObjectiveSelectModal(isConfirmed) {\r\n        if(isConfirmed && this.state.selectedObjectiveSelection && this.state.selectedObjective) {\r\n            let newObjective = {...this.state.selectedObjectiveSelection};\r\n            newObjective.isRevealed = true;\r\n            newObjective.order = this.state.selectedObjective.order;\r\n\r\n            let newPublicObjectives = this.state.publicObjectives.slice();\r\n            newPublicObjectives[this.state.selectedObjective.order] = newObjective;\r\n            \r\n            this.setState({\r\n                publicObjectives: newPublicObjectives,\r\n                showObjectiveSelectModal: false,\r\n            });\r\n        }\r\n\r\n        this.setState({\r\n            showObjectiveSelectModal: false,\r\n            selectedObjective: null,\r\n            selectedObjectiveSelection: null,\r\n        });\r\n    }\r\n\r\n    handleTechClicked(techDefinition, player) {\r\n        let newPlayer = {...player};\r\n        let newTechSets = player.techs.slice();\r\n        for (let i = 0; i < newTechSets.length; i++) {\r\n            let newTechs = newTechSets[i].map(tech => {\r\n                if (tech.techDefinition === techDefinition) {\r\n                    let newTech = {...tech};\r\n                    newTech.isResearched = !newTech.isResearched;\r\n                    return newTech;\r\n                }\r\n                return tech;\r\n            })\r\n            newTechSets[i] = newTechs;\r\n        }\r\n        newPlayer.techs = newTechSets;\r\n\r\n        let newPlayerDetails = this.state.playerDetails.slice();\r\n        newPlayerDetails[newPlayer.playerNumber] = newPlayer;\r\n        this.setState({\r\n            playerDetails: newPlayerDetails,\r\n        });\r\n    }\r\n    //#endregion\r\n\r\n    //#region Commands\r\n    fillPublicObjectives() {\r\n        let numberObjectives = NUMBER_OBJECTIVES_STAGE_ONE + NUMBER_OBJECTIVES_STAGE_TWO;\r\n        let objectives = Array(numberObjectives);\r\n        for (let i = 0; i < numberObjectives; i++) {\r\n            objectives[i] = {\r\n                id: null,\r\n                order: i,\r\n                stage: i < NUMBER_OBJECTIVES_STAGE_ONE ? 1 : 2,\r\n                name: null,\r\n                longDescription: null,\r\n                shortDescription: null,\r\n                isRevealed: false,\r\n            }\r\n        }\r\n        return objectives;\r\n    }\r\n\r\n    nextUnrevealedObjective() {\r\n        for (let i = 0; i < this.state.publicObjectives.length; i++) {\r\n            if (!this.state.publicObjectives[i].isRevealed) {\r\n                return this.state.publicObjectives[i].order;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    recalculateTimers() {\r\n        if (this.state.totalGameTimer && this.state.totalGameTimer.isCounting) {\r\n            this.recalculateGameTime();\r\n        }\r\n        if (this.state.currentTurnTimer && this.state.currentTurnTimer.isCounting) {\r\n            this.recalculateTurnTime();\r\n        }\r\n    }\r\n\r\n    recalculateGameTime() {\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        this.setState({\r\n            totalGameTimer: timer,\r\n        });\r\n    }\r\n\r\n    recalculateTurnTime() {\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.currentSeconds = timer.baseSeconds + Math.floor((Date.now() - timer.countStartTime) / 1000);\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.currentSeconds = playerTimer.baseSeconds + Math.floor((Date.now() - playerTimer.countStartTime) / 1000);\r\n        playerTimers[playerNumber] = playerTimer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        });\r\n    }\r\n\r\n    startTurnTimers() {\r\n        if (this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.isCounting = true;\r\n        playerTimer.countStartTime = Date.now();\r\n        playerTimers[playerNumber] = playerTimer;\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    stopTurnTimers(resetCurrentTurn) {\r\n        if (!this.state.currentTurnTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.currentTurnTimer };\r\n        timer.isCounting = false;\r\n        if (resetCurrentTurn) {\r\n            timer.baseSeconds = 0;\r\n            timer.currentSeconds = 0;\r\n        }\r\n        else {\r\n            timer.baseSeconds = timer.currentSeconds;\r\n        }\r\n\r\n        let playerTimers = this.state.playerTimers.slice();\r\n        const playerNumber = this.getActivePlayer().playerNumber;\r\n        let playerTimer = {...playerTimers[playerNumber]};\r\n        playerTimer.isCounting = false;\r\n        playerTimer.baseSeconds = playerTimer.currentSeconds;\r\n        playerTimers[playerNumber] = playerTimer;\r\n\r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    restartTurnTimers() {\r\n        let timer = {\r\n            baseSeconds: 0,\r\n            currentSeconds: 0,\r\n            countStartTime: Date.now(),\r\n            isCounting: true,\r\n        };\r\n\r\n        let playerDetails = this.state.playerDetails.slice();\r\n        let playerTimers = this.state.playerTimers.slice();\r\n\r\n        let currentPlayer = {...this.getActivePlayer()};\r\n        let currentPlayerTimer = {...playerTimers[currentPlayer.playerNumber]};\r\n        currentPlayerTimer.isCounting = false;\r\n        currentPlayerTimer.baseSeconds = currentPlayerTimer.currentSeconds;\r\n        currentPlayer.isActivePlayer = false;\r\n        playerTimers[currentPlayer.playerNumber] = currentPlayerTimer;\r\n        playerDetails[currentPlayer.playerNumber] = currentPlayer;\r\n\r\n        let nextPlayer = this.getNextPlayer(currentPlayer)\r\n        let nextPlayerTimer = {...playerTimers[nextPlayer.playerNumber]};\r\n        nextPlayerTimer.isCounting = true;\r\n        nextPlayerTimer.countStartTime = Date.now();\r\n        nextPlayer.isActivePlayer = true;\r\n        playerTimers[nextPlayer.playerNumber] = nextPlayerTimer;\r\n        playerDetails[nextPlayer.playerNumber] = nextPlayer;\r\n        \r\n        this.setState({\r\n            currentTurnTimer: timer,\r\n            playerDetails: playerDetails,\r\n            playerTimers: playerTimers,\r\n        })\r\n    }\r\n\r\n    startGameTimer() {\r\n        if (this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already counting\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.isCounting = true;\r\n        timer.countStartTime = Date.now();\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    stopGameTimer() {\r\n        if (!this.state.totalGameTimer.isCounting) {\r\n            return; //do nothing if already stopped\r\n        }\r\n        let timer = { ...this.state.totalGameTimer };\r\n        timer.baseSeconds = timer.currentSeconds;\r\n        timer.isCounting = false;\r\n\r\n        this.setState({\r\n            totalGameTimer: timer\r\n        })\r\n    }\r\n\r\n    getActivePlayer() {\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            if (this.state.playerDetails[i].isActivePlayer) {\r\n                return this.state.playerDetails[i];\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    getNextPlayer(activePlayer) {\r\n        //TODO Factor in Naalu initiative (race or promissory)\r\n        let nextPlayer = activePlayer;\r\n        // determine the highest initiative number that could possibly be next. Offset by the number of strategies to allow it to loop back;\r\n        let highestInitiativeNumber = activePlayer.strategy.number + NUMBER_STRATEGIES - 1;\r\n        for (let i = 0; i < this.state.playerDetails.length; i++) {\r\n            let player = this.state.playerDetails[i];\r\n            if (!player.isActivePlayer && !player.isPassed) {\r\n                // determine the player initiative number, offset by the number of strategies to allow it to loop back\r\n                let playerInitiativeNumber =\r\n                    player.strategy.number < activePlayer.strategy.number ?\r\n                        player.strategy.number + NUMBER_STRATEGIES :\r\n                        player.strategy.number;\r\n                if (playerInitiativeNumber < highestInitiativeNumber) {\r\n                    highestInitiativeNumber = playerInitiativeNumber;\r\n                    nextPlayer = player;\r\n                }\r\n            }\r\n        }\r\n        return nextPlayer;\r\n    }\r\n    //#endregion\r\n\r\n    //#region Rendering methods\r\n    renderGameComponent() {\r\n        switch (this.state.gameMode) {\r\n            case MODE_PLAYER_SELECT:\r\n                return this.renderPlayerSelect();\r\n            case MODE_STRATEGY:\r\n                return this.renderStrategy();\r\n            case MODE_STATUS_BOARD:\r\n                return this.renderStatusBoard();\r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n\r\n    renderPlayerSelect() {\r\n        return (\r\n            <div>\r\n                <PlayerSelect onStartGame={playerDetails => this.handleStartGame(playerDetails)} />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    renderStrategy() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(false)}</Row>\r\n                <Row>\r\n                    {this.renderObjectivePanel()}\r\n                    <Col>\r\n                        <StrategySelect\r\n                            playerDetails={this.state.playerDetails}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onStartRound={() => this.handleStartRound()}\r\n                            onPlayerStrategyChange={(e, playerNumber) => this.handlePlayerStrategyChange(e, playerNumber)}\r\n                            />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderStatusBoard() {\r\n        return (\r\n            <Container fluid={true}>\r\n                <Row>{this.renderGameHeader(true)}</Row>\r\n                <Row>\r\n                    {this.renderObjectivePanel()}\r\n                    <Col>\r\n                        <StatusBoard\r\n                            roundNumber={this.state.roundNumber}\r\n                            isGameActive={this.state.totalGameTimer.isCounting}\r\n                            players={this.state.playerDetails}\r\n                            playerTimers={this.state.playerTimers}\r\n                            onEndTurn={() => this.handleEndTurn()}\r\n                            onToggleTimers={() => this.handleToggleTimers()}\r\n                            onVictoryPointsClick={(e, playerString) => this.handleVictoryPointClick(e, playerString)}\r\n                            onStrategyCardClick={(playerString) => this.handleStrategyCardClicked(playerString)}\r\n                            onPassButtonClick={(playerString) => this.handlePassButtonClicked(playerString)}\r\n                            onEndRound={() => this.handleEndRound()}\r\n                            onTechClick={(techDefinition, player) => this.handleTechClicked(techDefinition, player)}\r\n                        />\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        );\r\n    }\r\n\r\n    renderGameHeader(showTurnTimer) {\r\n        return <GameHeader\r\n            roundNumber={this.state.roundNumber}\r\n            totalGameTimer={this.state.totalGameTimer}\r\n            showTurnTimer={showTurnTimer}\r\n            currentTurnTimer={this.state.currentTurnTimer}\r\n            onTurnTimerClick={() => this.handleTurnTimerClicked()}\r\n            onGameTimerClick={() => this.handleGameTimerClicked()}\r\n        />\r\n    }\r\n\r\n\r\n    renderObjectivePanel() {\r\n        return <ObjectivePanel\r\n            className=\"objectivePanel\"\r\n            objectives={this.state.publicObjectives}\r\n            onObjectiveCardClick={(index) => this.handleObjectiveCardClicked(index)}\r\n        />\r\n    }\r\n    //#endregion\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.renderGameComponent()}\r\n                <ObjectiveSelectModal\r\n                    showModal={this.state.showObjectiveSelectModal}\r\n                    objectives={this.state.publicObjectives}\r\n                    stage={this.state.selectedObjective ? this.state.selectedObjective.stage : null}\r\n                    selectedObjectiveSelection={this.state.selectedObjectiveSelection}\r\n                    onConfirmModal={() => this.handleCloseObjectiveSelectModal(true)}\r\n                    onCloseModal={() => this.handleCloseObjectiveSelectModal()}\r\n                    onObjectiveChange={e => this.handleObjectiveChange(e)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nfunction GameHeader(props) {\r\n    let turnTimer = props.showTurnTimer ?\r\n        <TimerBlock\r\n            id=\"turnTimer\"\r\n            label=\"Turn Time\"\r\n            currentSeconds={props.currentTurnTimer.currentSeconds}\r\n            onClick={() => props.onTurnTimerClick()}\r\n        /> :\r\n        null;\r\n\r\n    return (\r\n        <div>\r\n            <label className=\"timerLabel\">{\"Round: \" + props.roundNumber}</label>\r\n            {turnTimer}\r\n            <TimerBlock\r\n                id=\"turnTimer\"\r\n                label=\"Total Game Time\"\r\n                currentSeconds={props.totalGameTimer.currentSeconds}\r\n                onClick={() => props.onGameTimerClick()}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameManager;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GameManager from './GameManager';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport './custom.scss';\r\n\r\ndocument.oncontextmenu = (e) => e.preventDefault();\r\n\r\nReactDOM.render(\r\n    <GameManager/>,\r\n    document.getElementById(\"root\")\r\n  );\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}